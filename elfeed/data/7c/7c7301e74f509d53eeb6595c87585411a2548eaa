<p>Steve McCurry is a Senior Product Manager for Amazon CloudWatch.</p> 
<p>This is the first in a series of two blog posts that show how to use the new <a href="https://aws.amazon.com/cloudwatch/">Amazon CloudWatch</a><br /> snapshot graphs feature.</p> 
<p>Although automated alerts are an important feature of any monitoring solution, including<br /> <a href="https://aws.amazon.com/cloudwatch/">Amazon CloudWatch</a>, it can be challenging to identify the issues that matter in the noise of<br /> monitoring alerts. Reducing the time to resolution depends on being able to make quick<br /> decisions around the importance of alerts.</p> 
<p><span id="more-2603"></span></p> 
<p>When you receive an alert, you ask, “Is this issue urgent?” Unfortunately, a page or email alert<br /> that contains a text description about a symptom doesn’t provide enough context to answer the<br /> question. You need to correlate the alert with metrics to understand what was happening around<br /> the time of the alert. This digging for more information slows down the process of resolving the<br /> issue.</p> 
<p>This blog post shows you how to add richer context to an email alert by attaching a CloudWatch<br /> snapshot graph. The snapshot graph shows the behavior of the underlying metric for the three<br /> hours leading up to the alert.</p> 
<h2>Snapshot graphs overview</h2> 
<p>You can use snapshot graphs to integrate and display CloudWatch charts outside of the AWS<br /> Management Console to improve monitoring visibility or reduce time to resolution. This feature<br /> makes it possible for you to display CloudWatch charts on your webpage or integrate charts with<br /> third-party tools, such as ticketing, chat applications, and bug tracking.</p> 
<p>CloudWatch snapshot graphs are images of CloudWatch charts that are useful for building<br /> custom dashboards. Although the images are static, they can be refreshed frequently to create a<br /> live dashboard experience.</p> 
<p>Snapshot graphs are available through the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricWidgetImage.html">CloudWatch API</a>, which you can use through the<br /> <a href="https://aws.amazon.com/tools/">AWS SDK</a>s or AWS CLI. The charts you request through the API are represented as JSON. To<br /> copy the JSON definition of the chart and use it in the API request, open the Amazon<br /> CloudWatch console. You’ll find the JSON on the <strong>Source</strong> tab of the <strong>Metrics</strong> page, as shown<br /> here.</p> 
<p><img class="alignnone wp-image-2662" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/Screen-Shot-2018-09-21-at-2.10.29-PM.png" alt="" width="769" height="464" /></p> 
<p>All of the features of the CloudWatch line and stacked charts are available in snapshot graphs,<br /> including vertical and horizontal annotations.&nbsp;The example in this post uses horizontal annotations.</p> 
<h2>Adding context to an EC2 monitoring alert</h2> 
<p>In this post, we will set up monitoring for an EC2 instance and generate a monitoring alert. The<br /> alert contains details and a chart that displays the trend of the underlying metric (CPUUtilization)<br /> for three hours leading up to the alert. To follow along, use the code in the <a href="https://github.com/aws-samples/aws-cloudwatch-snapshot-graphs-alert-context">SnapshotAlarmDemo</a><br /> GitHub repo.</p> 
<p>These are the steps required for the monitoring workflow:</p> 
<ol> 
 <li>Create an EC2 instance to monitor.</li> 
 <li>Create a Lambda function that creates an email alert with a snapshot graph attachment.</li> 
 <li>Create an <a href="https://aws.amazon.com/sns/">Amazon Simple Notification Service</a> (Amazon SNS) topic with a Lambda<br /> subscription.</li> 
 <li>Configure <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) to send email to your<br /> account(s).</li> 
 <li>Create an alarm on a metric in CloudWatch whose target is the SNS topic.</li> 
</ol> 
<p>After these components are set up and configured, the alarm will be triggered when the metric<br /> breaches the alarm threshold value. The alarm will trigger the SNS topic and the Lambda<br /> function will be executed. The Lambda function will interrogate the SNS message to extract the<br /> details of the underlying metric and will call the Snapshot Graphs API to create the<br /> corresponding chart. The Lambda function will also create an email and add the chart as an<br /> attachment before using SES to send it. The operator will receive the email alert and can view<br /> the chart immediately, without signing in to AWS.</p> 
<p>Here is what the end-to-end solution looks like:</p> 
<p><img class="alignnone size-full wp-image-2650" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/Picture1.jpg" alt="" width="468" height="144" /></p> 
<h2>Create the EC2 instance to monitor</h2> 
<ol> 
 <li>Open the Amazon <a href="https://console.aws.amazon.com/ec2/v2/home">EC2 console</a>.</li> 
 <li>From the console dashboard, choose <strong>Launch Instance</strong>.</li> 
 <li>On the <strong>Choose an Instance Type</strong> page, choose any instance type. For size, choose nano.</li> 
 <li>Choose <strong>Review and Launch</strong> to let the wizard complete the other configuration settings<br /> for you.</li> 
 <li>On the <strong>Review Instance Launch</strong> page, choose <strong>Launch</strong>.</li> 
 <li>When prompted for a key pair, select <strong>Choose an existing key pair</strong>, or create one.</li> 
 <li>Make a note of the instance ID that is displayed on the <strong>Launch Status</strong> page. You need<br /> this later, when you create your dashboard.</li> 
</ol> 
<p><img class="alignnone wp-image-2651 " src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/launch.png" alt="" width="762" height="127" /></p> 
<h2>Create the Lambda function</h2> 
<p>First, create an IAM role for your Lambda function. Your Lambda function needs a role with the<br /> permissions required to execute Lambda and call the CloudWatch API.</p> 
<h3>Step 1: Create the IAM role</h3> 
<p>Navigate to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>.</p> 
<p>In the navigation pane, choose <strong>Roles</strong>, and then choose <strong>Create role</strong>.</p> 
<p><img class="alignnone wp-image-2652" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/role.png" alt="" width="667" height="278" /></p> 
<p>Add the following policies to the new role. These policies are more permissive than the<br /> minimum permissions required for this example, so review and adjust according to your<br /> requirements:</p> 
<ul> 
 <li>CloudWatchReadOnlyAccess</li> 
 <li>AmazonSESFullAccess</li> 
 <li>AmazonSNSReadOnlyAccess</li> 
 <li>AWSLambdaBasicExecutionRole</li> 
</ul> 
<h3>Step 2: Create the Lambda function</h3> 
<p>Next, navigate to the AWS Lambda console and choose <strong>Create a function</strong>. If you are using the<br /> demo code provided with this post, choose Node.js 6.10 (or later) for the runtime. Attach the<br /> IAM role you created in step 1.</p> 
<p><img class="alignnone wp-image-2653" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/lambda.png" alt="" width="671" height="408" /></p> 
<h3>Step 3: Upload the code</h3> 
<p>Download the code from the <a href="https://github.com/aws-samples/aws-cloudwatch-snapshot-graphs-alert-context">SnapshotAlarmDemo</a> GitHub repo. You will need to run npm&nbsp;install locally and then ZIP the project to upload to the Lambda function.</p> 
<p>For <strong>Handler</strong>, enter <strong>emailer.myHandler</strong>.</p> 
<p><img class="alignnone wp-image-2655" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/function-code.png" alt="" width="777" height="166" /></p> 
<p>Set the function timeout to 30 seconds, and then choose <strong>Save</strong>. Requests to the Snapshot Graphs<br /> service will take longer based on the number of metrics and time interval requested. To optimize<br /> request time, keep requests to under three hours of the most recent data.</p> 
<h3>Step 4: Set the environment variables</h3> 
<p>The email address and region used by the Lambda function are configured in the environment<br /> variables.</p> 
<p><img class="alignnone wp-image-2656" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/envs.png" alt="" width="779" height="160" /></p> 
<p>EMAIL_TO_ADDRESS is the email address where the alert email will be sent.<br /> EMAIL_FROM_ADDRESS is the sender email address.</p> 
<h2>Create the SNS topic</h2> 
<p>Navigate to the Amazon SNS console and choose <strong>Create Topic</strong>.</p> 
<p><img class="alignnone wp-image-2657" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/sns.png" alt="" width="773" height="342" /></p> 
<p>Create a subscription on the topic. For <strong>Endpoint</strong>, enter your Lambda function.</p> 
<p><img class="alignnone wp-image-2658" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/subscribe.png" alt="" width="771" height="338" /></p> 
<h2>Configure SES</h2> 
<p>Navigate to the Amazon SES console. In the left navigation pane, choose <strong>Email Addresses</strong>.<br /> Choose <strong>Verify a New Email Address</strong>, and then enter the email address.</p> 
<p><img class="alignnone wp-image-2659" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/ses.png" alt="" width="761" height="229" /></p> 
<p>SES will send a verification email to the selected address. To verify the account, you must click<br /> the link in the verification email.</p> 
<h2>Create an alarm in CloudWatch</h2> 
<p>Navigate to the Amazon CloudWatch console. In the left navigation pane, choose <strong>Alarms</strong>, and<br /> then choose <strong>Create Alarm</strong>.</p> 
<p><img class="alignnone wp-image-2660" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/alarm.png" alt="" width="772" height="722" /></p> 
<p>For the <strong>Select Metric</strong> step, select an instance and metric (CPUUtilization, as shown here). For<br /> the <strong>Define Alarm</strong> step, enter a unique name and threshold value. Use your SNS topic as the<br /> target action. Change the period to 1 minute. Create the alarm.</p> 
<h2>Testing the workflow</h2> 
<p>To simulate a problem, let’s manually change the threshold of the metric to a very low value.</p> 
<p>Save the alarm and then wait for the alarm to go into an error state. (This can take a couple of<br /> minutes.) As soon as your alarm is in the error state, you should receive the alert email almost<br /> immediately.</p> 
<p>The email contains information about the alarm. The chart of the last three hours of the<br /> associated metric is embedded in the email:</p> 
<p><img class="alignnone size-full wp-image-2666" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/email.png" alt="" width="974" height="506" /></p> 
<h3>Troubleshooting</h3> 
<p>If you didn’t receive an email, make sure that the alarm is in the alarm state. If it is, check the<br /> AWS Lambda logs, which you’ll find on the <strong>Logs</strong> tab of the CloudWatch console.</p> 
<p><img class="alignnone wp-image-2665" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/09/21/logs.png" alt="" width="692" height="278" /></p> 
<h2>Conclusion</h2> 
<p>As you have seen in this demo, you can create CloudWatch alarm workflows that provide more<br /> context than a basic text alert.</p> 
<p>In my next post in this series, I will show you other ways to use CloudWatch snapshot graphs to<br /> improve monitoring visibility.</p> 
<p>For more information, see the snapshot graphs <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricWidgetImage.html">API documentation</a>.</p> 
<h2>Taking it further</h2> 
<p>Most popular ticketing systems allow you to send emails that autogenerate tickets. You can use<br /> the code provided in this post to email your ticketing system to create a ticket for the alarm and<br /> automatically attach the snapshot graph in the body of the ticket. Try it!</p> 
<p>You can also use the code provided in this post as a starting point to programmatically email an<br /> entire CloudWatch dashboard rather than an individual chart. Simply retrieve the dashboard<br /> definition using the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetDashboard.html">GetDashboard API</a> and make multiple calls to <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricWidgetImage.html">GetMetricWidgetImage</a>.</p> 
<p>I look forward to seeing what you build!</p>