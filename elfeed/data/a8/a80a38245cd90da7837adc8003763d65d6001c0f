<p>In this post, I’ll show you how to migrate an encryption wallet for an Oracle database installed on <a href="https://aws.amazon.com/ec2/" rel="noopener noreferrer" target="_blank">Amazon EC2</a> from using an outside HSM to using AWS CloudHSM. <a href="https://docs.oracle.com/database/121/ASOAG/introduction-to-transparent-data-encryption.htm#ASOAG10117" rel="noopener noreferrer" target="_blank">Transparent Data Encryption (TDE) for Oracle</a> is a common use case for Hardware Security Module (HSM) devices like <a href="https://aws.amazon.com/cloudhsm/" rel="noopener noreferrer" target="_blank">AWS CloudHSM</a>. Oracle TDE uses what is called “envelope encryption.” Envelope encryption is when the encryption key used to encrypt the tables of your database is in turn encrypted by a master key that resides either in a software keystore or on a hardware keystore, like an HSM. This master key is non-exportable by design to protect the confidentiality and integrity of your database encryption. This gives you a more granular encryption scheme on your data. </p> 
<p>An <a href="https://www.oracle.com/technetwork/database/security/tde-faq-093689.html#A13016" rel="noopener noreferrer" target="_blank">encryption wallet</a> is an encrypted container used to store the TDE master key for your database. The encryption wallet needs to be opened manually after a database startup and prior to the TDE encrypted data being accessed, so the master key is available for data decryption. The process I talk about in this post can be used with any non-AWS hardware or software encryption wallet, or a hardware encryption wallet that utilizes <a href="https://docs.aws.amazon.com/cloudhsm/classic/userguide/cloud-hsm-overview.html" rel="noopener noreferrer" target="_blank">AWS CloudHSM Classic</a>. For my examples in this tutorial, I will be migrating from a CloudHSM Classic to a CloudHSM cluster. It is worth noting that <a href="https://aws.amazon.com/cloudhsm/faqs-classic/" rel="noopener noreferrer" target="_blank">Gemalto has announced the end-of-life for Luna 5 HSMs, which our CloudHSM Classic fleet uses</a>. </p> 
<blockquote>
 <p><strong>Note:</strong> You cannot migrate from an Oracle instance in <a href="https://aws.amazon.com/rds/" rel="noopener noreferrer" target="_blank">Amazon Relational Database Service</a> (Amazon RDS) to AWS CloudHSM. You must install the Oracle database on an Amazon EC2 instance. Amazon RDS is not currently integrated with AWS CloudHSM.</p>
</blockquote> 
<p>When you move from one type of encryption wallet to another, new TDE master keys are created inside the new wallet. To ensure that you have access to backups that rely on your old HSM, consider leaving the old HSM running for your normal recovery window period. The steps I discuss will perform the decryption of your TDE keys and then re-encrypt them with the new TDE master key for you. </p> 
<p>Once you’ve migrated your Oracle databases to use AWS CloudHSM as your encryption wallet, it’s also a good idea to set up cross-region replication for disaster recovery efforts. With copies of your database and encryption wallet in another region, you can be back in production quickly should a disaster occur. I’ll show you how to take advantage of this by setting up cross-region snapshots of your Oracle database <a href="https://aws.amazon.com/ebs/" rel="noopener noreferrer" target="_blank">Amazon Elastic Block Store (EBS) volumes</a> and copying <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/backups.html" rel="noopener noreferrer" target="_blank">backups of your CloudHSM cluster</a> between regions.</p> 
<h2>Solution overview</h2> 
<p>For this solution, you will modify the Oracle database’s encryption wallet to use AWS CloudHSM. This is completed in three steps, which will be detailed below. First, you will switch from the current encryption wallet, which is your original HSM device, to a software wallet. This is done by reverse migrating to a local wallet. Second, you’ll replace the PKCS#11 provider of your original HSM with the <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/pkcs11-library.html" rel="noopener noreferrer" target="_blank">CloudHSM PKCS#11 software library</a>. Third, you’ll switch the encryption wallet for your database to your CloudHSM cluster. Once this process is complete, your database will automatically re-encrypt all data keys using the new master key. </p> 
<p>To complete the disaster recovery (DR) preparation portion of this post, you will perform two more steps. These consist of copying over snapshots of your EC2 volumes and your CloudHSM cluster backups to your DR region. The following diagram illustrates the steps covered in this post.<br /> &nbsp;<br /> </p>
<div id="attachment_10549" style="width: 760px" class="wp-caption aligncenter">
 <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/05/01/fig-1-CloudHSM_TDE_Migration.png" alt="Figure 1: Steps to migrate your EC2 Oracle TDE database encryption wallet to CloudHSM" width="750" height="1124" class="size-full wp-image-10549" />
 <p class="wp-caption-text">Figure 1: Steps to migrate your EC2 Oracle TDE database encryption wallet to CloudHSM</p>
</div>
<p></p> 
<ol> 
 <li>Switch the current encryption wallet for the Oracle database TDE from your original HSM to a software wallet via a reverse migration process. </li> 
 <li>Replace the PKCS#11 provider of your original HSM with the AWS CloudHSM PKCS#11 software library.</li> 
 <li>Switch your encryption wallet to point to your AWS CloudHSM cluster.</li> 
 <li>(OPTIONAL) Set up cross-region copies of the EC2 instance housing your Oracle database</li> 
 <li>(OPTIONAL) Set up a cross-region copy of your recent CloudHSM cluster backup</li> 
</ol> 
<h2>Prerequisites</h2> 
<p>This process assumes you have the below items already set up or configured: </p> 
<ul> 
 <li><a href="https://aws.amazon.com/quickstart/architecture/oracle-database/" rel="noopener noreferrer" target="_blank">Oracle database with TDE encryption on an EC2 instance</a></li> 
 <li><a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/install-and-configure-client-linux.html" rel="noopener noreferrer" target="_blank">CloudHSM client and command line tools</a> installed on the EC2 instance</li> 
 <li>An original hardware or software encryption wallet</li> 
 <li>A <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html" rel="noopener noreferrer" target="_blank">CloudHSM cluster with at least one HSM</a> for your new encryption wallet</li> 
 <li>A <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/manage-hsm-users.html#create-user" rel="noopener noreferrer" target="_blank">Crypto User</a> (CU) on the new HSM cluster to own and manage the TDE master encryption key</li> 
 <li>A database user with either the <a href="https://docs.oracle.com/cd/E50341_01/doc.1210/e41361/okv_wallets_and_keys.htm#OKVAG10821" rel="noopener noreferrer" target="_blank">ADMINISTER KEY MANAGEMENT or SYSKM</a> privilege</li> 
</ul> 
<h2>Deploy the solution</h2> 
<p>Now that you have the basic steps, I’ll go into more detail on each of them. I’ll show you the steps to migrate your encryption wallet to a software wallet using a reverse migration command. </p> 
<h3>Step 1: Switching the current encryption wallet for the Oracle database TDE from your original HSM to a software wallet via a reverse migration process. </h3> 
<p>To begin, you must configure the <span style="font-family: courier">sqlnet.ora</span> file for the reverse migration. In Oracle databases, the <span style="font-family: courier">sqlnet.ora</span> file is a plain-text configuration file that contains information like encryption, route of connections, and naming parameters that determine how the Oracle server and client must use the capabilities for network database access. You will want to create a backup so you can roll back in the event of any errors. You can make a copy with the below command. Make sure to replace <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;/path/to/&gt;</i></span></span> with the actual path to your <span style="font-family: courier">sqlnet.ora</span> file location. The standard location for this file is “<span style="font-family: courier">$ORACLE_HOME/network/admin</span>“, but check your setup to ensure this is correct.</p> 
<p><span style="font-family: courier">cp <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;/path/to/&gt;</i></span></span>sqlnet.ora <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;/path/to/&gt;</i></span></span>sqlnet.ora.backup</span></p> 
<p>The software wallet must be created before you edit this file, and it should preferably be empty. Then, using your favorite text editor, open the <span style="font-family: courier">sqlnet.ora</span> file and set the below configuration. If an entry already exists, replace it with the below text.</p> 
<div class="hide-language"> 
 <pre><code class="lang-text">
ENCRYPTION_WALLET_LOCATION=
  (SOURCE=(METHOD=FILE)(METHOD_DATA=
    (DIRECTORY=<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;path_to_keystore&gt;</i></span></span>)))
</code></pre> 
</div> 
<p>Make sure to replace the <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;path_to_keystore&gt;</i></span></span> with the directory location of your destination wallet. The destination wallet is the path you choose for the local software wallet. You will notice in Oracle the words “keystore” and “wallet” are interchangeable for this post. Next, you’ll configure the wallet for the reverse migration. For this, you will use the <span style="font-family: courier">ADMINISTER KEY MANAGEMENT</span> statement with the <span style="font-family: courier">SET ENCRYPTION KEY</span> and <span style="font-family: courier">REVERSE MIGRATE</span> clauses as shown in the example below. </p> 
<p>By using the <span style="font-family: courier">REVERSE MIGRATE USING</span> clause in your statement, you ensure the existing TDE table keys and tablespace encryption keys are decrypted by the hardware wallet TDE master key and then re-encrypted with the software wallet TDE master key. You will need to log into the database instance as a user that has been granted the <span style="font-family: courier">ADMINISTER KEY MANAGEMENT</span> or <span style="font-family: courier">SYSKM</span> privileges to run this statement. An example of the login is below. Make sure to replace the <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;sec_admin&gt;</i></span></span> and <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;password&gt;</i></span></span> with your administrator user name and password for the database. </p> 
<div class="hide-language"> 
 <pre><code class="lang-text">
sqlplus c##<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;sec_admin&gt;</i></span></span> syskm
Enter password: <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;password&gt;</i></span></span> 
Connected.
</code></pre> 
</div> 
<p>Once you’re connected, you’ll run the SQL statement below. Make sure to replace <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;password&gt;</i></span></span> with your own existing wallet password and <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;username:password&gt;</i></span></span> with your own existing wallet user ID and password. We are going to run this statement with the <span style="font-family: courier">WITH BACKUP</span> parameter, as it’s always ideal to take a backup in case something goes incorrectly. </p> 
<p><span style="font-family: courier">ADMINISTER KEY MANAGEMENT SET ENCRYPTION KEY IDENTIFIED BY <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;password&gt;</i></span></span> REVERSE MIGRATE USING “<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;username:password&gt;</i></span></span>” WITH BACKUP;</span></p> 
<p>If successful, you will see the text <span style="font-family: courier">keystore altered</span>. When complete, you do not need to restart your database or manually re-open the local wallet as the migration process loads this into memory for you. </p> 
<p>With the migration complete, you’ll now move onto the next step of replacing the PKCS#11 provider of your original HSM with the <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/pkcs11-library.html" rel="noopener noreferrer" target="_blank">CloudHSM PKCS#11 software library</a>. This library is a PKCS#11 standard implementation that communicates with the HSMs in your cluster and is compliant with PKCS#11 version 2.40. </p> 
<h3>Step 2: Replacing the PKCS#11 provider of your original HSM with the AWS CloudHSM PKCS#11 software library.</h3> 
<p>You’ll begin by installing the software library with the below two commands.</p> 
<p><span style="font-family: courier">wget <a href="https://s3.amazonaws.com/cloudhsmv2-software/CloudHsmClient/EL6/cloudhsm-client-pkcs11-latest.el6.x86_64.rpm" rel="noopener noreferrer" target="_blank">https://s3.amazonaws.com/cloudhsmv2-software/CloudHsmClient/EL6/cloudhsm-client-pkcs11-latest.el6.x86_64.rpm</a></span></p> 
<p><span style="font-family: courier">sudo yum install -y ./cloudhsm-client-pkcs11-latest.el6.x86_64.rpm</span></p> 
<p>When installation completes, you will be able to find the CloudHSM PKCS#11 software library files in the <span style="font-family: courier">directory</span>, the default directory for AWS CloudHSM’s software library installs. To ensure processing speed and throughput capabilities of the HSMs, I suggest installing a <a href="https://redis.io/" rel="noopener noreferrer" target="_blank">Redis cache</a> as well. This cache stores key handles and attributes locally, so you may access them without making a call to the HSMs. As this step is optional and not required for this post, I will leave the link for installation instructions <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/pkcs11-library-install.html#install-pkcs11-redis" rel="noopener noreferrer" target="_blank">here</a>. With the software library installed, you want to ensure the CloudHSM client is running. You can check this with the command below.</p> 
<p><span style="font-family: courier">sudo start cloudhsm-client</span></p> 
<h3>Step 3: Switching your encryption wallet to point to your AWS CloudHSM cluster.</h3> 
<p>Once you’ve verified the client is running, you’re going to create another backup of the <span style="font-family: courier">sqlnet.ora</span> file. It’s always a good idea to take backups before making any changes. The command would be similar to below, replacing <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;/path/to/&gt;</i></span></span> with the actual path to your <span style="font-family: courier">sqlnet.ora</span> file.</p> 
<p><span style="font-family: courier">cp <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;/path/to/&gt;</i></span></span>sqlnet.ora <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;/path/to/&gt;</i></span></span>sqlnet.ora.backup2</span></p> 
<p>With this done, again open the <span style="font-family: courier">sqlnet.ora</span> file with your favorite text editor. You are going to edit the line <span style="font-family: courier">encryption_wallet_location</span> to resemble the below text.</p> 
<div class="hide-language"> 
 <pre><code class="lang-text">
ENCRYPTION_WALLET_LOCATION=
  (SOURCE=(METHOD=HSM))
</code></pre> 
</div> 
<p>Save the file and exit. You will need to create the directory where your Oracle database will expect to find the library file for the AWS CloudHSM PKCS#11 software library. You do this with the command below.</p> 
<p><span style="font-family: courier">sudo mkdir -p /opt/oracle/extapi/64/hsm</span></p> 
<p>With the directory created, you next copy over the CloudHSM PKCS#11 software library from the original installation directory to this one. It is important this new directory only contain the one library file. Should any files exist in the directory that are not directly related to the way you installed the CloudHSM PKCS#11 software library, remove them. The command to copy is below.</p> 
<p><span style="font-family: courier">sudo cp /opt/cloudhsm/lib/libcloudhsm_pkcs11_standard.so /opt/oracle/extapi/64/hsm</span></p> 
<p>Now, modify the ownership of the directory and everything inside. The Oracle user must have access to these library files to run correctly. The command to do this is below.</p> 
<p><span style="font-family: courier">sudo chown -R oracle:dba /opt/oracle</span></p> 
<p>With that done, you can <a href="https://docs.oracle.com/cd/B19306_01/server.102/b14231/start.htm#i1006133" rel="noopener noreferrer" target="_blank">start your Oracle database</a>. This completes the migration of your encryption wallet and TDE keys from your original encryption wallet to a local wallet, and finally to CloudHSM as the new encryption wallet. Should you decide you wish to create new TDE master encryption keys on CloudHSM, you can follow the steps <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/oracle-tde-configure-database-and-generate-master-key.html" rel="noopener noreferrer" target="_blank">here</a> to do so. </p> 
<p>These steps are optional, but helpful in the event you must restore your database to production quickly. For customers that leverage DR environments, we have two great blog posts <a href="https://aws.amazon.com/blogs/compute/automating-amazon-ebs-snapshot-management-with-aws-step-functions-and-amazon-cloudwatch-events/" rel="noopener noreferrer" target="_blank">here</a> and <a href="https://aws.amazon.com/blogs/security/how-to-clone-an-aws-cloudhsm-cluster-across-regions/" rel="noopener noreferrer" target="_blank">here</a> to walk you through each step of the cross-region replication process. The first uses a combination of <a href="https://aws.amazon.com/step-functions/" rel="noopener noreferrer" target="_blank">AWS Step Functions</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html" rel="noopener noreferrer" target="_blank">Amazon CloudWatch Events</a> to copy your EBS snapshots to your DR region, and the second showcases how to copy your CloudHSM cluster backups to your DR region. </p> 
<h3>Summary</h3> 
<p>In this post, I walked you through how to migrate your Oracle TDE database encryption wallet to point it to CloudHSM for secure storage of your TDE. I showed you how to properly install the CloudHSM PKCS#11 software library and place it in the directory for Oracle to find and use. This process can be used to migrate most on-premises encryption wallets to AWS CloudHSM to ensure security of your TDE keys and meet compliance requirements. </p> 
<p>If you have feedback about this blog post, submit comments in the Comments section below. If you have questions about this blog post, start a new thread on the <a href="https://forums.aws.amazon.com/forum.jspa?forumID=156" rel="noopener noreferrer" target="_blank">AWS CloudHSM forum</a>.</p> 
<p><strong>Want more AWS Security news? Follow us on <a href="https://twitter.com/AWSsecurityinfo" title="Twitter" target="_blank" rel="noopener noreferrer">Twitter</a>.</strong></p> 
<footer> 
 <div class="blog-author-box"> 
  <div class="blog-author-image"> 
   <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/28/tracyp-bio-photo.jpg" alt="Author" width="119" height="160" class="aligncenter size-full wp-image-8732" /> 
  </div> 
  <h3 class="lb-h4">Tracy Pierce</h3> 
  <p>Tracy Pierce is a Senior Consultant, Security Specialty, for Remote Consulting Services. She enjoys the peculiar culture of Amazon and uses that to ensure every day is exciting for her fellow engineers and customers alike. Customer Obsession is her highest priority and she shows this by improving processes, documentation, and building tutorials. She has her AS in Computer Security &amp; Forensics from SCTD, SSCP certification, AWS Developer Associate certification, and AWS Security Specialist certification. Outside of work, she enjoys time with friends, her Great Dane, and three cats. She keeps work interesting by drawing cartoon characters on the walls at request. </p> 
  <p></p>
 </div> 
</footer>