<p>We are pleased to announce support for blue/green deployments for services hosted using <a href="https://aws.amazon.com/fargate/">AWS Fargate</a> and <a href="https://aws.amazon.com/ecs/">Amazon Elastic Container Service</a> (Amazon ECS).</p> 
<p>In <a href="https://aws.amazon.com/codedeploy/">AWS CodeDeploy</a>, blue/green deployments help you minimize downtime during application updates. They allow you to launch a new version of your application alongside the old version and test the new version before you reroute traffic to it. You can also monitor the deployment process and, if there is an issue, quickly roll back.</p> 
<p>With this new capability, you can create a new service in AWS Fargate or Amazon ECS &nbsp;that uses CodeDeploy to manage the deployments, testing, and traffic cutover for you. When you make updates to your service, CodeDeploy triggers a deployment. This deployment, in coordination with Amazon ECS, deploys the new version of your service to the green target group, updates the listeners on your load balancer to allow you to test this new version, and performs the cutover if the health checks pass.</p> 
<p>In this post, I show you how to configure blue/green deployments for AWS Fargate and Amazon ECS using AWS CodeDeploy. For information about how to automate this end-to-end using a continuous delivery pipeline in AWS CodePipeline and Amazon ECR, read <a href="https://aws.amazon.com/blogs/devops/build-a-continuous-delivery-pipeline-for-your-container-images-with-amazon-ecr-as-source/">Build a Continuous Delivery Pipeline for Your Container Images with Amazon ECR as Source.</a></p> 
<p>Let’s dive in!</p> 
<h3>Prerequisites</h3> 
<p>To follow along, you must have these resources in place:</p> 
<ul> 
 <li>A Docker image repository that contains an image you have built from your Dockerfile and application source. This walkthrough uses Amazon ECR. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html">Creating a Repository</a> and <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html">Pushing an Image</a> in the <em>Amazon Elastic Container Registry User Guide</em>.</li> 
 <li>An Amazon ECS cluster. You can use the default cluster created for you when you first use Amazon ECS or, on the <strong>Clusters</strong> page of the Amazon ECS console, you can choose a Networking only cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create_cluster.html">Creating a Cluster</a> in the <em>Amazon Elastic Container Service User Guide</em>.</li> 
</ul> 
<p><strong>Note</strong>: The image repository and cluster must be created in the same AWS Region.</p> 
<h3>Set up IAM service roles</h3> 
<p>Because you will be using AWS CodeDeploy to handle the deployments of your application to Amazon ECS, AWS CodeDeploy needs permissions to call Amazon ECS APIs, modify your load balancers, invoke Lambda functions, and describe CloudWatch alarms. Before you create an Amazon ECS service that uses the blue/green deployment type, you must create the AWS CodeDeploy IAM role (ecsCodeDeployRole). For instructions, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/codedeploy_IAM_role.html">Amazon ECS CodeDeploy IAM Role</a> in the <em>Amazon ECS Developer Guide</em>.</p> 
<h3>Create an Application Load Balancer</h3> 
<p>To allow AWS CodeDeploy and Amazon ECS to control the flow of traffic to multiple versions of your Amazon ECS service, you must create an Application Load Balancer.</p> 
<p>Follow the steps in <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create-application-load-balancer.html">Creating an Application Load Balancer</a> and make the following modifications:</p> 
<ol> 
 <li>For step 6a in the <strong>Define Your Load Balancer</strong> section, name your load balancer <strong>sample-website-alb</strong>.</li> 
 <li>For step 2 in the <strong>Configure Security Groups</strong> section: 
  <ol> 
   <li>For <strong>Security group name</strong>, enter <strong>sample-website-sg</strong>.</li> 
   <li>Add an additional rule to allow <strong>TCP port 8080</strong> from <strong>anywhere (0.0.0.0/0)</strong>.</li> 
  </ol> </li> 
 <li>In the <strong>Configure Routing</strong> section: 
  <ol> 
   <li>For <strong>Name</strong>, enter <strong>sample-website-tg-1</strong>.</li> 
   <li>For <strong>Target type</strong>, choose to register your targets with an IP address.</li> 
  </ol> </li> 
 <li>Skip the steps in the <strong>Create a Security Group Rule for Your Container Instances</strong> section.</li> 
</ol> 
<h3>Create an Amazon ECS task definition</h3> 
<p><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create-task-definition.html">Create an Amazon ECS task definition</a> that references the Docker image hosted in your image repository. For the sake of this walkthrough, we use the Fargate launch type and the following task definition.</p> 
<pre>{
  &quot;executionRoleArn&quot;: &quot;arn:aws:iam::account_ID:role/ecsTaskExecutionRole&quot;,
  &quot;containerDefinitions&quot;: [{
    &quot;name&quot;: &quot;sample-website&quot;,
    &quot;image&quot;: &quot;&lt;YOUR ECR REPOSITORY URI&gt;&quot;,
    &quot;essential&quot;: true,
    &quot;portMappings&quot;: [{
      &quot;hostPort&quot;: 80,
      &quot;protocol&quot;: &quot;tcp&quot;,
      &quot;containerPort&quot;: 80
    }]
  }],
  &quot;requiresCompatibilities&quot;: [
    &quot;FARGATE&quot;
  ],
  &quot;networkMode&quot;: &quot;awsvpc&quot;,
  &quot;cpu&quot;: &quot;256&quot;,
  &quot;memory&quot;: &quot;512&quot;,
  &quot;family&quot;: &quot;sample-website&quot;
}</pre> 
<p><strong>Note</strong>: Be sure to change the value for “image” to the Amazon ECR repository URI for the image you created and uploaded to Amazon ECR in Prerequisites.</p> 
<h2>Creating an Amazon ECS service with blue/green deployments</h2> 
<p>Now that you have completed the prerequisites and setup steps, you are ready to create an Amazon ECS service with blue/green deployment support from AWS CodeDeploy.</p> 
<h3>Create an Amazon ECS service</h3> 
<ol> 
 <li>Open the Amazon ECS console at <a href="https://console.aws.amazon.com/ecs/">https://console.aws.amazon.com/ecs/</a>.</li> 
 <li>From the list of clusters, choose the Amazon ECS cluster you created to run your tasks.</li> 
 <li>On the <strong>Services</strong> tab, choose <strong>Create</strong>.</li> 
</ol> 
<p>This opens the <strong>Configure service</strong> wizard. From here you are able to configure everything required to deploy, run, and update your application using AWS Fargate and AWS CodeDeploy.</p> 
<ol> 
 <li>Under <strong>Configure service</strong>: 
  <ol> 
   <li>For the <strong>Launch type</strong>, choose <strong>FARGATE</strong>.</li> 
   <li>For <strong>Task Definition</strong>, choose the sample-website task definition that you created earlier.</li> 
   <li>Choose the cluster where you want to run your applications tasks.</li> 
   <li>For Service Name, enter Sample-Website.</li> 
   <li>For Number of tasks, specify the number of tasks that you want your service to run.</li> 
  </ol> </li> 
 <li>Under <strong>Deployments</strong>: 
  <ol> 
   <li>For <strong>Deployment type</strong>, choose <strong>Blue/green deployment (powered by AWS CodeDeploy)</strong>. This creates a CodeDeploy application and deployment group using the default settings. You can see and edit these settings in the CodeDeploy console later.</li> 
   <li>For the service role, choose the CodeDeploy service role you created earlier.</li> 
  </ol> </li> 
 <li>Choose <strong>Next step</strong>.</li> 
 <li>Under <strong>VPC and security groups</strong>: 
  <ol> 
   <li>From <strong>Subnets</strong>, choose the subnets that you want to use for your service.</li> 
   <li>For <strong>Security groups</strong>, choose <strong>Edit</strong>. 
    <ol> 
     <li>For <strong>Assigned security groups</strong>, choose <strong>Select existing security group</strong>.</li> 
     <li>Under <strong>Existing security groups</strong>, choose the sample-website-sg group that you created earlier.</li> 
     <li>Choose <strong>Save</strong>.</li> 
    </ol> </li> 
  </ol> </li> 
 <li>Under <strong>Load Balancing</strong>: 
  <ol> 
   <li>Choose <strong>Application Load Balancer</strong>.</li> 
   <li>For <strong>Load balancer name</strong>, choose <strong>sample-website-alb</strong>.</li> 
  </ol> </li> 
 <li>Under <strong>Container to load balance</strong>: 
  <ol> 
   <li>Choose <strong>Add to load balancer</strong>.</li> 
   <li>For <strong>Production listener port</strong>, choose <strong>80:HTTP</strong> from the first drop-down list.</li> 
   <li>For<strong> Test listener port</strong>, in <strong>Enter a listener port</strong>, enter <strong>8080</strong>.</li> 
  </ol> </li> 
 <li>Under <strong>Additional configuration</strong>: 
  <ol> 
   <li>For <strong>Target group 1 name</strong>, choose <strong>sample-website-tg-1</strong>.</li> 
   <li>For <strong>Target group 2 name</strong>, enter <strong>sample-website-tg-2</strong>.</li> 
  </ol> </li> 
 <li>Under <strong>Service discovery (optional)</strong>, clear <strong>Enable service discovery integration</strong>, and then choose <strong>Next step</strong>.</li> 
 <li>Do not configure Auto Scaling. Choose <strong>Next step</strong>.</li> 
 <li>Review your service for accuracy, and then choose <strong>Create service</strong>.</li> 
 <li>If everything is created successfully, choose <strong>View service</strong>.</li> 
</ol> 
<p>You should now see your newly created service, with at least one task running.</p> 
<p><img class="alignnone wp-image-2862 size-large" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-new-service-1024x566.png" alt="" width="1024" height="566" /></p> 
<p>When you choose the <strong>Events</strong> tab, you should see that Amazon ECS has deployed the tasks to your sample-website-tg-1 target group. When you refresh, you should see your service reach a steady state.</p> 
<p><img class="alignnone wp-image-2866 size-large" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-new-service-events-1024x327.png" alt="" width="1024" height="327" /></p> 
<p>In the <a href="https://us-east-1.console.aws.amazon.com/codesuite/codedeploy/applications/">AWS CodeDeploy console</a>, you will see that the Amazon ECS <strong>Configure service</strong> wizard has created a CodeDeploy application for you. Click into the application to see other details, including the deployment group that was created for you.</p> 
<p><img class="alignnone wp-image-2867 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-codedeploy-app.png" alt="" width="973" height="534" /></p> 
<p>If you click the deployment group name, you can view other details about your deployment. &nbsp;Under <strong>Deployment type</strong>, you’ll see <strong>Blue/green</strong>. Under <strong>Deployment configuration</strong>, you’ll see <strong>CodeDeployDefault.ECSAllAtOnce</strong>. This indicates that after the health checks are passed, CodeDeploy updates the listeners on the Application Load Balancer to send 100% of the traffic over to the green environment.</p> 
<p><img class="alignnone size-full wp-image-2868" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-codedepploy-deployment-group-details.png" alt="" width="968" height="302" /></p> 
<p>Under <strong>Load Balancing</strong>, you can see details about your target groups and your production and test listener ARNs.</p> 
<p><img class="alignnone size-full wp-image-2869" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-codedeploy-load-balancing.png" alt="" width="957" height="266" /></p> 
<p>Let’s apply an update to your service to see the CodeDeploy deployment in action.</p> 
<h2>Trigger a CodeDeploy blue/green deployment</h2> 
<h3>Create a revised task definition</h3> 
<p>To test the deployment, create a revision to your task definition for your application.</p> 
<ol> 
 <li>Open the Amazon ECS console at <a href="https://console.aws.amazon.com/ecs/">https://console.aws.amazon.com/ecs/</a>.</li> 
 <li>From the navigation pane, choose <strong>Task Definitions</strong>.</li> 
 <li>Choose your sample-website task definition, and then choose <strong>Create new revision</strong>.</li> 
 <li>Under <strong>Tags</strong>: 
  <ol> 
   <li>In <strong>Add key</strong>, enter <strong>Name</strong>.</li> 
   <li>In <strong>Add value</strong>, enter <strong>Sample Website</strong>.</li> 
  </ol> </li> 
 <li>Choose <strong>Create</strong>.</li> 
</ol> 
<h3>Update ECS service</h3> 
<p>You now need to update your Amazon ECS service to use the latest revision of your task definition.</p> 
<ol> 
 <li>Open the Amazon ECS console at <a href="https://console.aws.amazon.com/ecs/">https://console.aws.amazon.com/ecs/</a>.</li> 
 <li>Choose the Amazon ECS cluster where you’ve deployed your Amazon ECS service.</li> 
 <li>Select the check box next to your sample-website service.</li> 
 <li>Choose <strong>Update</strong> to open the <strong>Update Service</strong> wizard. 
  <ol> 
   <li>Under <strong>Configure service</strong>, for <strong>Task Definition</strong>, choose <strong>2 (latest)</strong> from the <strong>Revision</strong> drop-down list.</li> 
  </ol> </li> 
 <li>Choose <strong>Next step</strong>.</li> 
 <li>Skip <strong>Configure deployments</strong>. Choose <strong>Next step</strong>.</li> 
 <li>Skip <strong>Configure network</strong>. Choose <strong>Next step</strong>.</li> 
 <li>Skip <strong>Set Auto Scaling (optional)</strong>. Choose <strong>Next step</strong>.</li> 
 <li>Review the changes, and then choose <strong>Update Service</strong>.</li> 
 <li>Choose <strong>View Service</strong>.</li> 
</ol> 
<p>You are now be taken to the Deployments tab of your service where you can see details about your blue/green deployment.</p> 
<p><img class="alignnone size-full wp-image-2870" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-ecs-deployment-details.png" alt="" width="1049" height="337" /></p> 
<p>You can click the deployment ID to go to the details view for the CodeDeploy deployment.</p> 
<p>From there you can see the deployments status:</p> 
<p><img class="alignnone wp-image-2871 size-medium" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-codedeploy-deployment-status-300x300.png" alt="" width="300" height="300" /></p> 
<p>You can also see the progress of the traffic shifting:</p> 
<p><img class="alignnone wp-image-2872 size-medium" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/27/bg-ecs-deployments-codedeploy-traffic-shifting-300x181.png" alt="" width="300" height="181" /></p> 
<p>If you notice issues, you can stop and roll back the deployment. This shifts traffic back to the original (blue) task set and stops the deployment.</p> 
<p>By default, CodeDeploy waits one hour after a successful deployment before it terminates the original task set. You can use the AWS CodeDeploy console to shorten this interval. After the task set is terminated, CodeDeploy marks the deployment complete.</p> 
<h2>Conclusion</h2> 
<p>In this post, I showed you how to create an AWS Fargate-based Amazon ECS service with blue/green deployments powered by AWS CodeDeploy. I showed you how to configure the required and prerequisite components, such as an Application Load Balancer and associated targets groups, all from the AWS Management Console. I hope that the information in this posts helps you get started implementing this for your own applications!</p>