<p>Last fall I <a href="https://aws.amazon.com/blogs/aws/aws-ground-station-ingest-and-process-data-from-orbiting-satellites/">told you</a> about <a href="https://aws.amazon.com/ground-station/" title="">AWS Ground Station</a> and gave you a sneak preview of the steps that you would take to downlink data from a satellite. I am happy to report that the first two ground stations are now in operation, and that you can start using <a href="https://aws.amazon.com/ground-station/" title="">AWS Ground Station</a> today.</p> 
<p><span style="text-decoration: underline"><strong>Using AWS Ground Station</strong></span><br /> As I noted at the time, the first step is to <strong>Add satellites</strong> to your AWS account by sharing the satellite’s NORAD ID and other information with us:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_add_satellite_1.png" width="900" height="345" /></p> 
<p>The on-boarding process generally takes a couple of days. For testing purposes, the Ground Station team added three satellites to my account:</p> 
<ul> 
 <li style="padding-bottom: 0.5em"><a href="https://en.wikipedia.org/wiki/Terra_(satellite)">Terra</a> (NORAD ID 25994) – This satellite was launched in 1999 and orbits at an altitude of 705 km. It carries five sensors that are designed to study the Earth’s surface.</li> 
 <li style="padding-bottom: 0.5em"><a href="https://en.wikipedia.org/wiki/Aqua_(satellite)">Aqua</a> (NORAD ID 27424) – This satellite was launched in 2002 and also orbits at an altitude of 705 km. It carries six sensors that are designed to study surface water.</li> 
 <li><a href="https://en.wikipedia.org/wiki/NOAA-20">NOAA-20</a> (NORAD ID 43013) – This satellite was launched in 2017 and orbits at an altitude of 825 km. It carries five sensors that observe both land and water.</li> 
</ul> 
<p>While the on-boarding process is under way, the next step is to choose the ground station that you will use to receive your data. This is dependent on the path your satellite takes as it orbits the Earth and the time at which you want to receive data. Our first two ground stations are located in Oregon and Ohio, with other locations under construction. Each ground station is associated with an adjacent AWS region and you need to set up your AWS infrastructure in that region ahead of time.</p> 
<p>I’m going to use the <span title="">US East (Ohio)</span> Region for this blog post. Following the directions in the AWS Ground Station User Guide, I use a CloudFormation template to set up my infrastructure within my VPC:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_stack_params_1.png" width="900" height="855" /></p> 
<p>The stack includes an EC2 instance, three <a href="https://aws.amazon.com/blogs/aws/new-elastic-network-interfaces-in-the-virtual-private-cloud/">Elastic Network Interfaces</a> (ENIs), and the necessary IAM roles, EC2 security groups, and so forth:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_stack_vis_1.png" width="881" height="699" /></p> 
<p>The EC2 instance hosts Kratos <a href="http://www.kratoscomms.com/products/signal-processing/datadefender">DataDefender</a> (a lossless UDP transport mechanism). I can also use the instance to host the code that processes the incoming data stream. DataDefender makes the incoming data stream available on a <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix domain socket</a> at port 55892. My code is responsible for reading the raw data, splitting it in to packets, and then processing each packet.</p> 
<p>You can also create one or more Mission Profiles. Each profile outlines the timing requirements for a contact, lists the resources needed for the contact, and defines how data flows during the contact. You can use the same Mission Profile for multiple satellites, and you can also use different profiles (as part of distinct contacts) for the same satellite.</p> 
<p><span style="text-decoration: underline"><strong>Scheduling a Contact</strong></span><br /> With my satellite configured and my AWS infrastructure in place, I am ready to schedule a contact! I open the <a href="https://us-east-2.console.aws.amazon.com/groundstation/home">Ground Station Console</a>, make sure that I am in the AWS Region that corresponds to the ground station that I want to use, and click Contacts. I review the list of upcoming contacts, select the desired one (If you are not accustomed to thinking in <a href="https://www.timeanddate.com/time/zones/z">Zulu</a> time, a <a href="https://www.worldtimebuddy.com/">World Clock / Converter</a> is helpful), and click <strong>Reserve contact</strong>:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_contacts_avail_1.png" width="900" height="461" /></p> 
<p>Then I confirm my intent by clicking <strong>Reserve</strong>:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_confirmed_1.png" width="600" height="378" /></p> 
<p>The status of the connection goes to <strong>SCHEDULING</strong> and then to <strong>SCHEDULED</strong>, all within a minute or so:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_scheduled_1.png" width="373" height="194" /></p> 
<p>The next step is to wait for the satellite to come within range of the chosen ground station. During this time, I can connect to the EC2 instance in two ways:</p> 
<p><strong>SSH</strong> – I can SSH to the instance’s IP address, verify that my code is in place and ready to run, and confirm that DataDefender is running:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_ddx_running_1.png" width="880" height="168" /></p> 
<p><strong>WEB</strong> – I can open up a web browser and see the DataDefender web interface:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_dd_idle_web_2.png" width="898" height="661" /></p> 
<p>One thing to note: you may need to edit the security group attached to the instance in order to allow it to be accessed from outside of the VPC:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_ec2_sg_1.png" width="800" height="194" /></p> 
<p><span style="text-decoration: underline"><strong>3-2-1 Contact!</strong></span><br /> Ok, now I need to wait for Terra to come within range of the ground station that I selected. While not necessary, it can be fun (and educational) to use a real-time satellite tracker such as the one at <a href="https://www.n2yo.com/">n2yo.com</a>:</p> 
<p><a href="https://www.n2yo.com/?s=25994"><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_n2yo_track_1.png" width="700" height="578" /></a>When my satellite comes in to range, DataDefender shows me that the data transfer is under way (at an impressive 781 Mbps), as indicated by the increased <strong>WAN Data Rate</strong>:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/gs_dd_idle_connected_1.png" width="900" height="652" /></p> 
<p>As I noted earlier, the incoming data stream is available within the instance in real time on a Unix domain socket. After my code takes care of all immediate, low-level processing, it can route the data to <a href="https://aws.amazon.com/kinesis/data-streams/">Amazon Kinesis Data Streams</a> for real-time processing, store it in <a href="https://aws.amazon.com/s3/">Amazon S3</a> for safe-keeping or further analysis, and so forth.</p> 
<p><span style="text-decoration: underline"><strong>Customer Perspective – Spire</strong></span><br /> <a href="https://www.spire.com/en"><img style="float: right;padding-left: 8px;padding-bottom: 8px" src="https://media.amazonwebservices.com/blog/2019/spire_globe_1.gif" /></a>While I was writing this blog post I spoke with <a href="https://www.linkedin.com/in/robertsproles/">Robert Sproles</a>, a Program Manager with AWS customer <a href="https://www.spire.com/en">Spire</a> to learn about their adoption of Ground Station. Spire provides data &amp; analytics from orbit, and runs the space program behind it. They design and build their own <a href="https://www.spire.com/spirepedia/cubesat">cubesats</a> in-house, and currently have about 70 in orbit. Collectively, the satellites have more sensors than any of Spire’s competitors, and collect <a href="https://www.spire.com/en/solutions/maritime-ais-data">maritime</a>, <a href="https://www.spire.com/en/solutions/aviation-ads-b-data">aviation</a>, and <a href="https://www.spire.com/en/solutions/weather-ro-data">weather</a> data.</p> 
<p>Although Spire already operates a network of 30 ground stations, they were among the first to see the value of (and to start using) <a href="https://aws.amazon.com/ground-station/" title="">AWS Ground Station</a>. In addition to being able to shift from a CapEx (capital expense) to OpEx (operating expense) model, Ground Station gives them the ability to collect fresh data more quickly, with the goal of making it available to their customers even more rapidly. Spire’s customers are wide-ranging and global, but can all benefit from rapid access to high-quality data. Their <a href="https://www.spire.com/spirepedia/lemur">LEMUR</a> (Low Earth Multi-Use Receiver) satellites go around the globe every 90 minutes, but this is a relatively long time when the data is related to aviation or weather. Robert told me that they can counter this by adding additional satellites in the same orbit or by making use of additional ground stations, all with the goal of reducing latency and delivering the freshest possible data.</p> 
<p>Spire applies machine learning to the raw data, with the goal of going from a “lump of data” to actionable insights. For example, they use ML to make predictions about the future positions of cargo ships, using a combination of weather and historical data. The predicted ship positions can be used to schedule dock slots and other scarce resources ahead of time.</p> 
<p><span style="text-decoration: underline"><strong>Now Available</strong></span><br /> You can get started with <a href="https://aws.amazon.com/ground-station/" title="">AWS Ground Station</a> today. We have two ground stations in operation, with ten more in the works and planned for later this year.</p> 
<p>— <a href="https://twitter.com/jeffbarr">Jeff</a>;</p> 
<p>&nbsp;</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=VNJsHs5jNY4:p_x2rvf4TlY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=VNJsHs5jNY4:p_x2rvf4TlY:dnMXMwOfBR0"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=dnMXMwOfBR0" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=VNJsHs5jNY4:p_x2rvf4TlY:7Q72WNTAKBA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=7Q72WNTAKBA" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/AmazonWebServicesBlog/~4/VNJsHs5jNY4" height="1" width="1" alt=""/>