<p>We <a href="https://aws.amazon.com/blogs/aws/aws-previews-and-pre-announcements-at-reinvent-2018-monday-night-live/">announced</a> Elastic Fabric Adapter (EFA) at re:Invent 2018 and made it available in preview form at the time. During the preview, AWS customers put EFA through its paces on a variety of tightly-coupled HPC workloads, providing us with valuable feedback and helping us to fine-tune the final product.</p> 
<p><span style="text-decoration: underline"><strong>Now Available</strong></span><br /> Today I am happy to announce that EFA is now ready for production use in multiple AWS regions. It is ready to support demanding HPC workloads that need lower and more consistent network latency, along with higher throughput, than is possible with traditional TCP communication. This launch lets you apply the scale, flexibility, and elasticity of the <a href="https://aws.amazon.com/" title="">AWS Cloud</a> to tightly-coupled HPC apps and I can’t wait to hear what you do with it. You can, for example, scale up to thousands of compute nodes without having to reserve the hardware or the network ahead of time.</p> 
<p><span style="text-decoration: underline"><strong>All About EFA</strong></span><br /> An Elastic Fabric Adapter is an AWS <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html">Elastic Network Adapter</a> (ENA) with added capabilities (read my post, <a href="https://aws.amazon.com/blogs/aws/elastic-network-adapter-high-performance-network-interface-for-amazon-ec2/">Elastic Network Adapter – High Performance Network Interface for Amazon EC2</a>, to learn more about ENA). An EFA can still handle IP traffic, but also supports an important access model commonly called OS bypass. This model allows the application (most commonly through some user-space middleware) access the network interface without having to get the operating system involved with each message. Doing so reduces overhead and allows the application to run more efficiently. Here’s what this looks like (<a href="https://www.slideshare.net/AmazonWebServices/new-launch-scaling-tightlycoupled-hpc-workloads-on-hpc-with-elastic-fabric-adapter-and-high-bandwidth-network-optimized-ec2-instances-ent360-aws-reinvent-2018">source</a>):</p> 
<p><img class="size-medium aligncenter" src="https://media.amazonwebservices.com/blog/2019/efa_cake_1.png" width="693" height="444" /></p> 
<p>The <strong>MPI Implementation</strong> and <strong>libfabric</strong> layers of this cake play crucial roles:</p> 
<p><strong>MPI</strong> – Short for Message Passing Interface, <a href="https://en.wikipedia.org/wiki/Message_Passing_Interface">MPI</a> is a long-established communication protocol that is designed to support parallel programming. It provides functions that allow processes running on a tightly-coupled set of computers to communicate in a language-independent way.</p> 
<p><strong>libfabric</strong> – This library fits in between several different types of network fabric providers (including EFA) and higher-level libraries such as MPI. EFA supports the standard RDM (reliable datagram) and DGRM (unreliable datagram) endpoint types; to learn more, check out the <a href="https://ofiwg.github.io/libfabric/">libfabric Programmer’s Manual</a>. EFA also supports a new protocol that we call Scalable Reliable Datagram; this protocol was designed to work within the AWS network and is implemented as part of our Nitro chip.</p> 
<p>Working together, these two layers (and others that can be slotted in instead of MPI), allow you to bring your existing HPC code to AWS and run it with little or no change.</p> 
<p>You can use EFA today on <strong>c</strong><strong>5n.18xlarge</strong> and <strong>p3dn.24xlarge</strong> instances in all AWS regions where those instances are available. The instances can use EFA to communicate within a VPC subnet, and the security group must have ingress and egress rules that allow all traffic within the security group to flow. Each instance can have a single EFA, which can be attached when an instance is started or while it is stopped.</p> 
<p>You will also need the following software components:</p> 
<p><strong>EFA Kernel Module</strong> – The <a href="https://github.com/amzn/amzn-drivers/tree/master/kernel/linux/efa">EFA Driver</a> is in the <a href="https://github.com/amzn">Amazon GitHub repo</a>; read <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa-start.html">Getting Started with EFA</a> to learn how to create an EFA-enabled AMI for Amazon Linux, Amazon Linux 2, and other popular Linux distributions.</p> 
<p><strong>Libfabric Network Stack</strong> – You will need to use an AWS-custom version for now; again, the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa-start.html">Getting Started</a> document contains installation information. We are working to get our changes into the next release (1.8) of <strong>libfabric</strong>.</p> 
<p><strong>MPI or NCCL Implementation</strong> – You can use <a href="https://www.open-mpi.org/">Open MPI</a> 3.1.3 (or later) or <a href="https://developer.nvidia.com/nccl">NCCL</a> (2.3.8 or later) plus the <a href="https://github.com/aws/aws-ofi-nccl">OFI driver for NCCL</a>. We also also working on support for the <a href="https://software.intel.com/en-us/mpi-library">Intel MPI</a> library.</p> 
<p>You can launch an instance and attach an EFA using the CLI, API, or the EC2 Console, with CloudFormation support coming in a couple of weeks. If you are using the CLI, you need to include the subnet ID and ask for an EFA, like this (be sure to include the appropriate security group):</p> 
<div class="hide-language"> 
 <pre class="unlimited-height-code"><code class="lang-bash">$ aws ec2 run-instances ... \
  --network-interfaces DeleteOnTermination=true,DeviceIndex=0,SubnetId=SUBNET,InterfaceType=efa</code></pre> 
</div> 
<p>After your instance has launched, run <code>lspci | grep efa0</code> to verify that the EFA device is attached. You can (but don’t have to) launch your instances in a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html#placement-groups-cluster">Cluster Placement Group</a> in order to benefit from physical adjacency when every <a href="https://en.wikipedia.org/wiki/Nanosecond">light-foot</a> counts. When used in this way, EFA can provide one-way MPI latency of 15.5 microseconds.</p> 
<p>You can also create a <a href="https://aws.amazon.com/blogs/aws/recent-ec2-goodies-launch-templates-and-spread-placement/">Launch Template</a> and use it to launch EC2 instances (either directly or as part of an EC2 Auto Scaling Group) in On-Demand or Spot Form, launch Spot Fleets, and to run compute jobs on AWS Batch.</p> 
<p><span style="text-decoration: underline"><strong>Learn More</strong></span><br /> To learn more about EFA, and to see some additional benchmarks, be sure to watch this re:Invent video (<a href="https://www.youtube.com/watch?v=MjzbY74WNeI">Scaling HPC Applications on EC2 w/ Elastic Fabric Adapter</a>):</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p> 
<p><a href="https://www.youtube.com/watch?v=MjzbY74WNeI"><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/efa_video_srd_1.png" width="650" height="366" /></a></p> 
<p>AWS Customer <a href="https://cfd.direct/">CFD Direct</a> maintains the popular <a href="https://openfoam.org/">OpenFOAM</a> platform for Computational Fluid Dynamics (CFD) and also produces <a href="https://cfd.direct/cloud/">CFD Direct From the Cloud</a> (CFDDFC), an <a href="https://aws.amazon.com/marketplace/pp/B017AHYO16/">AWS Marketplace offering</a> that makes it easy for you to run OpenFOAM on AWS. They have been testing and benchmarking EFA and recently shared their measurements in a blog post titled <a href="https://cfd.direct/cloud/openfoam-hpc-aws-efa/">OpenFOAM HPC with AWS EFA</a>. In the post, they report on a pair of simulations:</p> 
<p><strong>External Aerodynamics Around a Car</strong> – This simulation scales extra-linearly to over 200 cores, gradually declining to linear scaling at 1000 cores (about 100K simulation cells per core).</p> 
<p><strong>Flow Over a Weir with Hydraulic Jump</strong> – This simulation (1000 cores and 100M cells) scales at between 67% and 72.6%, depending on a “data write” setting.</p> 
<p>Read the <a href="https://cfd.direct/cloud/openfoam-hpc-aws-efa/">full post</a> to learn more and to see some graphs and visualizations.</p> 
<p><span style="text-decoration: underline"><strong>In the Works</strong></span><br /> We plan to add EFA support to additional EC2 instance types over time. In general, we plan to provide EFA support for the two largest sizes of “n” instances of any given type, and also for bare metal instances.</p> 
<p>— <a href="https://twitter.com/jeffbarr">Jeff</a>;</p> 
<p>&nbsp;</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=XhqviAEBHXQ:Xk1_T-Jp4lI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=XhqviAEBHXQ:Xk1_T-Jp4lI:dnMXMwOfBR0"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=dnMXMwOfBR0" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=XhqviAEBHXQ:Xk1_T-Jp4lI:7Q72WNTAKBA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=7Q72WNTAKBA" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/AmazonWebServicesBlog/~4/XhqviAEBHXQ" height="1" width="1" alt=""/>