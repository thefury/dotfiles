<p>Recently we announced the <a href="https://aws.amazon.com/blogs/developer/aws-sdk-for-ruby-modularization-version-3-2/">modularization of the AWS SDK for Ruby</a>. This blog post will focus on how to upgrade your application to use the new service specific gems.</p> 
<p>This blog post is divided up into sections based on how you currently depend on the AWS SDK for Ruby today. Find the section below that describes how you load the SDK today, and it will guide you in upgrading. <strong>Since version 3 is backwards compatible with version 2, you should not need to make additional changes beyond those described below.</strong></p> 
<h2 id="toc_1">Bunder: gem ‘aws-sdk’, ‘~&gt;2’</h2> 
<p>Congratulations! You are following recommended best practices for how to depend on the SDK today. The simplest path to upgrade is to change the version from 2 to 3.</p> 
<div> 
 <pre><code class="lang-ruby">#gem 'aws-sdk', '~&gt; 2'
gem 'aws-sdk', '~&gt; 3'</code></pre> 
</div> 
<p>See the section about using service specific gems below.</p> 
<h2>Bundler: gem ‘aws-sdk’ (without version)</h2> 
<p>It is not recommended to depend on the SDK without a major version constraint. Fortunately, version 3 is backwards compatible with version 2. Bundle updating your dependencies will work, but consider yourself lucky! You should add the version constraint to protect from future major version changes:</p> 
<div> 
 <pre><code class="lang-ruby">#gem 'aws-sdk'
gem 'aws-sdk', '~&gt; 3'</code></pre> 
</div> 
<p>See the section about using service specific gems below.</p> 
<h2 id="toc_3">Bundler: gem ‘aws-sdk-core’, ‘~&gt; 2’</h2> 
<p>The <tt>aws-sdk-core</tt> gem changes signification from version 2 to 3. In version 3, the core gem no longer defines any services. It will only contain shared utilities, such as credential providers, serializers, etc. <strong>To upgrade you must make two changes:</strong></p> 
<ul> 
 <li>Change your bundler dependency</li> 
 <li>Change your ruby require statements</li> 
</ul> 
<p>In bundler, replace <tt>aws-sdk-core</tt>, with <tt>aws-sdk</tt>:</p> 
<div> 
 <pre><code class="lang-ruby">#gem 'aws-sdk-core', '~&gt; 2'
gem 'aws-sdk', '~&gt; 3'</code></pre> 
</div> 
<p>In code, replace any require statements on <tt>aws-sdk-core</tt> with <tt>aws-sdk</tt>.</p> 
<div> 
 <pre><code class="lang-ruby">#require 'aws-sdk-core'
require 'aws-sdk'</code></pre> 
</div> 
<p>See the section about using service specific gems below.</p> 
<h2>Bundler: gem ‘aws-sdk-core’ (without version)</h2> 
<p>If you happen to bundle update before changing your Gemfile, your application will be broken. Version 3 of the <tt>aws-sdk-core</tt> gem no longer defines service modules and clients. It is a shared dependency of the 75+ service gems. <strong>To upgrade you must make two changes:</strong></p> 
<ul> 
 <li>Change your bundler dependency</li> 
 <li>Change your ruby require statements</li> 
</ul> 
<p>In bundler, replace <tt>aws-sdk-core</tt>, with <tt>aws-sdk</tt>:</p> 
<div> 
 <pre><code class="lang-ruby">#gem 'aws-sdk-core'
gem 'aws-sdk', '~&gt; 3'</code></pre> 
</div> 
<p>In code, replace any require statements on <tt>aws-sdk-core</tt> with <tt>aws-sdk</tt>.</p> 
<div> 
 <pre><code class="lang-ruby">#require 'aws-sdk-core'
require 'aws-sdk'</code></pre> 
</div> 
<p>See the section about using service specific gems below.</p> 
<h2>Bundler: gem ‘aws-sdk-resource’ (with or without version)</h2> 
<p>In version 3, the <tt>aws-sdk-resources</tt> gem has been removed. This gem will not receive any further updates. Each service gem contains both the client interface, and the resource interfaces. <strong>To upgrade you must make two changes:</strong></p> 
<ul> 
 <li>Change your bundler dependency</li> 
 <li>Change your ruby require statements</li> 
</ul> 
<div> 
 <pre><code class="lang-ruby">#gem 'aws-sdk-resources', '~&gt; 2'
gem 'aws-sdk', '~&gt; 3'</code></pre> 
</div> 
<p>In code, replace any require statements on <tt>aws-sdk-resources</tt> with <tt>aws-sdk</tt>.</p> 
<div> 
 <pre><code class="lang-ruby">#require 'aws-sdk-core'
require 'aws-sdk'</code></pre> 
</div> 
<p>See the section about using service specific gems below.</p> 
<h2>Using the Service Specific Gems</h2> 
<p>Each of the instructions above suggested using version 3 of the <tt>aws-sdk</tt> gem. This will work and is the shortest path to upgrading. It will however install 75+ service specific gems. You may choose to replace your dependency on the <tt>aws-sdk</tt> gem with service specific gems.</p> 
<p>If my application depends on Amazon DynamoDB and Amazon S3, I could make the following changes:</p> 
<p>In my Gemfile:</p> 
<div> 
 <pre><code class="lang-ruby">#gem 'aws-sdk', '~&gt; 3'
gem 'aws-sdk-dynamodb', '~&gt; 1'
gem 'aws-sdk-s3', '~&gt; 1'</code></pre> 
</div> 
<p>In my code:</p> 
<div> 
 <pre><code class="lang-ruby">#require 'aws-sdk'
require 'aws-sdk-s3'
require 'aws-sdk-dynamodb'</code></pre> 
</div> 
<p><strong>If you are a library maintainer, and you depend on the AWS SDK for Ruby, you should use service specific gems.</strong> Do no force your users to install every AWS service gem if you only depend on one.</p> 
<h2>Conclusion</h2> 
<p>Upgrading should be very simple. If you encounter any backwards incompatible changes, please open a <a href="https://github.com/aws/aws-sdk-ruby/issues">GitHub issue</a>. The modularized SDK will be in preview for a short period to hopefully catch these issues before going GA. You can also catch us in the <a href="https://gitter.im/aws/aws-sdk-ruby">gitter channel</a>.</p>