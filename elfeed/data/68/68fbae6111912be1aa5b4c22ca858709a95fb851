<p><a href="https://aws.amazon.com/codebuild/">AWS CodeBuild</a> now supports local caching, which makes it possible for you to persist intermediate build artifacts locally on the build host so that they are available for reuse in subsequent build runs.</p> 
<p>Your build project can use one of two types of caching: Amazon S3 or local. In this blog post, we will discuss how to use the local caching feature.</p> 
<p>Local caching stores a cache on a build host. The cache is available to that build host only for a limited time and until another build is complete. For example, when you are dealing with large Java projects, compilation might take a long time. You can speed up subsequent builds by using local caching. This is a good option for large intermediate build artifacts because the cache is immediately available on the build host.</p> 
<p>Local caching increases build performance for:</p> 
<ul> 
 <li>Projects with a large, monolithic source code repository.</li> 
 <li>Projects that generate and reuse many intermediate build artifacts.</li> 
 <li>Projects that build large Docker images.</li> 
 <li>Projects with many source dependencies.</li> 
</ul> 
<p><strong>To use local caching</strong></p> 
<p>1. Open AWS CodeBuild console at https://console.aws.amazon.com/codesuite/codebuild/home.</p> 
<p>2. Choose <strong>Create project</strong>.</p> 
<p>3. In <strong>Project configuration</strong>, enter a name and description for the build project.</p> 
<p>4. In <strong>Source</strong>, for <strong>Source provider</strong>, choose the source code provider type. In this example, we use an AWS CodeCommit repository name.</p> 
<p>5. For&nbsp;<strong>Environment</strong> image, choose<strong> Managed image </strong>or<strong> Custom image</strong>, as appropriate. For <strong>environment type</strong>, choose <strong>Linux</strong> or <strong>Windows Server</strong>. Specify a r<strong>untime, runtime version, and service role</strong> for your project.</p> 
<p>6. Configure the <strong>buildspec</strong> file for your project.</p> 
<p>7. In <strong>Artifacts</strong>, expand <strong>Additional Configuration</strong>. For <strong>Cache type</strong>, choose <strong>Local</strong>, as shown here.</p> 
<p><img class="alignnone wp-image-3013 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/20/Picture1-2.png" alt="" width="974" height="566" /></p> 
<p>Local caching supports the following caching modes:</p> 
<p><strong>Source cache</strong> <strong>mode</strong> caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only the change between commits. This mode is a good choice for projects with a clean working directory and a source that is a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise, or Bitbucket), the option is ignored. No changes are required in the buildspec file.</p> 
<p><strong>Docker layer cache</strong> <strong>mode</strong> caches existing Docker layers. This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues caused by pulling large Docker images down from the network.</p> 
<p><strong>Note</strong></p> 
<ul> 
 <li>You can use a Docker layer cache in the Linux environment only.</li> 
 <li>The privileged flag must be set so that your project has the required Docker permissions</li> 
 <li>You should consider the security implications before you use a Docker layer cache.</li> 
</ul> 
<p><strong>Custom cache mode</strong> caches directories you specify in the buildspec file. This mode is a good choice if your build scenario is not suited to one of the other two local cache modes. If you use a custom cache:</p> 
<ul> 
 <li>Only directories can be specified for caching. You cannot specify individual files.</li> 
 <li>Symlinks are used to reference cached directories.</li> 
 <li>Cached directories are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the same name. Directories are specified using cache paths in the buildspec file.</li> 
</ul> 
<p><strong>To use source cache mode</strong></p> 
<p>In the build project configuration, under <strong>Artifacts</strong>, expand <strong>Additional Configuration</strong>. For <strong>Cache</strong> <strong>type</strong>, choose <strong>Local</strong>. Select <strong>Source cache</strong>, as shown here.</p> 
<p><img class="alignnone wp-image-3012 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/20/Picture2.png" alt="" width="974" height="531" /></p> 
<p><strong>To use Docker layer cache mode</strong></p> 
<p>In the build project configuration, under <strong>Artifacts</strong>, expand <strong>Additional Configuration</strong>. For <strong>Cache type</strong>, choose <strong>Local</strong>. Select <strong>Docker layer cache</strong>, as shown here.</p> 
<p>Under <strong>Privileged</strong>, select <strong>Enable this flag if you want to build Docker images or want your builds to get elevated privileges</strong>. This grants elevated privileges to the Docker process running on the build host.</p> 
<p><img class="alignnone wp-image-3011 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/20/Picture3.png" alt="" width="841" height="479" /></p> 
<p><img class="alignnone wp-image-3010 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/20/Picture4.png" alt="" width="974" height="610" /></p> 
<p><strong>To use custom cache mode</strong></p> 
<p>In your buildspec file, specify the cache path, as shown here.</p> 
<p>In the build project configuration, under <strong>Artifacts</strong>, expand <strong>Additional Configuratio</strong>n. For <strong>Cache type</strong>, choose <strong>Local</strong>. Select <strong>Custom cache</strong>, as shown here.</p> 
<p><img class="alignnone wp-image-3009 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/20/Picture5.png" alt="" width="974" height="545" /></p> 
<pre><code class="lang-yaml">
version: 0.2
phases:
  pre_build:
    commands:
      - echo &quot;Enter pre_build commands&quot;
  build:
    commands:
      - echo &quot;Enter build commands&quot;
      
cache:
  paths:
    - '/root/.m2/**/*'
    - '/root/.npm/**/*'
    - 'build/**/*'</code><code class="lang-yaml">
</code></pre> 
<p><strong>Conclusion</strong></p> 
<p>We hope you find the information in this post helpful. If you have feedback, please leave it in the&nbsp;<strong>Comments</strong>&nbsp;section below. If you have questions, start a new thread on the <a href="https://forums.aws.amazon.com/forum.jspa?forumID=230">AWS CodeBuild forum</a> or contact&nbsp;<a href="https://console.aws.amazon.com/support/home?">AWS Support</a>.</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p>