<blockquote>
 <p><strong>Note:</strong> BYOK is helpful for certain use cases, but I recommend that you familiarize yourself with KMS best practices before you adopt this approach. You can review best practices in the <a href="https://d0.awsstatic.com/whitepapers/aws-kms-best-practices.pdf" rel="noopener noreferrer" target="_blank">AWS Key Management Services Best Practices</a> (.pdf) whitepaper.</p>
</blockquote> 
<blockquote>
 <p><strong>May 14, 2019</strong>: We’ve updated a sentence to clarify that this solution does not include instructions for creating an AWS CloudHSM cluster. For information about how to do this, please <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-cluster.html" rel="noopener noreferrer" target="_blank">refer to our documentation</a>. </p>
</blockquote> 
<hr /> 
<p>Back in 2016, <a href="https://aws.amazon.com/kms/" rel="noopener noreferrer" target="_blank">AWS Key Management Service</a> (AWS KMS) announced the <a href="https://aws.amazon.com/blogs/security/are-kms-custom-key-stores-right-for-you/" rel="noopener noreferrer" target="_blank">ability to bring your own keys (BYOK)</a> for use with KMS-integrated AWS services and custom applications. This feature allows you more control over the creation, lifecycle, and durability of your keys. You decide the hardware or software used to generate the customer-managed customer master keys (CMKs), you determine when or if the keys will expire, and you get to upload your keys only when you need them and delete them when you’re done. </p> 
<p>The documentation that walks you through how to import a key into AWS KMS provides an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-encrypt-key-material.html" rel="noopener noreferrer" target="_blank">example that uses OpenSSL to create your master key</a>. Some customers, however, don’t want to use OpenSSL. While it’s a valid method of creating the key material associated with a KMS CMK, security best practice is to perform key creation on a <a href="https://www.sans.org/reading-room/whitepapers/vpns/overview-hardware-security-modules-757" rel="noopener noreferrer" target="_blank">hardware security module</a> (HSM) or a hardened <a href="https://en.wikipedia.org/wiki/Key_management#Key_management_system" rel="noopener noreferrer" target="_blank">key management system</a>. </p> 
<p>However, using an on-premises HSM to create and back up your imported keys can become expensive. You have to plan for factors like the cost of the device itself, its storage in a datacenter, electricity, maintenance of the device, and network costs, all of which can add up. An on-premises HSM device could run upwards of $10K annually even if used sparingly, in addition to the cost of purchasing the device in the first place. Even if you’re only using the HSM for key creation and backup and don’t need it on an ongoing basis, you might still need to keep it running to avoid complex re-initialization processes. This is where <a href="https://aws.amazon.com/cloudhsm/" rel="noopener noreferrer" target="_blank">AWS CloudHSM</a> comes in. CloudHSM offers HSMs that are under your control, in your virtual private cloud (VPC). You can spin up an HSM device, create your key material, export it, import it into AWS KMS for use, and then terminate the HSM (since CloudHSM saves your HSM state using <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/backups.html" rel="noopener noreferrer" target="_blank">secure backups</a>). Because you’re only billed for the time your HSM instance is active, you can perform all of these steps for less than $15.00 a year! </p> 
<h2>Solution pricing </h2> 
<p>In this post, I’ll show you how to use an AWS CloudHSM cluster (which is a group that CloudHSM uses to keep all HSMs inside in sync with one another) with one HSM to create your key material. Only one HSM is needed, as you’ll use this HSM just for key generation and storage. Ongoing crypto operations that use the key will all be performed by KMS. AWS CloudHSM comes with an <a href="https://aws.amazon.com/cloudhsm/pricing/" rel="noopener noreferrer" target="_blank">hourly fee</a> that changes based on your region of choice; be sure to check the pricing page for updates prior to use. AWS KMS has a <a href="https://aws.amazon.com/kms/pricing/" rel="noopener noreferrer" target="_blank">$1.00/month charge</a> for all customer-managed CMKs, including those that you import yourself. In the following chart, I’ve calculated annual costs for some regions. These assume that you want to rotate your imported key annually and that you perform this operation once per year by running a single CloudHSM for one hour. I’ve included 12 monthly installments of $1.00/mo for your CMK. Depending on the speed of your application, additional costs may apply for KMS usage, which can be found on the <a href="https://aws.amazon.com/kms/pricing/" rel="noopener noreferrer" target="_blank">AWS KMS pricing page</a>.</p> 
<table style="margin-left: 45px" border="1" width="0"> 
 <tbody> 
  <tr> 
   <td style="padding-left: 10px" width="233"><strong>REGION</strong></td> 
   <td style="padding-left: 10px" width="301"><strong>CLOUDHSM PRICING STRUCTURE</strong></td> 
   <td style="padding-left: 10px" width="233"><strong>KMS PRICING STRUCTURE</strong></td> 
   <td style="padding-left: 10px" width="301"><strong>ANNUAL TOTAL COST</strong></td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">US-EAST-1</td> 
   <td style="padding-left: 10px" width="301">$1.60/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.60/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">US-WEST-2</td> 
   <td style="padding-left: 10px" width="301">$1.45/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.45/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">EU-WEST-1</td> 
   <td style="padding-left: 10px" width="301">$1.47/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.47/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">US-GOV-EAST-1</td> 
   <td style="padding-left: 10px" width="301">$2.08/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$14.08/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">AP-SOUTHEAST-1</td> 
   <td style="padding-left: 10px" width="301">$1.86/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.86/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">EU-CENTRAL-1</td> 
   <td style="padding-left: 10px" width="301">$1.92/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.92/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">EU-NORTH-1</td> 
   <td style="padding-left: 10px" width="301">$1.40/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.40/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">AP-SOUTHEAST-2</td> 
   <td style="padding-left: 10px" width="301">$1.99/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.99/YR</td> 
  </tr> 
  <tr style="padding-left: 10px"> 
   <td style="padding-left: 10px" width="233">AP-NORTHEAST-1</td> 
   <td style="padding-left: 10px" width="301">$1.81/HR</td> 
   <td style="padding-left: 10px" width="233">$1/MO</td> 
   <td style="padding-left: 10px" width="301">$13.81/YR</td> 
  </tr> 
 </tbody> 
</table> 
<h2>Solution overview</h2> 
<p>I’ll walk you through the process of creating a CMK in AWS KMS with no key material associated and then downloading the public key and import token that you’ll need in order to import the key material later on. I’ll also show you how to create, securely wrap, and export your symmetric key from AWS CloudHSM. Finally, I’ll show you how to import your key material into AWS KMS and then terminate your HSM to save on cost. The following diagram illustrates the steps covered in this post.<br /> &nbsp;<br /> </p>
<div id="attachment_10529" style="width: 760px" class="wp-caption aligncenter">
 <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/05/01/fig-1-CloudHSM_BYOK_KMS.png" alt="Figure 1: The process of creating a CMK in AWS KMS" width="750" height="703" class="size-full wp-image-10529" />
 <p class="wp-caption-text">Figure 1: The process of creating a CMK in AWS KMS</p>
</div>
<p></p> 
<ol> 
 <li>Create a customer master key (CMK) in AWS KMS that has no key material associated.</li> 
 <li>Download the import wrapping key and import token from KMS.</li> 
 <li>Import the wrapping key provided by KMS into the HSM. </li> 
 <li>Create a 256 bit symmetric key on AWS CloudHSM.</li> 
 <li>Use the imported wrapping key to wrap the symmetric key.</li> 
 <li>Import the symmetric key into AWS KMS using the import token from step 2.</li> 
 <li>Terminate your HSM, which triggers a backup. Delete or leave your cluster, depending on your needs. </li> 
</ol> 
<h2 id="prereq">Prerequisites</h2> 
<p>In this walkthrough, I assume that you already have an AWS CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html" rel="noopener noreferrer" target="_blank">cluster set up and initialized with at least one HSM device</a>, and an <a href="https://aws.amazon.com/ec2/" rel="noopener noreferrer" target="_blank">Amazon Elastic Compute Cloud</a> (EC2) instance running Amazon Linux OS with the <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/install-and-configure-client-linux.html" rel="noopener noreferrer" target="_blank">AWS CloudHSM client</a> installed. You must have a <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/manage-hsm-users.html#create-user" rel="noopener noreferrer" target="_blank">crypto user</a> (CU) on the HSM to perform the key creation and export functions. You’ll also need an <a href="https://aws.amazon.com/iam/" rel="noopener noreferrer" target="_blank">IAM user or role</a> with permissions to both AWS KMS and AWS CloudHSM, and with credentials configured in your <a href="https://aws.amazon.com/cli/" rel="noopener noreferrer" target="_blank">AWS Command Line Interface</a> (AWS CLI). Make sure to store your CU information and IAM credentials (if a user is created for this activity) in a safe location. You can use <a href="https://aws.amazon.com/secrets-manager/" rel="noopener noreferrer" target="_blank">AWS Secrets Manager</a> for secure storage.</p> 
<h2>Deploying the solution</h2> 
<p>For my demonstration, I’ll be using the AWS CLI. However, if you prefer working with a graphical user interface, step #1 and the important portion of step #3 can be done in the <a href="https://console.aws.amazon.com/kms/home" rel="noopener noreferrer" target="_blank">AWS KMS Console</a>. All other steps are via AWS CLI only. </p> 
<h3>Step 1: Create the CMK with no key material associated</h3> 
<p>Begin by <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html" rel="noopener noreferrer" target="_blank">creating a customer master key (CMK) in AWS KMS that has no key material associated</a>. The CLI command to create the CMK is as follows:</p> 
<p><span style="font-family: courier">$ aws kms create-key --origin EXTERNAL --region us-east-1</span></p> 
<p>If successful, you’ll see an output on the CLI similar to below. The <span style="font-family: courier">KeyState</span> will be <span style="font-family: courier">PendingImport</span> and the <span style="font-family: courier">Origin</span> will be <span style="font-family: courier">EXTERNAL</span>.</p> 
<div class="hide-language"> 
 <pre><code class="lang-text">
{
    &quot;KeyMetadata&quot;: {
        &quot;AWSAccountId&quot;: &quot;111122223333&quot;,
        &quot;KeyId&quot;: &quot;1234abcd-12ab-34cd-56ef-1234567890ab&quot;,
        &quot;Arn&quot;: &quot;arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab&quot;,
        &quot;CreationDate&quot;: 1551119868.343,
        &quot;Enabled&quot;: false,
        &quot;Description&quot;: &quot;&quot;,
        &quot;KeyUsage&quot;: &quot;ENCRYPT_DECRYPT&quot;,
        &quot;KeyState&quot;: &quot;PendingImport&quot;,
        &quot;Origin&quot;: &quot;EXTERNAL&quot;,
        &quot;KeyManager&quot;: &quot;CUSTOMER&quot;
    }
}
</code></pre> 
</div> 
<h3>Step 2: Download the public key and import token</h3> 
<p>With the CMK ID created, you now need to <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-get-public-key-and-token.html" rel="noopener noreferrer" target="_blank">download the import wrapping key and the import token</a>. Wrapping is a method of encrypting the key so that it doesn’t pass in plaintext over the network. You need both the wrapping key and the import token in order to import a key into AWS KMS. You’ll use the public key to encrypt your key material, which ensures that your key is not exposed as it’s imported. When AWS KMS receives the encrypted key material, it will use the corresponding private component of the import wrapping key to decrypt it. The public and private key pair used for this action will always be a 2048-bit RSA key that is unique to each import operation. The import token contains metadata to ensure the key material is imported to the correct CMK ID. Both the import token and import wrapping key are on a time limit, so if you don’t import your key material within 24 hours of downloading them, the import wrapping key and import token will expire and you’ll need to download a new set from KMS. </p> 
<ol> 
 <li>(OPTIONAL) In my example command, I’ll use the wrapping algorithm <span style="font-family: courier">RSAES_OAEP_SHA_256</span> to encrypt and securely import my key into AWS KMS. If you’d like to choose a different algorithm, you may use any of the following: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-get-public-key-and-token.html" rel="noopener noreferrer" target="_blank"><span style="font-family: courier">RSAES_OAEP_SHA_256, RSAES_OAEP_SHA_1, or RSAES_PKCS1_V1_5</span></a>.</li> 
 <li>In the command below, replace the example key ID (shown in red) with the key ID you received in step 1. If you’d like, you can also modify the wrapping algorithm. Then run the command. <p> <span style="font-family: courier">$ aws kms get-parameters-for-import --key-id <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;1234abcd-12ab-34cd-56ef-1234567890ab&gt;</i></span></span> --wrapping-algorithm <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;RSAES_OAEP_SHA_256&gt;</i></span></span> --wrapping-key-spec RSA_2048 --region us-east-1</span> </p> <p> If the command is successful, you’ll see an output similar to what’s below. Your output will contain the import token and import wrapping key. Copy this output to a safe location, as you’ll need it in the next step. Keep in mind, these items will expire after 24 hours.</p> 
  <div class="hide-language"> 
   <pre><code class="lang-text">
    {
        &quot;KeyId&quot;: &quot;arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab &quot;,
        &quot;ImportToken&quot;: &quot;AQECAHjS7Vj0eN0qmSLqs8TfNtCGdw7OfGBfw+S8plTtCvzJBwAABrMwggavBgkqhkiG9w0BBwagggagMIIGnAIBADCCBpUGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMpK6U0uSCNsavw0OJAgEQgIIGZqZCSrJCf68dvMeP7Ah+AfPEgtKielFq9zG4aXAIm6Fx+AkH47Q8EDZgf16L16S6+BKc1xUOJZOd79g5UdETnWF6WPwAw4woDAqq1mYKSRtZpzkz9daiXsOXkqTlka5owac/r2iA2giqBFuIXfr2RPDB6lReyrhAQBYTwefTHnVqosKVGsv7/xxmuorn2iBwMfyqoj2gmykmoxrmWmCdK+jRdWKBHtriwplBTEHpUTdHmQnQzGVThfr611XFCQDZ+uk/wpVFY4jZ/Z/…&quot;
        &quot;PublicKey&quot;: &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4KCiW36zofngmyVTOpMuFfHAXLWTfl2BAvaeq5puewoMt1zPwBP23qKdG10L7ChTVt4H9PCs1vzAWm2jGeWk5fO…&quot;,
        &quot;ParametersValidTo&quot;: 1551207484.208
    }
    </code></pre> 
   <p></p>
  </div> </li> 
 <li>Because the output of the command is <a href="https://en.wikipedia.org/wiki/Base64" rel="noopener noreferrer" target="_blank">base64</a> encoded, you must base64 decode both components into binary data before use. To do this, use your favorite text editor to save the output into two separate files. Name one <span style="font-family: courier">ImportToken.b64</span>—it will have the output of the “ImportToken” section from above. Name the other <span style="font-family: courier">PublicKey.b64</span>—it will have the output of the “PublicKey” section from above. You will find example commands to save both below. 
  <div class="hide-language"> 
   <pre><code class="lang-text">
    echo 'AQECAHjS7Vj0eN0qmSLqs8TfNtCGdw7OfGBfw+S8plTtCvzJBwAABrMwggavBgkqhkiG9w0BBwagggagMIIGnAIBADCCBpUGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMpK6U0uSCNsavw0OJAgEQgIIGZqZCSrJCf68dvMeP7Ah+AfPEgtKielFq9zG4aXAIm6Fx+AkH47Q8EDZgf16L16S6+BKc1xUOJZOd79g5UdETnWF6WPwAw4woDAqq1mYKSRtZpzkz9daiXsOXkqTlka5owac/r2iA2giqBFuIXfr2RPDB6lReyrhAQBYTwefTHnVqosKVGsv7/xxmuorn2iBwMfyqoj2gmykmoxrmWmCdK+jRdWKBHtriwplBTEHpUTdHmQnQzGVThfr611XFCQDZ+uk/wpVFY4jZ/Z' &gt; /ImportToken.b64

    echo 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4KCiW36zofngmyVTOpMuFfHAXLWTfl2BAvaeq5puewoMt1zPwBP23qKdG10L7ChTVt4H9PCs1vzAWm2jGeWk5fO' &gt; /PublicKey.b64 
    </code></pre> 
   <p></p>
  </div> </li> 
 <li>On both saved files, you must then run the following commands, which will base64 decode them and save them in their binary form: 
  <div class="hide-language"> 
   <pre><code class="lang-text">
    $ openssl enc -d -base64 -A -in PublicKey.b64 -out PublicKey.bin

    $ openssl enc -d -base64 -A -in ImportToken.b64 -out ImportToken.bin
    </code></pre> 
   <p></p>
  </div> </li> 
</ol> 
<h3>Step 3: Import the import wrapping key provided by AWS KMS into your HSM</h3> 
<p>Now that you’ve created the CMK ID and prepared for the key material import, you’re going to move to AWS CloudHSM to create and export your symmetric encryption key. You’re going to <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/key_mgmt_util-importPubKey.html" rel="noopener noreferrer" target="_blank">import the import wrapping key provided by AWS KMS into your HSM</a>. Before completing this step, be sure you’ve set up the <a href="#prereq">prerequisites</a> I listed at the start of this post. </p> 
<ol> 
 <li>Log into your EC2 instance with the AWS CloudHSM client package installed, and launch the <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/key_mgmt_util.html" rel="noopener noreferrer" target="_blank">Key Management Utility</a>. You will launch the utility using the command below: <p> <span style="font-family: courier">$ /opt/cloudhsm/bin/key_mgmt_util</span> </p></li> 
 <li>After launching the key_mgmt_util, you’ll need to log in as the CU user. Do so with the command below, being sure to replace <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;ExampleUser&gt;</i></span></span> and <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;Password123&gt;</i></span></span> for your own CU user and password. <p> <span style="font-family: courier">Command: loginHSM -u CU -p <span style="color: #ff0000"><i>&lt;Password123&gt;</i></span> -s <span style="color: #ff0000"><i>&lt;ExampleUser&gt;</i></span></span> </p> <p> You should see an output similar to the example below, letting you know that you’ve logged in correctly: </p> 
  <div class="hide-language"> 
   <pre><code class="lang-text">    
    Cfm3LoginHSM returned: 0x00 : HSM Return: SUCCESS
    Cluster Error Status
    Node id 1 and err state 0x00000000 : HSM Return: SUCCESS
    </code></pre> 
   <p></p>
  </div> <p> Next, you’ll import the import wrapping key provided by KMS into the HSM, so that you can use it to wrap the symmetric key you’re going to create. </p></li> 
 <li>Open the file <span style="font-family: courier">PublicKey.b64</span> in your favorite text editor and add the line <span style="font-family: courier">-----BEGIN PUBLIC KEY-----</span> at the very top of the file and the line <span style="font-family: courier">-----END PUBLIC KEY------</span> at the very end. (An example of how this should look is below.) Save this new file as <span style="font-family: courier">PublicKey.pem</span>. 
  <div class="hide-language"> 
   <pre><code class="lang-text">   
    -----BEGIN PUBLIC KEY-----
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0UnLXHbP/jC/QykQQUroaB0xQYYVaZge//NrmIdYtYvaw32fcEUYjTHovWkYkmifUFVYkNaWKNRGuICo1oAY5cgowgxYcsBXZ4Pk2h3v43tIsxG63ZDLKDFju/dtGaa8+CwR8mR…
    -----END PUBLIC KEY-----
    </code></pre> 
   <p></p>
  </div> </li> 
 <li>Use the <span style="font-family: courier">importPubKey</span> command from the <span style="font-family: courier">key_mgmt_util</span> to import the key file. An example of the command is below. For the <span style="font-family: courier">-l</span> flag (label), I’ve named my example <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;wrapping-key&gt;</i></span></span> so that I’ll know what it’s for. You can name yours whatever you choose. Also, remember to replace <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;PublicKey.pem&gt;</i></span></span> with the actual filename of your public key. <p> <span style="font-family: courier">Command: importPubKey -l <span style="color: #ff0000"><i>&lt;wrapping-key&gt;</i></span> -f <span style="color: #ff0000"><i>&lt;PublicKey.pem&gt;</i></span></span></p> <p> If successful, your output should look similar to the following example. Make note of the key handle, as this is the identifying ID for your wrapping key:</p> 
  <div class="hide-language"> 
   <pre><code class="lang-text">      
    Cfm3CreatePublicKey returned: 0x00 : HSM Return: SUCCESS

    Public Key Handle: 30 
    
    Cluster Error Status
    Node id 2 and err state 0x00000000 : HSM Return: SUCCESS
    </code></pre> 
   <p></p>
  </div> </li> 
</ol> 
<h3>Step 4: Create a symmetric key on AWS CloudHSM</h3> 
<p>Next, you’ll <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/key_mgmt_util-genSymKey.html" rel="noopener noreferrer" target="_blank">create a symmetric key</a> that you want to export from CloudHSM, so that you can import it into AWS KMS. </p> 
<p>The first parameter you’ll use for this action is <span style="font-family: courier">-t</span> with the value 31. This is the key-type flag and 31 equals an AES key. KMS only accepts the AES key type. The second is <span style="font-family: courier">-s</span> with a value of 32. This is the key-size flag, and 32 equals a 32-byte key (256 bits). The last flag is the <span style="font-family: courier">-l</span> flag with the value BYOK_Key. This flag is simply a label to name your key, so you may alter this value however you wish. </p> 
<p>Here’s what my example looks like:</p> 
<p><span style="font-family: courier">Command: genSymKey -t 31 -s 32 -l BYOK-KMS</span></p> 
<p>If successful, your output should look similar to what’s below. Make note of the key handle, as this will be the identifying ID of the key you wish to import into AWS KMS.</p> 
<div class="hide-language"> 
 <pre><code class="lang-text">  
Cfm3LoginHSM returned: 0x00 : HSM Return: SUCCESS

Symmetric Key Created. Key Handle: 20

Cluster Error Status
Node id 1 and err state 0x00000000 : HSM Return: SUCCESS
</code></pre> 
</div> 
<h3>Step 5: Use the imported import wrapping key to wrap the symmetric key</h3> 
<p>Now that you’ve imported the import wrapping key into your HSM in the <span style="font-family: courier">PublicKey.pem</span> file, I’ll show you how to use the <span style="font-family: courier">PublicKey.pem</span> file and the <span style="font-family: courier">key_mgmt_util</span> to <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/key_mgmt_util-wrapKey.html" rel="noopener noreferrer" target="_blank">wrap your symmetric key</a> out of the HSM. </p> 
<p>An example of the command is below. Here’s how to customize the parameters:</p> 
<ul> 
 <li><span style="font-family: courier">-k</span> refers to the key handle of your symmetric key. Replace the variable that follows <span style="font-family: courier">-k</span> with your own key handle ID from step 4.</li> 
 <li><span style="font-family: courier">-w</span> refers to the key handle of your wrapping key. Replace the variable with your own ID from step 3.4</li> 
 <li><span style="font-family: courier">-out</span> refers to the file name of your exported key. Replace the variable with a file name of your choice. </li> 
 <li><span style="font-family: courier">-m</span> refers to the wrapping-mechanism. In my example, I’ve used RSA-OAEP, which has a value of 8.</li> 
 <li><span style="font-family: courier">-t</span> refers to the hash-type. In my example, I’ve used SHA256, which has a value of 3. </li> 
 <li><span style="font-family: courier">-noheader</span> refers to the -noheader flag. This omits the header that specifies CloudHSM-specific key attributes.</li> 
</ul> 
<p><span style="font-family: courier">Command: wrapKey -k <span style="color: #ff0000"><i>&lt;20&gt;</i></span> -w <span style="color: #ff0000"><i>&lt;30&gt;</i></span> -out <span style="color: #ff0000"><i>&lt;KMS-BYOK-March2019.bin&gt;</i></span> -m 8 -t 3 -noheader</span></p> 
<p>If successful, you should see an output similar to what’s below:</p> 
<div class="hide-language"> 
 <pre><code class="lang-text"> 
Cfm2WrapKey5 returned: 0x00 : HSM Return: SUCCESS

	Key Wrapped.

	Wrapped Key written to file &quot;KMS-BYOK-March2019.bin length 256

	Cfm2WrapKey returned: 0x00 : HSM Return: SUCCESS
</code></pre> 
</div> 
<p>With that, you’ve completed the AWS CloudHSM steps. You now have a symmetric key, securely wrapped for transport into AWS KMS. You can log out of the Key Management Utility by entering the word <span style="font-family: courier">exit</span>. </p> 
<h3>Step 6: Import the wrapped symmetric key into AWS KMS using the key import function</h3> 
<p>You’re ready to <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-import-key-material.html" rel="noopener noreferrer" target="_blank">import the wrapped symmetric key into AWS KMS using the key import function</a>. Make the following updates to the sample command that I provide below:</p> 
<ul> 
 <li>Replace the <span style="font-family: courier">key-id</span> value and file names with your own. </li> 
 <li>Leave the expiration model parameter blank, or choose from<br /> <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_ImportKeyMaterial.html" rel="noopener noreferrer" target="_blank"><span style="font-family: courier">KEY_MATERIAL_EXPIRES or KEY_MATERIAL_DOES_NOT_EXPIRE</span></a>. If you leave the parameter blank, it will default to <span style="font-family: courier">KEY_MATERIAL_EXPIRES</span>. This expiration model requires you to set the <span style="font-family: courier">--valid-to</span> parameter, which can be any time of your choosing so long as it follows the format in the example. If you choose <span style="font-family: courier">KEY_MATERIAL_DOES_NOT_EXPIRE</span>, you may leave the <span style="font-family: courier">--valid-to</span> option out of the command. To enforce an expiration and rotation of your key material, best practice is to use the <span style="font-family: courier">KEY_MATERIAL_EXPIRES</span> option and a date of 1-2 years. </li> 
</ul> 
<p>Here’s my sample command:</p> 
<p><span style="font-family: courier">$ aws kms import-key-material --key-id <span style="color: #ff0000"><i>&lt;1234abcd-12ab-34cd-56ef-1234567890ab&gt;</i></span> --encrypted-key-material fileb://<span style="color: #ff0000"><i>&lt;KMS-BYOK-March2019.bin&gt;</i></span> --import-token fileb://<span style="color: #ff0000"><i>&lt;ImportToken.bin&gt;</i></span> --expiration-model KEY_MATERIAL_EXPIRES --valid-to 2020-03-01T12:00:00-08:00 --region us-east-1</span></p> 
<p>You can test that the import was successful by using the key ID to encrypt a small (under 4KB) file. An example command is below:</p> 
<p><span style="font-family: courier">$ aws kms encrypt --key-id 1234abcd-12ab-34cd-56ef-1234567890ab --plaintext file://test.txt --region us-east-1</span></p> 
<p>A successful call will output something similar to below:</p> 
<div class="hide-language"> 
 <pre><code class="lang-text"> 
{
    &quot;KeyId&quot;: &quot;arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab &quot;, 
    &quot;CiphertextBlob&quot;: &quot;AQICAHi4Pj/Jhk6aHMZNegOpYFnnuiEKAtjRWwD33TdDnKNY5gHbUVdrwptz…&quot;
}
</code></pre> 
</div> 
<h3>Step 7: Terminate your HSM (which triggers a backup)</h3> 
<p>The last step in the process is to <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/add-remove-hsm.html#remove-hsm" rel="noopener noreferrer" target="_blank">Terminate your HSM</a> (which triggers a backup). Since you’ve imported the key material into AWS KMS, you no longer need to run the HSM. Terminating the HSM will automatically trigger a backup, which will take an exact copy of the key material and the users on your HSM and store it, encrypted, in an <a href="https://aws.amazon.com/s3/" rel="noopener noreferrer" target="_blank">Amazon Simple Storage Service</a> (Amazon S3) bucket. If you need to re-import your key into KMS or if your company’s security policy requires an annual rotation of your KMS master key(s), when the time comes, you can spin up an HSM from your CloudHSM backup and be back to where you started. You can re-import your existing key material or create key materials for your new CMK, either way, you’ll need to request a fresh import wrapping key and import token from KMS.</p> 
<p>Deleting an HSM can be done with the command below. Replace <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;cluster-example&gt;</i></span></span> with your actual cluster ID and <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;hsm-example&gt;</i></span></span> with your HSM ID:</p> 
<p><span style="font-family: courier">$ aws cloudhsmv2 delete-hsm --cluster-id <span style="color: #ff0000"><i>&lt;cluster-example&gt;</i></span> --hsm-id <span style="color: #ff0000"><i>&lt;hsm-example&gt;</i></span> --region us-east-1</span></p> 
<p>Following these steps, you will have successfully defined a KMS CMK, created your own key material on a CloudHSM device, and then imported it into AWS KMS for use. Dependent upon region, all of this can be done for less than $15.00 a year. </p> 
<h2>Summary</h2> 
<p>In this post, I walked you through creating a CMK ID without encryption key material associated, creating and then exporting a symmetric key from AWS CloudHSM, and then importing it into AWS KMS for use with KMS-integrated AWS services. This process allows you to maintain ownership and management over your master keys, create them on FIPS 140-2 Level 3 validated hardware, and maintain a copy for disaster recovery scenarios. This saves not only the time and personnel required to maintain your own HSMs on-premises, but the cost of hardware, electricity, and housing of the device. </p> 
<p>If you have feedback about this blog post, submit comments in the Comments section below. If you have questions about this blog post, start a new thread on the <a href="https://forums.aws.amazon.com/forum.jspa?forumID=156" rel="noopener noreferrer" target="_blank">AWS CloudHSM</a> or <a href="https://forums.aws.amazon.com/forum.jspa?forumID=182" rel="noopener noreferrer" target="_blank">AWS KMS</a> forums. </p> 
<p><strong>Want more AWS Security news? Follow us on <a href="https://twitter.com/AWSsecurityinfo" title="Twitter" target="_blank" rel="noopener noreferrer">Twitter</a>.</strong></p> 
<footer> 
 <div class="blog-author-box"> 
  <div class="blog-author-image"> 
   <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/28/tracyp-bio-photo.jpg" alt="Author" width="119" height="160" class="aligncenter size-full wp-image-8732" /> 
  </div> 
  <h3 class="lb-h4">Tracy Pierce</h3> 
  <p>Tracy Pierce is a Senior Consultant, Security Specialty, for Remote Consulting Services. She enjoys the peculiar culture of Amazon and uses that to ensure every day is exciting for her fellow engineers and customers alike. Customer Obsession is her highest priority and she shows this by improving processes, documentation, and building tutorials. She has her AS in Computer Security &amp; Forensics from SCTD, SSCP certification, AWS Developer Associate certification, and AWS Security Specialist certification. Outside of work, she enjoys time with friends, her Great Dane, and three cats. She keeps work interesting by drawing cartoon characters on the walls at request. </p> 
  <p></p>
 </div> 
</footer>