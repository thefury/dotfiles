<p>In a <a href="https://aws.amazon.com/blogs/security/how-to-centralize-dns-management-in-a-multi-account-environment/" rel="noopener noreferrer" target="_blank">previous post</a>, I showed you a solution to implement central DNS in a multi-account environment that simplified DNS management by reducing the number of servers and forwarders you needed when implementing cross-account and AWS-to-on-premises domain resolution. With the release of the <a href="https://aws.amazon.com/about-aws/whats-new/2018/11/amazon-route-53-announces-resolver-with-support-for-dns-resolution-over-direct-connect-and-vpn/" rel="noopener noreferrer" target="_blank">Amazon Route 53 Resolver</a> service, you now have access to a native conditional forwarder that will simplify hybrid DNS resolution even more. </p> 
<p>In this post, I’ll show you a modernized solution to centralize DNS management in a multi-account environment by using Route 53 Resolver. This solution allows you to resolve domains across multiple accounts and between workloads running on AWS and on-premises without the need to run a domain controller in AWS.</p> 
<h2>Solution overview</h2> 
<p>My solution will show you how to solve three primary use-cases for domain resolution:</p> 
<ul> 
 <li>Resolving on-premises domains from workloads running in your VPCs.</li> 
 <li>Resolving private domains in your AWS environment from workloads running on-premises. </li> 
 <li>Resolving private domains between workloads running in different AWS accounts.</li> 
</ul> 
<p>The following diagram explains the high-level full architecture.<br /> &nbsp;<br /> </p>
<div id="attachment_10666" style="width: 810px" class="wp-caption aligncenter">
 <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/05/22/Fig01.jpeg" alt="Figure 1: Solution architecture diagram" width="800" height="590" class="size-full wp-image-10666" />
 <p class="wp-caption-text">Figure 1: Solution architecture diagram</p>
</div>
<p></p> 
<p>In this architecture: </p> 
<ol> 
 <li>This is the Amazon-provided default DNS server for the central DNS VPC, which we’ll refer to as the DNS-VPC. This is the second IP address in the VPC CIDR range (as illustrated, this is 172.27.0.2). This default DNS server will be the primary domain resolver for all workloads running in participating AWS accounts. </li> 
 <li>This shows the <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-getting-started.html" rel="noopener noreferrer" target="_blank">Route 53 Resolver endpoints</a>. The inbound endpoint will receive queries forwarded from on-premises DNS servers and from workloads running in participating AWS accounts. The outbound endpoint will be used to forward domain queries from AWS to on-premises DNS. </li> 
 <li>This shows conditional forwarding rules. For this architecture, we need two rules, one to forward domain queries for <span style="font-family: courier">onprem.private</span> zone to the on-premises DNS server through the outbound gateway, and a second rule to forward domain queries for <span style="font-family: courier">awscloud.private</span> to the resolver inbound endpoint in DNS-VPC. </li> 
 <li>This indicates that these two forwarding rules are shared with all other AWS accounts through <a href="https://docs.aws.amazon.com/ram/latest/userguide/what-is.html" rel="noopener noreferrer" target="_blank">AWS Resource Access Manager</a> and are associated with all VPCs in these accounts. </li> 
 <li>This shows the private hosted zone created in each account with a unique subdomain of <span style="font-family: courier">awscloud.private</span>. </li> 
 <li>This shows the on-premises DNS server with conditional forwarders configured to forward queries to the <span style="font-family: courier">awscloud.private</span> zone to the IP addresses of the Resolver inbound endpoint.</li> 
</ol> 
<blockquote>
 <p><strong>Note:</strong> This solution doesn’t require VPC-peering or connectivity between the source/destination VPCs and the DNS-VPC.</p>
</blockquote> 
<h2>How it works </h2> 
<p>Now, I’m going to show how the domain resolution flow of this architecture works according to the three use-cases I’m focusing on.</p> 
<h3>First use case</h3> 
<p>&nbsp;<br /> </p>
<div id="attachment_10667" style="width: 810px" class="wp-caption aligncenter">
 <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/05/22/Fig2.jpeg" alt=" Figure 2:  Use case for resolving on-premises domains from workloads running in AWS" width="800" height="605" class="size-full wp-image-10667" />
 <p class="wp-caption-text">Figure 2: Use case for resolving on-premises domains from workloads running in AWS</p>
</div>
<p></p> 
<p>First, I’ll look at resolving on-premises domains from workloads running in AWS. If the server with private domain <span style="font-family: courier">host1.acc1.awscloud.private</span> attempts to resolve the address <span style="font-family: courier">host1.onprem.private</span>, here’s what happens:</p> 
<ol> 
 <li>The DNS query will route to the default DNS server of the VPC that hosts <span style="font-family: courier">host1.acc1.awscloud.private</span> </li> 
 <li>Because the VPC is associated with the forwarding rules shared from the central DNS account, these rules will be evaluated by the default Amazon-provided DNS in the VPC.</li> 
 <li>In this example, one of the rules indicates that queries for <span style="font-family: courier">onprem.private</span> should be forwarded to an on-premises DNS server. Following this rule, the query will be forwarded to an on-premises DNS server.</li> 
 <li>The forwarding rule is associated with the Resolver outbound endpoint, so the query will be forwarded through this endpoint to an on-premises DNS server.</li> 
</ol> 
<p>In this flow, the DNS query that was initiated in one of the participating accounts has been forwarded to the centralized DNS server which, in turn, forwarded this to the on-premises DNS.</p> 
<h3>Second use case</h3> 
<p>Next, here’s how on-premises workloads will be able to resolve private domains in your AWS environment:<br /> &nbsp;<br /> </p>
<div id="attachment_10668" style="width: 810px" class="wp-caption aligncenter">
 <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/05/22/Fig3.jpeg" alt="Figure 3: Use case for how on-premises workloads will be able to resolve private domains in your AWS environment" width="800" height="598" class="size-full wp-image-10668" />
 <p class="wp-caption-text">Figure 3: Use case for how on-premises workloads will be able to resolve private domains in your AWS environment</p>
</div>
<p></p> 
<p>In this case, the query for <span style="font-family: courier">host1.acc1.awscloud.private</span> is initiated from an on-premises host. Here’s what happens next:</p> 
<ol> 
 <li>The domain query is forwarded to on-premises DNS server.</li> 
 <li>The query is then forwarded to the Resolver inbound endpoint via a conditional forwarder rule on the on-premises DNS server.</li> 
 <li>The query reaches the default DNS server for DNS-VPC.</li> 
 <li>Because DNS-VPC is associated with the private hosted zone <span style="font-family: courier">acc1.awscloud.private</span>, the default DNS server will be able to resolve this domain.</li> 
</ol> 
<p>In this case, the DNS query has been initiated on-premises and forwarded to centralized DNS on the AWS side through the inbound endpoint.</p> 
<h3>Third use case</h3> 
<p>Finally, you might need to resolve domains across multiple AWS accounts. Here’s how you could achieve this:<br /> &nbsp;<br /> </p>
<div id="attachment_10669" style="width: 810px" class="wp-caption aligncenter">
 <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/05/22/Fig4.jpeg" alt="Figure 4: Use case for how to resolve domains across multiple AWS accounts" width="800" height="614" class="size-full wp-image-10669" />
 <p class="wp-caption-text">Figure 4: Use case for how to resolve domains across multiple AWS accounts</p>
</div>
<p></p> 
<p>Let’s say that host1 in <span style="font-family: courier">host1.acc1.awscloud.private</span> attempts to resolve the domain <span style="font-family: courier">host2.acc2.awscloud.private</span>. Here’s what happens:</p> 
<ol> 
 <li>The domain query is sent to the default DNS server for the VPC hosting source machine (<span style="font-family: courier">host1</span>).</li> 
 <li>Because the VPC is associated with the shared forwarding rules, these rules will be evaluated.</li> 
 <li>A rule indicates that queries for <span style="font-family: courier">awscloud.private</span> zone should be forwarded to the resolver endpoint in DNS-VPC (for inbound endpoint IP addresses), which will then use the Amazon-provided default DNS to resolve the query.</li> 
 <li>Because DNS-VPC is associated with the <span style="font-family: courier">acc2.awscloud.private</span> hosted zone, the default DNS will use auto-defined rules to resolve this domain.</li> 
</ol> 
<p>This use case explains the AWS-to-AWS case where the DNS query has been initiated on one participating account and forwarded to central DNS for resolution of domains in another AWS account. Now, I’ll look at what it takes to build this solution in your environment.</p> 
<h2>How to deploy the solution</h2> 
<p>I’ll show you how to configure this solution in four steps:</p> 
<ol> 
 <li>Set up a centralized DNS account.</li> 
 <li>Set up each participating account.</li> 
 <li>Create private hosted zones and Route 53 associations.</li> 
 <li>Configure on-premises DNS forwarders.</li> 
</ol> 
<h3>Step 1: Set up a centralized DNS account</h3> 
<p>In this step, you’ll set up resources in the centralized DNS account. Primarily, this includes the DNS-VPC, Resolver endpoints, and forwarding rules.</p> 
<ol> 
 <li>Create a VPC to act as DNS-VPC according to your business scenario, either using the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html" rel="noopener noreferrer" target="_blank">web console</a> or from an AWS <a href="https://aws.amazon.com/quickstart/architecture/vpc/" rel="noopener noreferrer" target="_blank">Quick Start</a>. You can review common scenarios in the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html" rel="noopener noreferrer" target="_blank">Amazon VPC user guide</a>; one very common scenarios is a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html" rel="noopener noreferrer" target="_blank">VPC with public and private subnets</a>. </li> 
 <li><a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-getting-started.html" rel="noopener noreferrer" target="_blank">Create resolver endpoints</a>. You need to create an outbound endpoint to forward DNS queries to on-premises DNS and an inbound endpoint to receive DNS queries forwarded from on-premises workloads and other AWS accounts.</li> 
 <li>Create two <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-rules-managing.html" rel="noopener noreferrer" target="_blank">forwarding rules</a>. The first rule is to forward DNS queries for zone <span style="font-family: courier">onprem.private</span> to your on-premises DNS server IP addresses, and the second rule is to forward DNS queries for zone <span style="font-family: courier">awscloud.private</span> to the IP addresses of the resolver inbound endpoint.</li> 
 <li>After creating the rules, <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-rules-managing.html#resolver-rules-managing-associating-rules" rel="noopener noreferrer" target="_blank">associate them with DNS-VPC that was created in step #1</a>. This will allow the Route 53 Resolver to start forwarding domain queries accordingly.</li> 
 <li>Finally, you need to <a href="https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html" rel="noopener noreferrer" target="_blank">share the two forwarding rules with all participating accounts</a>. To do that, you’ll use AWS Resource Access Manager and you can share the rules with your entire AWS Organization or with specific accounts.</li> 
</ol> 
<blockquote>
 <p><strong>Note:</strong> To be able to forward domain queries to your on-premises DNS server, you need connectivity between your data center and DNS-VPC, which could be established either using <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html" rel="noopener noreferrer" target="_blank">site-to-site VPN</a> or <a href="https://aws.amazon.com/directconnect/" rel="noopener noreferrer" target="_blank">AWS Direct Connect</a>.</p>
</blockquote> 
<h3>Step 2: Set up participating accounts</h3> 
<p>For each participating account, you need to configure your VPCs to use the shared forwarding rules, and you need to create a private hosted zone for each account.</p> 
<ul> 
 <li><a href="https://docs.aws.amazon.com/ram/latest/userguide/getting-started-shared.html" rel="noopener noreferrer" target="_blank">Accept the shared rules</a> from AWS Resource Access Manager. This step is not required if the rules were shared to your AWS Organization. Then, <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-rules-managing.html#resolver-rules-managing-associating-rules" rel="noopener noreferrer" target="_blank">associate the forwarding rules</a> with the VPCs that host your workloads in each account. Once associated, the resolver will start forwarding DNS queries according to the rules.</li> 
</ul> 
<p>At this point, you should be able to resolve on-premises domains from workloads running in any VPC associated with the shared forwarding rules. To create private domains in AWS, you need to create Private Hosted Zones.</p> 
<h3>Step 3: Create private hosted zones</h3> 
<p>In this step, you need to create a private hosted zone in each account with a subdomain of <span style="font-family: courier">awscloud.private</span>. Use unique names for each private hosted zone to avoid domain conflicts in your environment (for example, <span style="font-family: courier">acc1.awscloud.private</span> or <span style="font-family: courier">dev.awscloud.private</span>).</p> 
<ol> 
 <li><a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zone-private-creating.html" rel="noopener noreferrer" target="_blank">Create a private hosted zone</a> in each participating account with a subdomain of <span style="font-family: courier">awscloud.private</span> and associate it with VPCs running in that account.</li> 
 <li><a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zone-private-associate-vpcs-different-accounts.html" rel="noopener noreferrer" target="_blank">Associate the private hosted zone with DNS-VPC</a>. This allows the centralized DNS-VPC to resolve domains in the private hosted zone and act as a DNS resolver between AWS accounts.</li> 
</ol> 
<p>Because the private hosted zone and DNS-VPC are in different accounts, you need to associate the private hosted zone with DNS-VPC. To do that, you need to create authorization from the account that owns the private hosted zone and accept this authorization from the account that owns DNS-VPC. You can do that using AWS CLI:</p> 
<ol> 
 <li>In each participating account, create the authorization using the private hosted zone ID, the region, and the VPC ID that you want to associate (DNS-VPC). 
  <div class="hide-language"> 
   <pre><code class="lang-text">
    aws route53 create-vpc-association-authorization --hosted-zone-id <span style="font-family: courier"><span style="color: #ff0000"><i>&lt;hosted-zone-id&gt;</i></span></span>  --vpc VPCRegion=<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;region&gt;</i></span></span> ,VPCId=<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;vpc-id&gt;</i></span></span>    
</code></pre> 
  </div> </li> 
 <li>In the centralized DNS account, associate the DNS-VPC with the hosted zone in each participating account. 
  <div class="hide-language"> 
   <pre><code class="lang-text">
    aws route53 associate-vpc-with-hosted-zone --hosted-zone-id <span style="color: #ff0000"><i>&lt;hosted-zone-id&gt;</i></span> --vpc VPCRegion=<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;region&gt;</i></span></span>,VPCId=<span style="font-family: courier"><span style="color: #ff0000"><i>&lt;vpc-id&gt;</i></span></span>    
</code></pre> 
  </div> </li> 
</ol> 
<h3>Step 4: Configure on-premises DNS forwarders</h3> 
<p>To be able to resolve subdomains within the <span style="font-family: courier">awscloud.private</span> domain from workloads running on-premises, you need to configure conditional forwarding rules to forward domain queries to the two IP addresses of resolver inbound endpoints that were created in the central DNS account. Note that this requires connectivity between your data center and DNS-VPC, which could be established either using <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html" rel="noopener noreferrer" target="_blank">site-to-site VPN</a> or<br /> <a href="https://aws.amazon.com/directconnect/" rel="noopener noreferrer" target="_blank">AWS Direct Connect</a>.</p> 
<h2>Additional considerations and limitations</h2> 
<p>Thanks to the flexibility of Route 53 Resolver and conditional forwarding rules, you can control which queries to send to central DNS and which ones to resolve locally in the same account. This is particularly important when you plan to use some AWS services, such as AWS <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html" rel="noopener noreferrer" target="_blank">PrivateLink</a> or Amazon <a href="https://aws.amazon.com/efs/" rel="noopener noreferrer" target="_blank">Elastic File System</a> (EFS) because domain names associated with these services need to be resolved local to the account that owns them. In this section, I will name two use-cases that require additional considerations.</p> 
<ol> 
 <li>Interface VPC Endpoints (AWS PrivateLink) <p> When you create an AWS PrivateLink <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html" rel="noopener noreferrer" target="_blank">interface endpoint</a>, AWS generates endpoint-specific DNS hostnames that you can use to communicate with the service. For AWS services and AWS Marketplace partner services, you can optionally enable private DNS for the endpoint. This option associates a private hosted zone with your VPC. The hosted zone contains a record set for the default DNS name for the service (for example, <span style="font-family: courier">ec2.us-east-1.amazonaws.com</span>) that resolves to the private IP addresses of the endpoint network interfaces in your VPC. This enables you to make requests to the service using its default DNS hostname instead of the endpoint-specific DNS hostnames.</p> <p> If you use private DNS for your endpoint, you have to resolve DNS queries to the endpoint local to the account and use the default DNS provided by AWS. So, in this case, I recommend that you resolve domain queries in <span style="font-family: courier">amazonaws.com</span> locally and not forward these queries to central DNS. </p></li> 
 <li>Mounting EFS with a DNS name <p> You can mount an <a href="https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html" rel="noopener noreferrer" target="_blank">Amazon EFS file system</a> on an Amazon EC2 instance using DNS names. The file system DNS name automatically resolves to the mount target’s IP address in the Availability Zone of the connecting Amazon EC2 instance. To be able to do that, the VPC must use the default DNS provided by Amazon to resolve EFS DNS names. </p> <p> If you plan to use EFS in your environment, I recommend that you resolve EFS DNS names locally and avoid sending these queries to central DNS because clients in that case would not receive answers optimized for their availability zone, which might result in higher operation latencies and less durability. </p></li> 
</ol> 
<h2>Summary</h2> 
<p>In this post, I introduced a simplified solution to implement central DNS resolution in a multi-account and hybrid environment. This solution uses AWS Route 53 Resolver, AWS Resource Access Manager, and native Route 53 capabilities and it reduces complexity and operations effort by removing the need for custom DNS servers or forwarders in AWS environment.</p> 
<p>If you have feedback about this blog post, submit comments in the <strong>Comments</strong> section below. If you have questions about this blog post, start a new thread on in the AWS forums.</p> 
<p><strong>Want more AWS Security how-to content, news, and feature announcements? Follow us on <a href="https://twitter.com/AWSsecurityinfo" title="Twitter" target="_blank" rel="noopener noreferrer">Twitter</a>.</strong></p> 
<footer> 
 <div class="blog-author-box"> 
  <div class="blog-author-image"> 
   <img src="https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2019/02/01/matouk-author-photo.jpeg" alt="Author" width="119" height="160" class="aligncenter size-full wp-image-9947" /> 
  </div> 
  <h3 class="lb-h4">Mahmoud Matouk</h3> 
  <p>Mahmoud is part of our world-wide public sector Solutions Architects, helping higher education customers build innovative, secured, and highly available solutions using various AWS services.</p> 
  <p></p>
 </div> 
</footer>