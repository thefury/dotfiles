<p>When I joined AWS last year, I wanted to find a way to explain, in the easiest way possible, all the options it offers to users from a compute perspective. There are many ways to peel this onion, but I want to share a “visual story” that I have created.</p> 
<p>I define the compute domain as “anything that has CPU and Memory capacity that allows you to run an arbitrary piece of code written in a specific programming language.” Your mileage may vary in how you define it, but this is broad enough that it should cover a lot of different interpretations.</p> 
<p>A key part of my story is around the introduction of different levels of compute abstractions this industry has witnessed in the last 20 or so years.</p> 
<h2>Separation of duties</h2> 
<p>The start of my story is a line. In a cloud environment, this line defines the perimeter between the consumer role and the provider role. In the cloud, there are things that AWS will do and things that the consumer will do. The perimeter of these responsibilities varies depending on the services you opt to use. If you want to understand more about this concept, read the <a href="https://aws.amazon.com/compliance/shared-responsibility-model/">AWS Shared Responsibility Model documentation</a>.</p> 
<p><img class="alignnone wp-image-836 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction1-1024x575.png" alt="" width="1024" height="575" /></p> 
<h2>The different abstraction levels</h2> 
<p>The reason why the line above is oblique is because it needs to intercept different compute abstraction levels. If you think about what happened in the last 20 years of IT, we have seen a surge of different compute abstractions that changed the way people consume CPU and Memory resources. It all started with physical (x86) servers back in the 80s, and then we have seen the industry adding abstraction layers over the years (for example, hypervisors, containers, functions).</p> 
<p>The higher you go in the abstraction levels, the more the cloud provider can add value and can offload the consumer from non-strategic activities. A lot of these activities tend to be “undifferentiated heavy lifting.” We define this as something that AWS customers have to do but that don’t necessarily differentiate them from their competitors (because those activities are table-stakes in that particular industry).</p> 
<p><img class="alignnone size-large wp-image-837" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction2-1024x576.png" alt="" width="1024" height="576" /></p> 
<p>What we found is that supporting millions of customers on AWS requires a certain degree of flexibility in the services we offer because there are many different patterns, use cases, and requirements to satisfy. Giving our customers choices is something AWS always strives for.</p> 
<p>A couple of final notes before we dig deeper. The way this story builds up through the blog post is aligned to the progression of the launch dates of the various services, with a few noted exceptions. Also, the services mentioned are all generally available and production-grade. For full transparency, the integration among some of them may still be work-in-progress, which I’ll call out explicitly as we go.</p> 
<h2>The instance (or virtual machine) abstraction</h2> 
<p>This is the very first abstraction we introduced on AWS back in 2006. <a href="https://aws.amazon.com/ec2/">Amazon Elastic Compute Cloud</a> (Amazon EC2) is the service that allows AWS customers to launch instances in the cloud. When customers intercept us at this level, they retain responsibility of the guest operating system and above (middleware, applications, etc.) and their lifecycle. AWS has the responsibility for managing the hardware and the hypervisor including their lifecycle.</p> 
<p>At the very same level of the stack there is also <a href="https://aws.amazon.com/lightsail/">Amazon Lightsail</a>, which “is the easiest way to get started with AWS for developers, small businesses, students, and other users who need a simple virtual private server (VPS) solution. Lightsail provides developers compute, storage, and networking capacity and capabilities to deploy and manage websites and web applications in the cloud.”</p> 
<p>And this is how these two services appear in our story:</p> 
<p><img class="alignnone size-large wp-image-839" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction3-1024x574.png" alt="" width="1024" height="574" /></p> 
<h2>The container abstraction</h2> 
<p>With the rise of microservices, a new abstraction took the industry by storm in the last few years: containers. Containers are not a new technology, but the rise of <a href="https://github.com/docker/docker">Docker</a> a few years ago democratized access. You can think of a container as a self-contained environment with soft boundaries that includes both your own application as well as the software dependencies to run it. Whereas an instance (or VM) virtualizes a piece of hardware so that you can run dedicated operating systems, a container technology virtualizes an operating system so that you can run separated applications with different (and often incompatible) software dependencies.</p> 
<p>And now the tricky part. Modern containers-based solutions are usually implemented in two main logical pieces:</p> 
<ul> 
 <li>A containers <strong>control plane</strong> that is responsible for exposing the API and interfaces to define, deploy, and lifecycle containers. This is also sometimes referred to as the container orchestration layer.</li> 
 <li>A containers <strong>data plane</strong> that is responsible for providing capacity (as in CPU/Memory/Network/Storage) so that those containers can actually run and connect to a network. From a practical perspective this is typically a Linux host or less often a Windows host where the containers get started and wired to the network.</li> 
</ul> 
<p>Arguably, in a specific compute abstraction discussion, the data plane is key, but it is as important to understand what’s happening for the control plane piece.</p> 
<p>In 2014, Amazon launched a production-grade containers control plane called <a href="https://aws.amazon.com/ecs/">Amazon Elastic Container Service</a> (ECS), which “is a highly scalable, high performance container management service that supports Docker … Amazon ECS eliminates the need for you to install, operate, and scale your own cluster management infrastructure.”</p> 
<p>In 2017, Amazon also announced the intention to release a new service called <a href="https://aws.amazon.com/eks/">Amazon Elastic Container Service for Kubernetes</a> (EKS) based on <a href="https://github.com/kubernetes/kubernetes">Kubernetes</a>, a successful open source containers control plane technology. Amazon EKS was <a href="https://aws.amazon.com/about-aws/whats-new/2018/06/amazon-elastic-container-service-for-kubernetes-eks-now-ga/">made generally available</a> in early June 2018.</p> 
<p>Just like for ECS, the aim for this service is to free AWS customers from having to manage a containers control plane. In the past, AWS customers would spin up EC2 instances and deploy/manage their own Kubernetes masters (masters is the name of the Kubernetes hosts running the control plane) on top of an EC2 abstraction. However, we believe many AWS customers will leave to AWS the burden of managing this layer by either consuming ECS or EKS, depending on their use cases. A comparison between ECS and EKS is beyond the scope of this blog post.</p> 
<p>You may have noticed that what we have discussed so far is about the container control plane. How about the containers data plane? This is typically a fleet of EC2 instances managed by the customer. In this particular setup, the containers control plane is managed by AWS while the containers data plane is managed by the customer. One could argue that, with ECS and EKS, we have raised the abstraction level for the control plane, but we have not yet really raised the abstraction level for the data plane as the data plane is still comprised of regular EC2 instances that the customer has responsibility for.</p> 
<p>There is more on that later on but, for now, this is how the containers control plane and the containers data plane services appear:</p> 
<p><img class="alignnone size-large wp-image-840" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction4-1024x575.png" alt="" width="1024" height="575" /></p> 
<h2>The function abstraction</h2> 
<p>At re:Invent 2014, AWS introduced another abstraction layer: <a href="https://aws.amazon.com/lambda/">AWS Lambda</a>. Lambda is an execution environment that allows an AWS customer to run a single function. So instead of having to manage and run a full-blown OS instance to run your code, or having to track all software dependencies in a user-built container to run your code, Lambda allows you to upload your code and let AWS figure out how to run it at scale.</p> 
<p>What makes Lambda so special is its event-driven model. Not only can you invoke Lambda directly (for example, via the <a href="https://aws.amazon.com/api-gateway/">Amazon API Gateway</a>), but you can trigger a Lambda function upon an event in another AWS service (for example, an <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-s3.html">upload to Amazon S3</a> or a <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html">change in an Amazon DynamoDB table</a>).</p> 
<p>The key point about Lambda is that you don’t have to manage the infrastructure underneath the function you are running. No need to track the status of the physical hosts, no need to track the capacity of the fleet, no need to patch the OS where the function will be running. In a nutshell, no need to spend time and money on the undifferentiated heavy lifting.</p> 
<p>And this is how the Lambda service appears:</p> 
<p><img class="alignnone size-large wp-image-841" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction5-1024x574.png" alt="" width="1024" height="574" /></p> 
<h2>The bare metal abstraction</h2> 
<p>Also known as the “no abstraction.”</p> 
<p>As recently as re:Invent 2017, <a href="https://aws.amazon.com/about-aws/whats-new/2017/11/announcing-amazon-ec2-bare-metal-instances-preview/">we announced (the preview of) the Amazon EC2 bare metal</a> instances. We made this service <a href="https://aws.amazon.com/about-aws/whats-new/2018/05/announcing-general-availability-of-amazon-ec2-bare-metal-instances/">generally available to the public</a> in May 2018.</p> 
<p>This announcement is part of Amazon’s strategy to provide choice to our customers. In this case, we are giving customers direct access to hardware. To quote from <a href="https://aws.amazon.com/blogs/aws/new-amazon-ec2-bare-metal-instances-with-direct-access-to-hardware/">Jeff Barr’s post</a>:</p> 
<blockquote>
 <p>“…. (AWS customers) wanted access to the physical resources for applications that take advantage of low-level hardware features such as&nbsp;<a href="https://www.intel.com/content/www/us/en/architecture-and-technology/resource-director-technology.html">performance counters</a>&nbsp;and&nbsp;<a href="https://www.intel.com/content/www/us/en/virtualization/virtualization-technology/intel-virtualization-technology.html">Intel&reg;&nbsp;VT</a>&nbsp;that are not always available or fully supported in virtualized environments, and also for applications intended to run directly on the hardware or licensed and supported for use in non-virtualized environments.”</p>
</blockquote> 
<p>This is how the bare metal <a href="https://aws.amazon.com/ec2/instance-types/i3/">Amazon EC2 i3.metal</a> instance appears:</p> 
<p><img class="alignnone size-large wp-image-842" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction6-1024x574.png" alt="" width="1024" height="574" /></p> 
<p>As a side note, and also as alluded to by Jeff, i3.metal is the foundational EC2 instance type on top of which VMware created their own <a href="https://cloud.vmware.com/vmc-aws">VMware Cloud on AWS</a> service. We are now offering the ability to any AWS user to provision bare metal instances. This doesn’t necessarily mean you can load your hypervisor of choice out of the box, but <a href="https://twitter.com/mreferre/status/997879429463511041">you can certainly do things you wouldn’t be able to do</a> with a traditional EC2 instance (note: this was just a Saturday afternoon hack).</p> 
<p>More seriously, a question I get often asked is whether users could install ESXi on i3.metal on their own. Today this cannot be done, but I’d be interested in hearing your use case for this.</p> 
<h2>The full container abstraction (for lack of a better term)</h2> 
<p>Now that we covered all the abstractions, it is time to go back and see if there are other optimizations we can provide for AWS customers. When we discussed the container abstraction, we called out that while there are two different fully managed containers control planes (ECS and EKS), there wasn’t a managed option for the data plane.</p> 
<p>Some customers were (and still are) happy about being in full control of said instances. Others have been very vocal that they wanted to get out of the (undifferentiated heavy-lifting) business of managing the lifecycle of that piece of infrastructure.</p> 
<p>Enter <a href="https://aws.amazon.com/fargate/">AWS Fargate</a>, a production-grade service that provides compute capacity to AWS containers control planes.&nbsp;Practically speaking, Fargate is making the containers data plane fall into the “Provider space” responsibility. This means the compute unit exposed to the user is the container abstraction, while AWS will manage transparently the data plane abstractions underneath.</p> 
<p>This is how the Fargate service appears:</p> 
<p><img class="alignnone size-large wp-image-843" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction7-1024x575.png" alt="" width="1024" height="575" /></p> 
<p>Now ECS has two “launch types”: one called “EC2” (where your tasks get deployed on a <em>customer-managed</em> fleet of EC2 instances), and the other one called “Fargate” (where your tasks get deployed on an <em>AWS-managed</em> fleet of EC2 instances).</p> 
<p>For EKS, the strategy will be very similar, but as of this writing it was not yet available. If you’re interested in some of the exploration being done to make this happen, <a href="https://aws.amazon.com/blogs/opensource/aws-fargate-virtual-kubelet/">this is a good read</a>.</p> 
<h2>Conclusions</h2> 
<p>We covered the spectrum of abstraction levels available on AWS and how AWS customers can intercept them depending on their use cases and where they sit on their cloud maturity journey. Customers with a “lift &amp; shift” approach may be more akin to consume services on the left-hand side of the slide, whereas customers with a more mature cloud native approach may be more interested in consuming services on the right-hand side of the slide.</p> 
<p>In general, customers tend to use higher-level services to get out of the business of managing non-differentiating activities. For example, I recently talked to a customer interested in using Fargate. The trigger there was the fact that <a href="https://aws.amazon.com/about-aws/whats-new/2018/03/aws-fargate-supports-container-workloads-regulated-by-iso-pci-soc-and-hipaa/">Fargate is ISO, PCI, SOC and HIPAA compliant</a>, which was a huge time and money saver for them because it’s easier to point to an AWS document during an audit than having to architect and document for compliance the configuration of a DIY containers data plane.</p> 
<p>As a recap, here’s our visual story with all the abstractions available:</p> 
<p><img class="alignnone size-large wp-image-844" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/Abstraction8-1024x575.png" alt="" width="1024" height="575" /></p> 
<p>I hope you found it useful. Any feedback is greatly appreciated.</p> 
<h2>About the author</h2> 
<p><img class="alignleft size-thumbnail wp-image-845" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/09/06/m_referre-119x150.jpg" alt="" width="119" height="150" />Massimo is a Principal Solutions Architect at AWS. For about 25 years, he specialized on the x86 ecosystem starting with operating systems and virtualization technologies, and lately he has been head down learning about cloud and how application architectures are evolving in that space. Massimo has a blog at <a href="http://www.it20.info">www.it20.info</a> and his Twitter handle is @mreferre.</p>