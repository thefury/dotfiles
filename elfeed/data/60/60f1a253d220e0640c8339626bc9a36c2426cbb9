<p>Today, we are launching support for <a href="https://aws.amazon.com/ecr/">Amazon Elastic Container Registry</a> (Amazon ECR) as a source provider in AWS CodePipeline. You can now initiate an <a href="https://aws.amazon.com/codepipeline/">AWS CodePipeline</a> pipeline update by uploading a new image to Amazon ECR. This makes it easier to set up a continuous delivery pipeline and use the AWS Developer Tools for CI/CD.</p> 
<p>You can use Amazon ECR as a source if you’re implementing a blue/green deployment with AWS CodeDeploy from the AWS CodePipeline console. For more information about using the <a href="https://aws.amazon.com/ecs/">Amazon Elastic Container Service</a> (Amazon ECS) console to implement a blue/green deployment without CodePipeline, see <a href="https://aws.amazon.com/blogs/devops/use-aws-codedeploy-to-implement-blue-green-deployments-for-aws-fargate-and-amazon-ecs">Implement Blue/Green Deployments for AWS Fargate and Amazon ECS Powered by AWS CodeDeploy</a>.</p> 
<p>This post shows you how to create a complete, end-to-end continuous deployment (CD) pipeline with Amazon ECR and AWS CodePipeline. It walks you through setting up a pipeline to build your images when the upstream base image is updated.</p> 
<h2>Prerequisites</h2> 
<p>To follow along, you must have these resources in place:</p> 
<ul> 
 <li>A source control repository with your base image Dockerfile and a Docker image repository to store your image. In this walkthrough, we use a simple Dockerfile for the base image:</li> 
</ul> 
<pre>&nbsp;&nbsp;&nbsp; FROM alpine:3.8

    RUN apk update

    RUN apk add nodejs</pre> 
<ul> 
 <li>A source control repository with your application Dockerfile and source code and a Docker image repository to store your image. For the application Dockerfile, we use our base image and then add our application code:</li> 
</ul> 
<pre>&nbsp;&nbsp;&nbsp; FROM 012345678910.dkr.ecr.us-east-1.amazonaws.com/base-image

    ENV PORT=80

    EXPOSE $PORT

    COPY app.js /app/

    CMD [&quot;node&quot;, &quot;/app/app.js&quot;]</pre> 
<p>This walkthrough uses <a href="https://aws.amazon.com/codecommit/">AWS CodeCommit</a> for the source control repositories and Amazon ECR &nbsp;for the Docker image repositories. For more information, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-create-repository.html">Create an AWS CodeCommit Repository</a> in the <em>AWS CodeCommit User Guide</em> and <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html">Creating a Repository</a> in the <em>Amazon Elastic Container Registry User Guide</em>.</p> 
<blockquote>
 <p><strong>Note:</strong> The source control repositories and image repositories must be created in the same AWS Region.</p>
</blockquote> 
<h2>Set up IAM service roles</h2> 
<p>In this walkthrough you use <a href="https://aws.amazon.com/codebuild/">AWS CodeBuild</a> and AWS CodePipeline to build your Docker images and push them to Amazon ECR. Both services use <a href="https://aws.amazon.com/iam/">Identity and Access Management (IAM)</a> service roles to makes calls to Amazon ECR API operations. The service roles must have a policy that provides permissions to make these Amazon ECR calls. The following procedure helps you attach the required permissions to the CodeBuild service role.</p> 
<h3>To create the CodeBuild service role</h3> 
<ol> 
 <li>Follow <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html#setting-up-service-role">these steps</a> to use the IAM console to create a CodeBuild service role.</li> 
 <li>On step 10, make sure to also add the <strong>AmazonEC2ContainerRegistryPowerUser</strong> policy to your role.</li> 
</ol> 
<p><img class="aligncenter wp-image-2843 size-large" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/26/Screen-Shot-2018-11-22-at-14.15.48-1-1024x558.png" alt="CodeBuild service role policies" width="1024" height="558" /></p> 
<h2>Create a build specification file for your base image</h2> 
<p>A <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html">build specification file</a> (or build spec) is a collection of build commands and related settings, in YAML format, that AWS CodeBuild uses to run a build. Add a buildspec.yml file to your source code repository to tell CodeBuild how to build your base image. The example build specification used here does the following:</p> 
<ul> 
 <li>Pre-build stage: 
  <ul> 
   <li>Sign in to Amazon ECR.</li> 
   <li>Set the repository URI to your ECR image and add an image tag with the first seven characters of the Git commit ID of the source.</li> 
  </ul> </li> 
 <li>Build stage: 
  <ul> 
   <li>Build the Docker image and tag the image with latest and the Git commit ID.</li> 
  </ul> </li> 
 <li>Post-build stage: 
  <ul> 
   <li>Push the image with both tags to your Amazon ECR repository.</li> 
  </ul> </li> 
</ul> 
<pre>version: 0.2

phases:
  pre_build:
    commands:
      - echo.Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=012345678910.dkr.ecr.us-east-1.amazonaws.com/base-image
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG</pre> 
<h3>To add a buildspec.yml file to your source repository</h3> 
<ol> 
 <li>Open a text editor and then copy and paste the build specification above into a new file.</li> 
 <li>Replace the <code>REPOSITORY_URI</code> value (<code>012345678910.dkr.ecr.us-east-1.amazonaws.com/base-image</code>) with your Amazon ECR repository URI (without any image tag) for your Docker image. Replace <code>base-image</code> with the name for your base Docker image.</li> 
 <li>Commit and push your <code>buildspec.yml</code> file to your source repository.</li> 
</ol> 
<pre>    git add .
    git commit -m &quot;Adding build specification.&quot;
    git push</pre> 
<h2>Create a build specification file for your application</h2> 
<p>Add a buildspec.yml file to your source code repository to tell CodeBuild how to build your source code and your application image. The example build specification used here does the following:</p> 
<ul> 
 <li>Pre-build stage: 
  <ul> 
   <li>Sign in to Amazon ECR.</li> 
   <li>Set the repository URI to your ECR image and add an image tag with the first seven characters of the CodeBuild build ID.</li> 
  </ul> </li> 
 <li>Build stage: 
  <ul> 
   <li>Build the Docker image and tag the image with latest and the Git commit ID.</li> 
  </ul> </li> 
 <li>Post-build stage: 
  <ul> 
   <li>Push the image with both tags to your ECR repository.</li> 
  </ul> </li> 
</ul> 
<pre>version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=012345678910.dkr.ecr.us-east-1.amazonaws.com/hello-world
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F&quot;:&quot; '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
artifacts:
  files:
    - imageDetail.json</pre> 
<h3>To add a buildspec.yml file to your source repository</h3> 
<ol> 
 <li>Open a text editor and then copy and paste the build specification above into a new file.</li> 
 <li>Replace the <code>REPOSITORY_URI</code> value (<code>012345678910.dkr.ecr.us-east-1.amazonaws.com/hello-world</code>) with your Amazon ECR repository URI (without any image tag) for your Docker image. Replace <code>hello-world</code> with the container name in your service’s task definition that references your Docker image.</li> 
 <li>Commit and push your <code>buildspec.yml</code> file to your source repository.</li> 
</ol> 
<pre>    git add .
    git commit -m &quot;Adding build specification.&quot;
    git push</pre> 
<h2>Create a continuous deployment pipeline for your base image</h2> 
<p>Use the AWS CodePipeline wizard to create your pipeline stages:</p> 
<ol> 
 <li>Open the AWS CodePipeline console at <a href="https://console.aws.amazon.com/codepipeline/">https://console.aws.amazon.com/codepipeline/</a>.</li> 
 <li>On the <strong>Welcome</strong> page, choose <strong>Create pipeline</strong>.<br /> If this is your first time using AWS CodePipeline, an introductory page appears instead of <strong>Welcome</strong>. Choose <strong>Get Started Now</strong>.</li> 
 <li>On the <strong>Step 1: Name</strong> page, for <strong>Pipeline name</strong>, type the name for your pipeline and choose <strong>Next step</strong>. For this walkthrough, the pipeline name is <strong>base-image</strong>.</li> 
 <li>On the <strong>Step 2: Source</strong> page, for <strong>Source provider</strong>, choose <strong>AWS CodeCommit</strong>. 
  <ol> 
   <li>For <strong>Repository name</strong>, choose the name of the AWS CodeCommit repository to use as the source location for your pipeline.</li> 
   <li>For <strong>Branch name</strong>, choose the branch to use, and then choose <strong>Next step</strong>.</li> 
  </ol> </li> 
 <li>On the <strong>Step 3: Build</strong> page, choose <strong>AWS CodeBuild</strong>, and then choose <strong>Create project</strong>. 
  <ol> 
   <li>For <strong>Project name</strong>, choose a unique name for your build project. For this walkthrough, the project name is <strong>base-image</strong>.</li> 
   <li>For <strong>Operating system</strong>, choose <strong>Ubuntu</strong>.</li> 
   <li>For <strong>Runtime</strong>, choose <strong>Docker</strong>.</li> 
   <li>For <strong>Version</strong>, choose <strong>aws/codebuild/docker:17.09.0</strong>.</li> 
   <li>For <strong>Service role</strong>, choose <strong>Existing service role</strong>, choose the CodeBuild service role you’ve created earlier, and then clear the <strong>Allow AWS CodeBuild to modify this service role so it can be used with this build project</strong> box.</li> 
   <li>Choose <strong>Continue to CodePipeline</strong>.</li> 
   <li>Choose <strong>Next</strong>.</li> 
  </ol> </li> 
 <li>On the <strong>Step 4: Deploy page</strong>, choose <strong>Skip</strong> and acknowledge the pop-up warning.</li> 
 <li>On the <strong>Step 5: Review page</strong>, review your pipeline configuration, and then choose <strong>Create pipeline</strong>.</li> 
</ol> 
<p><img class="aligncenter wp-image-2846 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/26/Screen-Shot-2018-11-22-at-14.27.20.png" alt="Base image pipeline" width="510" height="904" /></p> 
<h2>Create a continuous deployment pipeline for your application image</h2> 
<p>The execution of the application image pipeline is triggered by changes to the application source code and changes to the upstream base image. You first create a pipeline, and then edit it to add a second source stage.</p> 
<ol> 
 <li style="list-style-type: none"> 
  <ol> 
   <li>Open the AWS CodePipeline console at <a href="https://console.aws.amazon.com/codepipeline/">https://console.aws.amazon.com/codepipeline/</a>.</li> 
   <li>On the <strong>Welcome</strong> page, choose <strong>Create pipeline</strong>.</li> 
   <li>On the <strong>Step 1: Name</strong> page, for <strong>Pipeline name</strong>, type the name for your pipeline, and then choose <strong>Next step</strong>. For this walkthrough, the pipeline name is <strong>hello-world</strong>.</li> 
   <li>For <strong>Service role</strong>, choose <strong>Existing service role</strong>, and then choose the CodePipeline service role you modified earlier.</li> 
   <li>On the <strong>Step 2: Source</strong> page, for <strong>Source provider</strong>, choose <strong>Amazon ECR</strong>. 
    <ol> 
     <li>For <strong>Repository name</strong>, choose the name of the Amazon ECR repository to use as the source location for your pipeline. For this walkthrough, the repository name is <strong>base-image</strong>.</li> 
    </ol> </li> 
  </ol> </li> 
</ol> 
<p><img class="aligncenter wp-image-2847 size-large" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/26/Screen-Shot-2018-11-22-at-12.31.35-1024x542.png" alt="Amazon ECR source configuration" width="1024" height="542" /></p> 
<ol> 
 <li>On the <strong>Step 3: Build</strong> page, choose <strong>AWS CodeBuild</strong>, and then choose <strong>Create project</strong>. 
  <ol> 
   <li>For <strong>Project name</strong>, choose a unique name for your build project. For this walkthrough, the project name is <strong>hello-world</strong>.</li> 
   <li>For <strong>Operating system</strong>, choose <strong>Ubuntu</strong>.</li> 
   <li>For <strong>Runtime</strong>, choose <strong>Docker</strong>.</li> 
   <li>For <strong>Version</strong>, choose <strong>aws/codebuild/docker:17.09.0</strong>.</li> 
   <li>For <strong>Service role</strong>, choose <strong>Existing service role</strong>, choose the CodeBuild service role you’ve created earlier, and then clear the <strong>Allow AWS CodeBuild to modify this service role so it can be used with this build project</strong> box.</li> 
   <li>Choose <strong>Continue to CodePipeline</strong>.</li> 
   <li>Choose <strong>Next</strong>.</li> 
  </ol> </li> 
 <li>On the <strong>Step 4: Deploy</strong> page, choose <strong>Skip</strong> and acknowledge the pop-up warning.</li> 
 <li>On the <strong>Step 5: Review</strong> page, review your pipeline configuration, and then choose <strong>Create pipeline</strong>.</li> 
</ol> 
<p>The pipeline will fail, because it is missing the application source code. Next, you edit the pipeline to add an additional action to the source stage.</p> 
<ol> 
 <li>Open the AWS CodePipeline console at <a href="https://console.aws.amazon.com/codepipeline/">https://console.aws.amazon.com/codepipeline/</a>.</li> 
 <li>On the <strong>Welcome</strong> page, choose your pipeline from the list. For this walkthrough, the pipeline name is <strong>hello-world</strong>.</li> 
 <li>On the pipeline page, choose <strong>Edit</strong>.</li> 
 <li>On the <strong>Editing: hello-world</strong> page, in <strong>Edit: Source</strong>, choose <strong>Edit stage</strong>.</li> 
 <li>Choose the existing source action, and choose the edit icon. 
  <ol> 
   <li>Change <strong>Output artifacts</strong> to <strong>BaseImage</strong>, and then choose <strong>Save</strong>.</li> 
  </ol> </li> 
 <li>Choose <strong>Add action</strong>, and then enter a name for the action (for example, <strong>Code</strong>). 
  <ol> 
   <li>For <strong>Action provider</strong>, choose <strong>AWS CodeCommit</strong>.</li> 
   <li>For <strong>Repository name</strong>, choose the name of the AWS CodeCommit repository for your application source code.</li> 
   <li>For <strong>Branch name</strong>, choose the branch.</li> 
   <li>For <strong>Output artifacts</strong>, specify <strong>SourceArtifact</strong>, and then choose <strong>Save</strong>.</li> 
  </ol> </li> 
 <li>On the <strong>Editing: hello-world</strong> page, choose <strong>Save</strong> and acknowledge the pop-up warning.</li> 
</ol> 
<p><img class="aligncenter wp-image-2848 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/11/26/Screen-Shot-2018-11-22-at-14.36.32.png" alt="Application image pipeline" width="1008" height="976" /></p> 
<h2>Test your end-to-end pipeline</h2> 
<p>Your pipeline should have everything for running an end-to-end native AWS continuous deployment. Now, test its functionality by pushing a code change to your base image repository.</p> 
<ol> 
 <li>Make a change to your configured source repository, and then commit and push the change.</li> 
 <li>Open the AWS CodePipeline console at <a href="https://console.aws.amazon.com/codepipeline/">https://console.aws.amazon.com/codepipeline/</a>.</li> 
 <li>Choose your pipeline from the list.</li> 
 <li>Watch the pipeline progress through its stages. As the base image is built and pushed to Amazon ECR, see how the second pipeline is triggered, too. When the execution of your pipeline is complete, your application image is pushed to Amazon ECR, and you are now ready to deploy your application. For more information about continuously deploying your application, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-ecs-ecr-codedeploy.html">Create a Pipeline with an Amazon ECR Source and ECS-to-CodeDeploy Deployment</a> in the <em>AWS CodePipeline User Guide</em>.</li> 
</ol> 
<h2>Conclusion</h2> 
<p>In this post, we showed you how to create a complete, end-to-end continuous deployment (CD) pipeline with Amazon ECR and AWS CodePipeline. You saw how to initiate an AWS CodePipeline pipeline update by uploading a new image to Amazon ECR. Support for Amazon ECR in AWS CodePipeline makes it easier to set up a continuous delivery pipeline and use the AWS Developer Tools for CI/CD.</p>