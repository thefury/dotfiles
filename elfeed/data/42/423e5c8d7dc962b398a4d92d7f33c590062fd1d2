<p><em>This blog was contributed by Zhou Fang, Sr. Software Development Engineer for Amazon&nbsp;CloudWatch and Helen Lin,&nbsp;Sr. Product Manager for Amazon CloudWatch</em></p> 
<p><a href="https://aws.amazon.com/cloudwatch/">Amazon CloudWatch</a>&nbsp;collects monitoring and operational data from both your AWS resources and on-premises servers, providing you with a unified view of your infrastructure and application health. <span id="more-2740"></span>By default, CloudWatch automatically collects and stores many of your AWS services’ metrics and enables you to monitor and alert on metrics such as high CPU utilization of your Amazon EC2 instances. With the <a href="https://aws.amazon.com/blogs/aws/new-amazon-cloudwatch-agent-with-aws-systems-manager-integration-unified-metrics-log-collection-for-linux-windows/">CloudWatch Agent that launched last year</a>, you can also deploy the agent to collect system metrics and application logs from both your Windows and Linux environments. Using this data collected by CloudWatch, you can build operational dashboards to monitor your service and application health, set high-resolution alarms to alert and take automated actions, and troubleshoot issues using Amazon CloudWatch Logs.</p> 
<p><a href="https://aws.amazon.com/about-aws/whats-new/2018/09/amazon-cloudwatch-agent-adds-custom-metrics-support/">We recently introduced</a> CloudWatch Agent support for collecting custom metrics using StatsD and collectd. It’s important to collect system metrics like available memory, and you might also want to monitor custom application metrics. You can use these custom application metrics, such as request count to understand the traffic going through your application or understand latency so you can be alerted when requests take too long to process. <a href="https://github.com/etsy/statsd">StatsD</a> and <a href="https://collectd.org/">collectd</a> are popular, open-source solutions that gather system statistics for a wide variety of applications. By combining the system metrics the agent already collects, with the StatsD protocol for instrumenting your own metrics and collectd’s numerous plugins, you can better monitor, analyze, alert, and troubleshoot the performance of your systems and applications.</p> 
<p>Let’s dive into an example that demonstrates how to monitor your applications using the CloudWatch Agent.&nbsp; I am operating a RESTful service that performs simple text encoding. I want to use CloudWatch to help monitor a few key metrics:</p> 
<ul> 
 <li>How many requests are coming into my service?</li> 
 <li>How many of these requests are unique?</li> 
 <li>What is the typical size of a request?</li> 
 <li>How long does it take to process a job?</li> 
</ul> 
<p>These metrics help me understand my application performance and throughput, in addition to setting alarms on critical metrics that could indicate service degradation, such as request latency.</p> 
<p><strong>Step 1. Collecting StatsD metrics</strong></p> 
<p><a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics">My service</a> is running on an EC2 instance, using Amazon Linux AMI 2018.03.0. Make sure to attach the <em>CloudWatchAgentServerPolicy</em> AWS managed policy so that the CloudWatch agent can collect and publish metrics from this instance:</p> 
<p><img class="alignnone wp-image-2744" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/13/Picture1.png" alt="" width="299" height="164" /></p> 
<p>Here is the service structure:</p> 
<p><img class="alignnone wp-image-2743" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/13/Picture2.png" alt="" width="300" height="322" /></p> 
<p>&nbsp;</p> 
<p>The <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/src/main/java/service/EncodeController.java">“/encode”</a> handler simply returns the base64 encoded string of an input text. &nbsp;To monitor key metrics, such as total and unique request count as well as request size and method response time, I used StatsD to define these custom metrics.</p> 
<div class="hide-language"> 
 <pre><code class="lang-js">@RestController

public class EncodeController {

&nbsp;&nbsp;&nbsp; @RequestMapping(&quot;/encode&quot;)
&nbsp;&nbsp;&nbsp; public String encode(@RequestParam(value = &quot;text&quot;) String text) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long startTime = System.currentTimeMillis();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statsd.incrementCounter(&quot;totalRequest.count&quot;, new String[]{&quot;path:/encode&quot;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statsd.recordSetValue(&quot;uniqueRequest.count&quot;, text, new String[]{&quot;path:/encode&quot;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statsd.recordHistogramValue(&quot;request.size&quot;, text.length(), new String[]{&quot;path:/encode&quot;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String encodedString = Base64.getEncoder().encodeToString(text.getBytes());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statsd.recordExecutionTime(&quot;latency&quot;, System.currentTimeMillis() - startTime, new String[]{&quot;path:/encode&quot;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return encodedString;
&nbsp;&nbsp;&nbsp; }
}</code></pre> 
</div> 
<div class="hide-language"> 
 <div class="hide-language"> 
  <pre><code class="lang-js"></code></pre> 
 </div> 
</div> 
<p>Note that I need to first choose a StatsD client from <a href="https://github.com/etsy/statsd/wiki#client-implementations">here</a>.</p> 
<p>The <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/src/main/java/service/StatusController.java">“/status”</a>&nbsp;handler responds with a health check ping.&nbsp; Here I am monitoring my available JVM memory:</p> 
<div class="hide-language"> 
 <pre><code class="lang-js">@RestController
public class StatusController {

&nbsp;&nbsp;&nbsp; @RequestMapping(&quot;/status&quot;)
&nbsp;&nbsp;&nbsp; public int status() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statsd.recordGaugeValue(&quot;memory.free&quot;, Runtime.getRuntime().freeMemory(), new String[]{&quot;path:/status&quot;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;
&nbsp;&nbsp;&nbsp; }
}</code></pre> 
</div> 
<p>&nbsp;</p> 
<p><strong>Step 2. Emit custom metrics using collectd (optional)</strong></p> 
<p>collectd is another popular, open-source daemon for collecting application metrics. If I want to use the hundreds of available collectd <a href="https://collectd.org/wiki/index.php/Table_of_Plugins">plugins</a> to gather application metrics, I can also use the CloudWatch Agent to publish collectd metrics to CloudWatch for 15-months retention. In practice, I might choose to use either StatsD or collectd to collect custom metrics, or I have the option to use both. All of these use cases &nbsp;are supported by the CloudWatch agent.</p> 
<p>Using the same demo RESTful service, I’ll show you how to monitor my service health using the collectd <a href="https://collectd.org/wiki/index.php/Plugin:cURL">cURL</a> plugin, which passes the collectd metrics to CloudWatch Agent via the <a href="https://collectd.org/wiki/index.php/Plugin:Network">network</a> plugin.</p> 
<p>For my RESTful service, the <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/src/main/java/service/StatusController.java">“/status”</a> handler returns HTTP code 200 to signify that it’s up and running. This is important to monitor the health of my service and trigger an alert when the application does not respond with a HTTP 200 success code. Additionally, I want to monitor the lapsed time for each health check request.</p> 
<p>To collect these metrics using collectd, I have a collectd daemon installed on the EC2 instance, running version <em>5.8.0</em>. Here is my collectd <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/resources/collectd/collectd.conf">config</a>:</p> 
<div class="hide-language"> 
 <pre><code class="lang-js">LoadPlugin logfile
LoadPlugin curl
LoadPlugin network

&lt;Plugin logfile&gt;
  LogLevel &quot;debug&quot;
  File &quot;/var/log/collectd.log&quot;
  Timestamp true
&lt;/Plugin&gt;

&lt;Plugin curl&gt;
    &lt;Page &quot;status&quot;&gt;
        URL &quot;http://localhost:8080/status&quot;;
        MeasureResponseTime true
        MeasureResponseCode true
    &lt;/Page&gt;
&lt;/Plugin&gt;

&lt;Plugin network&gt;
    &lt;Server &quot;127.0.0.1&quot; &quot;25826&quot;&gt;
        SecurityLevel Encrypt
        Username &quot;user&quot;
        Password &quot;secret&quot;
    &lt;/Server&gt;
&lt;/Plugin&gt;</code></pre> 
</div> 
<p>&nbsp;</p> 
<p>For the cURL plugin, I configured it to measure response time (latency) and response code (HTTP status code) from the RESTful service.</p> 
<p>Note that for the network plugin, I used Encrypt mode which requires an authentication file for the CloudWatch Agent to authenticate incoming collectd requests.&nbsp; Click <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/resources/collectd/install.sh">here</a> for full details on the collectd installation script.</p> 
<p>&nbsp;</p> 
<p><strong>Step 3. Configure the CloudWatch agent</strong></p> 
<p>So far, I have shown you how to:</p> 
<p>A.&nbsp; Use StatsD to emit custom metrics to monitor my service health<br /> B.&nbsp; Optionally use collectd to collect metrics using plugins</p> 
<p>Next, I will install and configure the CloudWatch agent to accept metrics from both the StatsD client and collectd plugins.</p> 
<p>I installed the CloudWatch Agent following the instructions in the user guide, but here are the detailed steps:</p> 
<p><em>Install CloudWatch Agent:</em></p> 
<div class="hide-language"> 
 <pre><code class="lang-js">wget https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip -O AmazonCloudWatchAgent.zip &amp;&amp; unzip -o AmazonCloudWatchAgent.zip &amp;&amp; sudo ./install.sh</code></pre> 
</div> 
<p><em>Configure CloudWatch Agent to receive metrics from StatsD and collectd:</em></p> 
<div class="hide-language"> 
 <pre><code class="lang-json">{
&nbsp; &quot;metrics&quot;: {
&nbsp;&nbsp;&nbsp; &quot;append_dimensions&quot;: {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;AutoScalingGroupName&quot;: &quot;${aws:AutoScalingGroupName}&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InstanceId&quot;: &quot;${aws:InstanceId}&quot;
&nbsp;&nbsp;&nbsp; },
&nbsp;&nbsp;&nbsp; &quot;metrics_collected&quot;: {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;collectd&quot;: {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;statsd&quot;: {}
&nbsp;&nbsp;&nbsp; }
&nbsp; }
}</code></pre> 
</div> 
<p><em>Pass the above config (<a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/resources/amazon-cloudwatch-agent/config.json">config.json</a>) to the CloudWatch Agent:</em></p> 
<div class="hide-language"> 
 <pre><code class="lang-json">sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:config.json -s</code></pre> 
</div> 
<p>In case you want to skip these steps and just execute my sample agent install script, you can find it <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/resources/amazon-cloudwatch-agent/install.sh">here</a>.</p> 
<p>&nbsp;</p> 
<p><strong>Step 4. Generate and monitor application traffic in CloudWatch</strong></p> 
<p>Now that I have the CloudWatch agent installed and configured to receive StatsD and collect metrics, I’m going to <a href="https://github.com/aws-samples/cloudwatch-agent-demo-custom-metrics/blob/master/resources/demo-rest-service/sendRequest.sh">generate</a> traffic through the service:</p> 
<div class="hide-language"> 
 <pre><code class="lang-js">echo &quot;send 100 requests&quot;
for i in {1..100}
do
&nbsp;&nbsp; curl &quot;localhost:8080/encode?text=TextToEncode_${i}_@#%&quot;
&nbsp;&nbsp; echo &quot;&quot;
&nbsp;&nbsp; sleep 1
done</code></pre> 
</div> 
<p>&nbsp;</p> 
<p>Next, I log in to the CloudWatch console and check that the service is up and running. Here’s a graph of the StatsD metrics:</p> 
<p><img class="alignnone wp-image-2742 " src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/13/Picture3.png" alt="" width="311" height="136" /></p> 
<p>&nbsp;</p> 
<p>Here is a graph of the collectd metrics:</p> 
<p><img class="alignnone wp-image-2741 " src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/13/Picture4.png" alt="" width="310" height="113" /></p> 
<p>&nbsp;</p> 
<p><strong>Conclusion</strong></p> 
<p>With StatsD and collectd support, you can now use the CloudWatch Agent to collect and monitor your custom applications in addition to the system metrics and application logs it already collects. Furthermore, you can create operational dashboards with these metrics, set alarms to take automated actions when free memory is low, and troubleshoot issues by diving into the application logs.&nbsp; Note that StatsD supports both Windows and Linux operating systems while collectd is Linux only.&nbsp; For Windows, you can also continue to use Windows Performance Counters to collect custom metrics instead.</p> 
<p>The CloudWatch Agent with custom metrics support (version 1.203420.0 or later) is available in all public AWS Regions, AWS GovCloud (US),&nbsp;with AWS China (Beijing) and AWS China (Ningxia) coming soon.</p> 
<p>The agent is free to use; you pay the usual&nbsp;<a href="https://aws.amazon.com/cloudwatch/pricing/">CloudWatch prices</a>&nbsp;for logs and custom metrics.</p> 
<p>For more details, head over to the CloudWatch user guide for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-custom-metrics-statsd.html">StatsD</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-custom-metrics-collectd.html">collectd</a>.</p>