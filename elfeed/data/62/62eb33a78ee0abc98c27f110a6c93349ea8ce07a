<p>Data warehousing is a critical component for analyzing and extracting actionable insights from your data. <a href="https://aws.amazon.com/redshift/" target="_blank" rel="noopener">Amazon Redshift</a> is a fast, scalable data warehouse that makes it cost-effective to analyze all of your data across your data warehouse and data lake.</p> 
<p>The Amazon Redshift console recently launched the <em>Query Editor</em>. The Query Editor is an in-browser interface for running SQL queries on Amazon Redshift clusters directly from the AWS Management Console. Using the Query Editor is the most efficient way to run queries on databases hosted by your Amazon Redshift cluster.</p> 
<p>After creating your cluster, you can use the Query Editor immediately to run queries on the Amazon Redshift console. It’s a great alternative to connecting to your database with external JDBC/ODBC clients.</p> 
<p>In this post, we show how you can run SQL queries for loading data in clusters and monitoring cluster performance directly from the console.</p> 
<h2>Using the Query Editor instead of your SQL IDE or tool</h2> 
<p>The Query Editor provides an in-browser interface for running SQL queries on Amazon Redshift clusters. For queries that are run on compute nodes, you can then view the query results and query execution plan next to your queries.</p> 
<p>The ability to visualize queries and results in a convenient user interface lets you accomplish many tasks, both as a database administrator and a database developer. The visual Query Editor helps you do the following:</p> 
<ul> 
 <li>Build complex queries.</li> 
 <li>Edit and run queries.</li> 
 <li>Create and edit data.</li> 
 <li>View and export results.</li> 
 <li>Generate EXPLAIN plans on your queries.</li> 
</ul> 
<p>With the Query Editor, you can also have multiple SQL tabs open at the same time. Colored syntax, query autocomplete, and single-step query formatting are all an added bonus!</p> 
<p>Database administrators typically maintain a repository of commonly used SQL statements that they run regularly. If you have this written in a notepad somewhere, the saved queries feature is for you. This feature lets you save and reuse your commonly run SQL statements in one step. This makes it efficient for you to review, rerun, and modify previously run SQL statements. The Query Editor also has an exporter so that you can export the query results into a CSV format.</p> 
<p>The Query Editor lets you perform common tasks, such as creating a schema and table on the cluster and loading data in tables. These common tasks are now possible with a few simple SQL statements that you run directly on the console. You can also do day-to-day administrative tasks from the console. These tasks can include finding long-running queries on the cluster, checking for potential deadlocks with long-running updates on a cluster, and checking for how much space is available in the cluster.</p> 
<p>The Query Editor is available in 16 AWS Regions. It’s available on the Amazon Redshift console at no extra cost to you. Standard Amazon Redshift rates apply for your cluster usage and for Amazon Redshift Spectrum. To learn more, see <a href="https://aws.amazon.com/redshift/pricing/" target="_blank" rel="noopener">Amazon Redshift pricing</a>.</p> 
<h2>Let’s get started with the Query Editor</h2> 
<p>The following sections contain the steps for setting up your Amazon Redshift cluster with a sample dataset from an <a href="https://aws.amazon.com/s3/" target="_blank" rel="noopener">Amazon S3</a> bucket using the Query Editor directly from the console. For new users, this is an especially handy alternative to setting up JDBC/ODBC clients to establish a connection to your cluster. If you already have a cluster, you can complete these steps in 10 minutes or less.</p> 
<p>In the following example, you use the Query Editor to perform these tasks:</p> 
<ul> 
 <li>Load a sample dataset in your cluster.</li> 
 <li>Run SQL queries on a sample dataset and view results and execution details.</li> 
 <li>Run administration queries on system tables and save frequently used queries.</li> 
 <li>Run SQL queries to join an internal and external table.</li> 
</ul> 
<p>Use the following steps to set up your cluster for querying:</p> 
<ol> 
 <li>On the Amazon Redshift console, create a cluster.For detailed steps, see the procedure described in <a href="https://docs.aws.amazon.com/redshift/latest/gsg/rs-gsg-launch-sample-cluster.html" target="_blank" rel="noopener">Launch a Sample Amazon Redshift Cluster</a> in the <em>Amazon Redshift Getting Started Guide</em>. Use any of the following currently supported node types: dc1.8xlarge, dc2.large, dc2.8xlarge, or ds2.8xlarge.For this post, we used the <strong>Quick launch cluster</strong> button on the Amazon Redshift dashboard to create a single-node, dc2.large cluster called demo-cluster in the us-east-1 Region. As you go through the tutorial, replace this cluster name with the name of the cluster that you launched, and the Region where you launched the cluster.</li> 
</ol> 
<p style="padding-left: 30px"><img class="alignnone size-full wp-image-6884" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor1.png" alt="" width="800" height="526" /></p> 
<ol start="2"> 
 <li>Add Query Editor-related permissions to the AWS account.To access the Query Editor feature on the console, you need permissions. For detailed steps, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/query-editor.html#query-cluster-configure" target="_blank" rel="noopener">Enabling Access to the Query Editor</a> in the <em>Amazon Redshift Cluster Management Guide</em>.</li> 
</ol> 
<ol start="3"> 
 <li>To load and run queries on a sample dataset (including permissions to load data from S3 or to use the <a href="https://aws.amazon.com/glue/">AWS Glue</a> or <a href="https://aws.amazon.com/athena/" target="_blank" rel="noopener">Amazon Athena</a> Data Catalogs), follow these steps:a. To load sample data from Amazon S3 using the COPY command, you must provide authentication for your cluster to access Amazon S3 on your behalf. Sample data for this procedure is provided in an Amazon S3 bucket that is owned by Amazon Redshift. The bucket permissions are configured to allow all authenticated AWS users read access to the sample data files.To perform this step:</li> 
</ol> 
<p style="padding-left: 90px">• Attach the AmazonS3ReadOnlyAccess policy to the IAM role. The AmazonS3ReadOnlyAccess policy grants your cluster read-only access to all Amazon S3 buckets.</p> 
<p style="padding-left: 90px">• If you’re using the AWS Glue Data Catalog, attach the AWSGlueConsoleFullAccess policy to the IAM role. If you’re using the Athena Data Catalog, attach the AmazonAthenaFullAccess policy to the IAM role.</p> 
<p style="padding-left: 30px">b. In <a href="_Prepare">step 2 of the example</a>, you run the COPY command to load the sample data. The COPY command includes a placeholder for the IAM role Amazon Resource Name (ARN). To load sample data, add the role ARN in the COPY The following is a sample COPY command:</p> 
<div class="hide-language"> 
 <pre style="padding-left: 30px"><code class="lang-code">COPY myinternalschema.event FROM 's3://aws-redshift-spectrum-sample-data-us-east-1/spectrum/event/allevents_pipe.txt'
iam_role ‘REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN'
delimiter '|' timeformat 'YYYY-MM-DD HH:MI:SS' region 'us-east-1';</code></pre> 
</div> 
<p>After you complete these steps, your Amazon Redshift cluster is ready. The following sections describe three steps that demonstrate what you can do with the Query Editor:</p> 
<ul> 
 <li>Use the Query Editor for loading data.</li> 
 <li>Perform several day-to-day administration tasks.</li> 
 <li>Run a query on data stored in the Amazon Redshift cluster and Amazon S3 data lake, with no need for loading or other data preparation.</li> 
</ul> 
<h2>Step 1: Connect to your cluster in the Query Editor</h2> 
<p>To connect to your cluster:</p> 
<ol> 
 <li>Using the left navigation pane on the Amazon Redshift console, navigate to the Query Editor.</li> 
 <li>In the <strong>Credentials</strong> dialog box, in the <strong>Cluster</strong> drop-down list, choose the cluster name (demo-cluster). Choose the database and the database user for this cluster.</li> 
 <li>If you created the cluster by using the service-provided default values, choose <strong>dev</strong> as your <strong>Database</strong> selection, and enter <strong>awsuser</strong> in the <strong>Database</strong> user box.</li> 
 <li>Enter the password for the cluster. Commonly, Amazon Redshift database users log on by providing a database user name and password. As an alternative, if you don’t remember your password, you can retrieve it in an encrypted format by choosing <strong>Create a temporary password</strong>, as shown in the following example. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html" target="_blank" rel="noopener">Using IAM Authentication to Generate Database User Credentials</a>.</li> 
</ol> 
<p style="padding-left: 30px"><img class="alignnone size-full wp-image-6886" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor2_1.png" alt="" width="600" height="477" /></p> 
<p style="padding-left: 30px">This connects to the cluster if you have Query Editor-related permissions for the AWS account. For more information, see the step to add the Query Editor-related permissions to the AWS account in the previous section.</p> 
<h2>Step 2: Prepare the cluster with a sample dataset</h2> 
<p>To prepare the cluster with a sample dataset:</p> 
<ol> 
 <li>Run the following SQL in the Query Editor. This creates the schema myinternalschema in the Amazon Redshift cluster demo-cluster<em>.</em></li> 
</ol> 
<div class="hide-language"> 
 <pre style="padding-left: 30px"><code class="lang-sql">/* Create a schema */
CREATE SCHEMA myinternalschema</code></pre> 
</div> 
<p style="padding-left: 30px"><img class="alignnone size-full wp-image-6887" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor3.png" alt="" width="800" height="422" /></p> 
<ol start="2"> 
 <li>Run the following SQL statement in the Query Editor to create a table for schema myinternalschema.</li> 
</ol> 
<div class="hide-language"> 
 <pre style="padding-left: 30px"><code class="lang-sql">/* Create table */
CREATE TABLE myinternalschema.event(
	eventid integer not null distkey,
	venueid smallint not null,
	catid smallint not null,
	dateid smallint not null sortkey,
	eventname varchar(200),
	starttime timestamp);</code></pre> 
</div> 
<ol start="3"> 
 <li>Run the following SQL statement with the COPY command to copy the sample dataset from Amazon S3 to your Amazon Redshift cluster, demo-cluster, in the us-east-1 The Amazon S3 path for the sample dataset is s3://aws-redshift-spectrum-sample-data-us-east-1/spectrum/event/allevents_pipe.txt.</li> 
</ol> 
<p style="padding-left: 30px">Before choosing <strong>Run Query</strong>, remember to replace the placeholder in the example with the ARN for the IAM role that is associated with this AWS account. If your cluster is in another AWS Region, replace the Region in the region parameter and the Amazon S3 path, as shown in the following SQL command:</p> 
<div class="hide-language"> 
 <pre style="padding-left: 30px"><code class="lang-sql">/* Load data */
COPY myinternalschema.event FROM 's3://aws-redshift-spectrum-sample-data-us-east-1/spectrum/event/allevents_pipe.txt'
iam_role ‘REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN'
delimiter '|' timeformat 'YYYY-MM-DD HH:MI:SS' region 'us-east-1';</code></pre> 
</div> 
<ol start="4"> 
 <li>To ensure access to the public dataset in Amazon S3, make sure that this AWS account has the correct permissions to access Amazon S3, AWS Glue, and Athena. For more information, see the step to load and run queries on the sample dataset (Amazon S3 and AWS Glue/Amazon Athena Data Catalog permissions) earlier in this post.</li> 
 <li>To verify the data in the previously created table in the Query Editor, browse through the tables in the schema viewer on the left. Choose the preview icon next to the table name to see the first 10 records from the event table. Choosing this option runs the following query for a preview of the table, displaying 10 rows from the table:</li> 
</ol> 
<div class="hide-language"> 
 <pre style="padding-left: 30px"><code class="lang-sql">/* View a snippet of the same dataset in myinternalschema */ 
SELECT * FROM myinternalschema.event
LIMIT 10;
</code></pre> 
</div> 
<p style="padding-left: 30px">You can also enter your own SQL statements. Use <strong>Ctrl + Space </strong>to autocomplete queries in the Query Editor, to verify the data in the table that you created.</p> 
<p style="padding-left: 30px"><img class="alignnone size-full wp-image-6888" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor4.png" alt="" width="800" height="423" /></p> 
<h2>Step 3: Helpful cluster management queries</h2> 
<p>You are all set to try Amazon Redshift! In day-to-day cluster management and monitoring, you can run the following SQL queries in the Query Editor. These frequently used queries let you find and shut down long-running queries, uncover deadlock situations, and check for available disk space on your Amazon Redshift cluster. Save these queries and get convenient access to them by choosing <strong>Saved queries</strong> in the left navigation on the console, as shown in the following example:</p> 
<p><img class="alignnone size-full wp-image-6889" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor5.png" alt="" width="800" height="500" /></p> 
<h3>Kill malfunctioning or long-running queries on a cluster</h3> 
<p>If there is a malfunctioning query that must be shut down, locating the query can often be a multi-step process. Run the following SQL in the Query Editor to find all queries that are running on an Amazon Redshift cluster with a SQL statement:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* Queries are currently in progress */ 
SELECT
userid
 , query
 , pid
 , starttime
 , left(text, 50) as text
FROM pg_catalog.stv_inflight</code></pre> 
</div> 
<p>After locating the malfunctioning queries from the query result set, use the cancel &lt;pid&gt; &lt;msg&gt; command to kill a query. Be sure to use the process ID—pid in the previous SQL—and not the query ID. You can supply an optional message that is returned to the issuer of the query and logged.</p> 
<h3>Monitor disk space being used on a cluster</h3> 
<p>One of the most frequently used console functions is monitoring the percentage of disk space used by a cluster. Queries fail if there is limited space in the cluster to create temp tables used while the query is running. Vacuums can also fail if the cluster does not have free space to store intermediate data in the cluster restore process. Monitoring this metric is important for planning ahead before the cluster gets full and you have to resize or add more clusters.</p> 
<p>If you suspect that you are experiencing high or full disk usage with Amazon Redshift, run the following SQL in the Query Editor to find disk space available and see individual table sizes on the cluster:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* Disk space available on your Redshift cluster */
SELECT SUM(used)::float / SUM(capacity) as pct_full
FROM pg_catalog.stv_partitions
 
/* Find individual table sizes */
SELECT t.name, COUNT(tbl) / 1000.0 as gb
FROM (
SELECT DISTINCT id, name FROM stv_tbl_perm
) t
JOIN stv_blocklist ON tbl=t.id
GROUP BY t.name ORDER BY gb DESC</code></pre> 
</div> 
<p>From here, you can either drop the unnecessary tables or resize your cluster to have more capacity. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html" target="_blank" rel="noopener">Resizing Clusters in Amazon Redshift</a>.</p> 
<h3>Watch for deadlock situations with suspiciously long-running updates on the cluster</h3> 
<p>If a cluster has a suspiciously long-running update, it might be in a deadlocked transaction. The stv_locks table indicates any transactions that have locks, along with the process ID of the relevant sessions. This pid can be passed to pg_terminate_backend(pid) to kill the offending session.</p> 
<p>Run a SQL statement in the Query Editor to inspect the locks:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">\/* Find all transactions that have locks along with the process id of the relevant sessions */ 
select 
  table_id, 
  last_update, 
  last_commit, 
  lock_owner_pid, 
  lock_status 
FROM pg_catalog.stv_locks 
ORDER BY last_update asc</code></pre> 
</div> 
<p>To shut down the session, run select pg_terminate_backend(lock_owner_pid), using the value from stl_locks.</p> 
<h3>See the rows affected by the most recent vacuums of the cluster</h3> 
<p>By running a vacuum command on tables in the cluster, any free space because of delete and update operations is reclaimed. At the same time, the data of the table gets sorted. The result is a compact and sorted table, which improves the cluster performance.</p> 
<p>Run the following SQL statement to see a count of rows that were deleted or resorted from the most recent vacuums from the svv_vacuum_summary table:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* Deleted or restored rows from most recent vacuums */
select * from svv_vacuum_summary
where table_name = 'events'</code></pre> 
</div> 
<h3>Debug connection issues for Amazon Redshift clusters</h3> 
<p>Joining stv_sessions and stl_connection_log tables returns a list of all sessions (all connects, authenticates, and disconnects on the cluster) and the respective remote host and port information.</p> 
<p>To list all connections, run the following SQL statement in the Query Editor:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* List connections, along with remote host information */ 
SELECT DISTINCT
 starttime,
 process,
 user_name,
 '169.254.21.1' remotehost,
 remoteport
FROM stv_sessions
LEFT JOIN stl_connection_log ON pid = process
  AND starttime &gt; recordtime - interval '1 second'
ORDER BY starttime DESC</code></pre> 
</div> 
<p>Use the <em>saved queries</em> feature to save these commonly used SQL statements in your account and run them in the Query Editor with one click.</p> 
<h2>Bonus step 4: Query with Amazon Redshift Spectrum</h2> 
<p>With <a href="https://docs.aws.amazon.com/redshift/latest/dg/c-getting-started-using-spectrum.html" target="_blank" rel="noopener">Amazon Redshift Spectrum,</a> you can query data in Amazon S3 without the need to first load it into Amazon Redshift. Amazon Redshift Spectrum queries employ massive parallelism to quickly process large datasets in S3, without ingesting that data into Amazon Redshift. Much of the processing occurs in the Amazon Redshift Spectrum layer. Multiple clusters can concurrently query the same dataset in Amazon S3 without needing to make copies of the data for each cluster.</p> 
<p>To get set up with Amazon Redshift Spectrum, run the following SQL statements in the Query Editor for demo-cluster<em>. </em>If your cluster is in another AWS Region, be sure to replace the Region in the region parameter and the Amazon S3 path in the following SQL statement.</p> 
<p>To create a new schema from a data catalog to use with Amazon Redshift Spectrum:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* Create external (Amazon S3) schema */
CREATE EXTERNAL SCHEMA myexternalschema
from data catalog
database 'myexternaldatabase'
region 'us-east-1'
iam_role 'REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN' 
create external database if not exists;</code></pre> 
</div> 
<p>To create a table for the Amazon Redshift Spectrum S3 sample dataset:</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* Create external table */
CREATE EXTERNAL TABLE myexternalschema.sales(
salesid integer,
listid integer,
sellerid integer,
buyerid integer,
eventid integer,
dateid smallint,
qtysold smallint, pricepaid decimal(8,1), commission decimal(8,1), saletime timestamp)
row format delimited
fields terminated by '\t'
stored as textfile
location 's3://aws-redshift-spectrum-sample-data-us-east-1/spectrum/sales/' 
table properties ('numRows'='171000');</code></pre> 
</div> 
<h2>Start querying!</h2> 
<p>This section provides an example scenario to start querying data from the external (Amazon S3) sales table and the internal (Amazon Redshift) event table. The join query in this scenario looks for all events (from the sales dataset loaded on the demo-cluster) with the sale price paid &gt; 50 (from the Amazon Redshift Spectrum dataset in Amazon S3, s3://aws-redshift-spectrum-sample-data-us-east-1/spectrum/sales/).</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">/* Join a table from the sample dataset with a Spectrum table */
/* Join external (Amazon S3) and internal (Amazon Redshift) table */
SELECT
    myexternalschema.sales.eventid,
    sum(myexternalschema.sales.pricepaid)   
from
    myexternalschema.sales,
    myinternalschema.event  
where
    myexternalschema.sales.eventid = myinternalschema.event.eventid       
    and myexternalschema.sales.pricepaid &gt; 50  
group by
    myexternalschema.sales.eventid  
order by
    1 desc;</code></pre> 
</div> 
<p>In the <strong>Query results</strong> section, choose <strong>View execution</strong> to see the detailed execution plan. The query plan is available for all queries executed on compute nodes.</p> 
<p><strong>Note</strong>: Queries that do not reference user tables, such as administration queries that only use catalog tables, do not have an available query plan.</p> 
<p>Optionally, download the query results to your local disk for offline use. Queries run for up to three minutes in the Query Editor. After a query is completed, the Query Editor provides two minutes to fetch results. Rerun the query and try again if you hit the two-minute threshold.</p> 
<p><img class="alignnone size-full wp-image-6890" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor6.png" alt="" width="800" height="499" /></p> 
<p>Load additional tables from the Amazon Redshift sample dataset by using the following SQL statements and get creative with your queries. Before choosing <strong>Run query</strong> in the Query Editor, remember to add the ARN for the IAM role that is associated with this AWS account in the placeholder in the following SQL statement. If your cluster is in another AWS Region, replace the Region in the region parameter and the Amazon S3 path in the following SQL statement.</p> 
<div class="hide-language"> 
 <pre><code class="lang-sql">copy users from 's3://awssampledbuswest2/tickit/allusers_pipe.txt' 
credentials 'aws_iam_role=REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN' 
delimiter '|' region 'us-west-2';

copy venue from 's3://awssampledbuswest2/tickit/venue_pipe.txt' 
credentials 'aws_iam_role=REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN' 
delimiter '|' region 'us-west-2';

copy category from 's3://awssampledbuswest2/tickit/category_pipe.txt' 
credentials 'aws_iam_role=REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN' 
delimiter '|' region 'us-west-2';

copy date from 's3://awssampledbuswest2/tickit/date2008_pipe.txt' 
credentials 'aws_iam_role= REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN' 
delimiter '|' region 'us-west-2';

copy listing from 's3://awssampledbuswest2/tickit/listings_pipe.txt' 
credentials 'aws_iam_role= REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN' 
delimiter '|' region 'us-west-2';

copy sales from 's3://awssampledbuswest2/tickit/sales_tab.txt'
credentials 'aws_iam_role= REPLACE THIS PLACEHOLDER WITH THE IAM ROLE ARN'
delimiter '\t' timeformat 'MM/DD/YYYY HH:MI:SS' region 'us-west-2';</code></pre> 
</div> 
<h2>Summary</h2> 
<p>In this post, we introduced the Query Editor, an in-browser interface for running SQL queries on Amazon Redshift clusters. We showed how you can use it to run SQL queries for loading data in clusters and monitoring cluster performance directly on the console. To learn more about Amazon Redshift and start with Query Editor, visit the&nbsp;<a href="https://aws.amazon.com/redshift/" target="_blank" rel="noopener">Amazon Redshift webpage</a>.</p> 
<p>If you like this feature, share your feedback by using the <strong>Send feedback</strong> link on the console, as shown following.</p> 
<p><img class="alignnone size-full wp-image-6891" style="margin: 20px 0px 20px 0px;border: 1px solid #cccccc" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RedshiftQueryEditor7.png" alt="" width="800" height="499" /></p> 
<p>If you have any questions or suggestions, please leave a comment below.</p> 
<p>Happy querying!</p> 
<p>&nbsp;</p> 
<hr /> 
<h3>About the Authors</h3> 
<p><strong><img class="size-full wp-image-6917 alignleft" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/10/surbd.png" alt="" width="113" height="148" />Surbhi Dangi is a senior product/design manager at AWS. </strong>Her work includes&nbsp;building user experiences for Database, Analytics &amp; AI AWS consoles, launching new database and analytics products, working on new feature launches for existing products, and building broadly adopted internal tools for AWS teams. She enjoys traveling to new destinations to discover new cultures, trying new cuisines, and teaches product management 101 to aspiring PMs.</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p> 
<p><strong><img class="size-full wp-image-6895 alignleft" src="https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2019/05/03/RajaB.png" alt="" width="113" height="145" />Raja Bhogi is an engineering manager at AWS. </strong>He is responsible for building delightful and easy-to-use web experiences for analytics and blockchain products. His work includes launching web experiences for new analytics products, and working on new feature launches for existing products. He is passionate about web technologies, performance insights, and tuning. He is a thrill seeker and enjoys everything from roller coasters to bungy jumping.</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p>