<p>Notifications are an important part of DevOps workflows. Although you can set them up from any stage in the CI or CD pipelines, in this blog post, I will show you how to integrate <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> and <a href="https://aws.amazon.com/sns/">Amazon SNS</a> to extend <a href="https://aws.amazon.com/codecommit/">AWS CodeCommit</a>. Specifically, the solution described in this post&nbsp;makes it possible for you to receive detailed notifications from Amazon SNS about file changes and commit messages when an update is pushed to AWS CodeCommit.</p> 
<p><span id="more-3028"></span></p> 
<p><a href="https://aws.amazon.com/sns/">Amazon SNS</a>&nbsp;is a flexible, fully managed notifications service. It coordinates the delivery of messages to receivers. With Amazon SNS, you can fan out messages to a large number of subscribers, including distributed systems and services, and mobile devices. It is easy to set up, operate, and reliably send notifications to all your endpoints – at any scale.</p> 
<p><a href="https://aws.amazon.com/lambda/">AWS Lambda</a>&nbsp;is our popular serverless service that lets you run code without provisioning or managing servers. In the example used in this post, I use a Lambda function to publish a topic through Amazon SNS to get an update notification.</p> 
<p><a href="https://aws.amazon.com/cloudwatch">Amazon CloudWatch</a> is a monitoring and management service. It can collect operational data of AWS resources in the form of events. <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-Rule.html">You can set up simple rules in Amazon CloudWatch to detect changes to your AWS resources.</a> After CloudWatch captures the update event from your AWS resources, it can trigger specific targets to perform other actions (for example, to invoke a Lambda function).</p> 
<p>To help you quickly deploy the solution, I have created an <a href="https://aws.amazon.com/cloudformation/">AWS CloudFormation</a> template.&nbsp;<a href="https://aws.amazon.com/cloudformation/">AWS CloudFormation</a>&nbsp;is a management tool that provides a common language to describe and provision all of the infrastructure resources in AWS.</p> 
<p>&nbsp;</p> 
<h2>Overview</h2> 
<p>The following diagram shows how to use AWS services to receive the CodeCommit file change event and details.</p> 
<p><img class="alignnone wp-image-3035 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/architecture.png" alt="" width="1522" height="600" /></p> 
<p>AWS CodeCommit supports several useful <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#codecommit_event_type">CloudWatch events</a>, which can notify you of changes&nbsp;to AWS resources. By setting up simple rules, you can detect branch or repository changes. In this example, I create a CloudWatch event rule for an AWS CodeCommit repository so that any designated event invokes a Lambda function. When a change is made to the CodeCommit repository, CloudWatch detects the event and invokes the customized Lambda function.</p> 
<p>When this Lambda function is triggered, the following steps are executed:</p> 
<ol> 
 <li>Use the <a href="https://docs.aws.amazon.com/codecommit/latest/APIReference/API_GetCommit.html">GetCommit</a> operation in the CodeCommit API to get the latest commit. I want to compare the parent&nbsp;commit IDs with the last commit.</li> 
 <li>For each commit, use the <a href="https://docs.aws.amazon.com/codecommit/latest/APIReference/API_GetDifferences.html">GetDifferences</a>&nbsp;operation to get a list of each file that was added, modified, or deleted.</li> 
 <li>Group the modification information from the comparison result&nbsp;and publish the message template to an SNS topic defined in the Lambda environment variable.</li> 
 <li>Allow reviewers to subscribe to the SNS topic. Any update message from CodeCommit is published to subscribers.</li> 
</ol> 
<p>I’ve used Python and <a href="https://boto3.readthedocs.io/">Boto 3</a> to implement this function. The full source code has been published on GitHub. You can find the example in <a href="https://github.com/aws-samples/aws-codecommit-file-change-publisher">aws-codecommit-file-change-publisher</a> repository.</p> 
<p>&nbsp;</p> 
<h2>Getting started</h2> 
<p>There is an AWS CloudFormation template, <strong>codecommit-sns-publisher.yml</strong>, in the source code. This template uses the&nbsp;<a href="https://github.com/awslabs/serverless-application-model">AWS Serverless Application Model</a>&nbsp;to define required components of the CodeCommit notification serverless application in simple and clean syntax.</p> 
<p>The template is translated to an AWS CloudFormation stack and deploys an SNS topic, CloudWatch event rule,&nbsp;and Lambda function. The Lambda function code already demonstrates a simple notification use case. You can use the sample code to define your own logic and extend the function by using other APIs provided in the <a href="https://aws.amazon.com/sdk-for-python/">AWS SDK for Python (Boto3)</a>.</p> 
<h3>Prerequisites</h3> 
<p>Before you deploy this example, you must use the AWS CloudFormation template to <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-create-repository.html">create a CodeCommit repository</a>. In this example, I have created an empty repository, sample-repo, in the Ohio (us-east-2) Region to demonstrate a scenario in which your repository has a file change or other update on a CodeCommit branch. If you already have a CodeCommit repository, follow these steps to deploy the template and Lambda function.</p> 
<p><strong>To deploy the AWS CloudFormation template and Lambda function</strong></p> 
<p>1. Download the source code from the&nbsp;<a href="https://github.com/aws-samples/aws-codecommit-file-change-publisher">aws-codecommit-file-change-publisher</a> repository.</p> 
<p>2. Sign in to the AWS Management Console and <a href="https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/getting-started.html#select-region">choose the AWS Region</a> where your CodeCommit repository is located. Create an S3 bucket and then upload the AWS Lambda&nbsp;deployment package, <strong>codecommit-sns-publisher.zip</strong>, to it. For information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-bucket.html">How Do I Create an S3 Bucket?</a> in the Amazon S3 Console User Guide.</p> 
<p>3. Upload the Lambda&nbsp;deployment package to the S3 bucket.</p> 
<p>In this example, I created an S3 bucket named&nbsp;<strong>codecommit-sns-publisher</strong>&nbsp;in the Ohio (us-east-2) Region and uploaded the deployment package from the Amazon S3 console.</p> 
<p><img class="alignnone wp-image-3042 size-full" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/upload-lambda-package-to-s3-bucket.png" alt="" width="1796" height="763" /></p> 
<p>4. In the AWS Management Console, choose CloudFormation. You can also open the AWS CloudFormation console directly at <a href="https://console.aws.amazon.com/cloudformation">https://console.aws.amazon.com/cloudformation</a>.</p> 
<p>5. Choose <strong>Create Stack</strong>.</p> 
<p>6. On the <strong>Select Template</strong> page, choose&nbsp;<strong>Upload a template to Amazon S3</strong>,&nbsp;and then choose the&nbsp;<strong>codecommit-sns-publisher.yml</strong> template.</p> 
<p><img class="alignnone size-full wp-image-3041" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/upload-cfn-template.png" alt="" width="1340" height="595" /></p> 
<p>7. Specify the following parameters:</p> 
<ul> 
 <li><strong>Stack Name</strong>:&nbsp;codecommit-sns-publisher (You can use your own stack name, if you prefer.)</li> 
 <li><strong>CodeS3BucketLocation</strong>: codecommit-sns-publisher (This is the S3 bucket name where you put the sample code.)</li> 
 <li><strong>CodeS3KeyLocation</strong>: codecommit-sns-publisher.zip (This is the key name of the sample code S3 object. The object should be a zip file.)</li> 
 <li><strong>CodeCommitRepo</strong>: sample-repo (The name of your CodeCommit repository.)</li> 
 <li><strong>MainBranchName</strong>: master (Specify the branch name you would like to use as a trigger for publishing an SNS topic.)</li> 
 <li><strong>NotificationEmailAddress</strong>: user@example.com&nbsp;(This is the email address you would like to use to subscribe to the SNS topic. The CloudFormation template creates an SNS topic to publish notifications to subscribers.)</li> 
</ul> 
<p><img class="alignnone size-full wp-image-3040" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/cfn-typing-parameters.png" alt="" width="1168" height="551" /></p> 
<p>8. Choose&nbsp;<strong>Next</strong>.</p> 
<p>9. On the <strong>Review</strong> page, under&nbsp;<strong>Capabilities</strong>, choose the following options:</p> 
<ul> 
 <li><strong>I acknowledge that AWS CloudFormation might create IAM resources.</strong></li> 
 <li><strong>I acknowledge that AWS CloudFormation might create IAM resources with custom names.</strong></li> 
</ul> 
<p><img class="alignnone size-full wp-image-3038" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/cfn-create-change-set-acknowledgement.png" alt="" width="1561" height="297" /></p> 
<p>10.&nbsp;Under&nbsp;<strong>Transforms</strong>, choose&nbsp;<strong>Create Change Set</strong>. AWS CloudFormation starts to perform the template transformation and then creates a change set.</p> 
<p><img class="alignnone size-full wp-image-3039" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/cfn-create-change-set-transforms.png" alt="" width="1557" height="226" /></p> 
<p>11. After the transformation, choose&nbsp;<strong>Execute</strong> to create the AWS CloudFormation stack.</p> 
<p><img class="alignnone size-full wp-image-3043" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/preview-change-set.png" alt="" width="1579" height="935" /></p> 
<p>After the stack has been created, you should receive&nbsp;an SNS subscription confirmation in your email account:</p> 
<p><img class="alignnone size-full wp-image-3044" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/sns-subscribe.png" alt="" width="549" height="259" /></p> 
<p>After you subscribe to the SNS topic, you can go to the AWS&nbsp;CloudFormation console and check the created AWS resources. If you would like to monitor the Lambda function, choose&nbsp;<strong>Resource</strong> to open the SNSPublisherFunction Lambda function.</p> 
<p><img class="alignnone size-full wp-image-3045" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2019/02/28/create-cfn-stackCWE.png" alt="" width="1880" height="795" /></p> 
<p>Now, you can try to push a commit&nbsp;to the remote AWS CodeCommit repository.</p> 
<p>1. Clone the CodeCommit repository to&nbsp;your local computer. For information, see <a href="https://docs.aws.amazon.com/en_us/codecommit/latest/userguide/how-to-connect.html">Connect to an AWS CodeCommit Repository</a> in the AWS CodeCommit User Guide. The following example shows how to clone a repository named <strong>sample-repo</strong> in the US East (Ohio) Region:</p> 
<pre><code class="lang-bash">git clone ssh://git-codecommit.us-east-2.amazonaws.com/v1/repos/sample-repo</code></pre> 
<p>2. Enter the folder and create a plain text file:</p> 
<pre><code class="lang-bash">cd&nbsp;sample-repo/
echo&nbsp;'This is a sample file' &gt;&nbsp;newfile</code></pre> 
<p>3. Add and commit this file change:</p> 
<pre><code class="lang-bash">git add&nbsp;newfile
git commit&nbsp;-m 'Create initial file'</code></pre> 
<p>Look for this output:</p> 
<div class="hide-language"> 
 <pre><code class="lang-bash">[master (root-commit) 810d192] Create initial file
1 file changed, 1 insertion(+)
create mode 100644 newfile</code></pre> 
</div> 
<p>4. Push the commit to the&nbsp;remote CodeCommit repository:</p> 
<pre><code class="lang-bash">git push -u origin master:master</code></pre> 
<p>Look for this output:</p> 
<div class="hide-language"> 
 <pre><code class="lang-bash">Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 235 bytes | 235.00 KiB/s, done.
…
* [new branch]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; master -&gt; master
Branch 'master' set up to track remote branch 'master' from 'origin'.</code></pre> 
</div> 
<p>After the local commit has been pushed to the remote CodeCommit repository, the CloudWatch event detects this update. You should see the following notification message in your email account:</p> 
<div class="hide-language"> 
 <pre><code class="lang-bash">Commit ID: &lt;Commit ID&gt;
author: [YourName] (YourEmail@example.com) - &lt;Timestamp&gt; +0000
message: Create initial file

File: newfile Addition - Blob ID: &lt;Blob ID&gt;</code></pre> 
</div> 
<h2>Summary</h2> 
<p>In this blog post, I showed you how to use an AWS CloudFormation template to quickly build a sample solution that can help your operations team or development team track updates to a CodeCommit repository.</p> 
<p>The example CloudFormation template and Lambda function can be found in the <a href="https://github.com/aws-samples/aws-codecommit-file-change-publisher">aws-codecommit-file-change-publisher</a> GitHub repository. Using the sample code, you can customize the email content with HTML or add other information to your email message.</p> 
<p>If you have questions or other feedback about this example, please open an issue or submit a pull request.</p>