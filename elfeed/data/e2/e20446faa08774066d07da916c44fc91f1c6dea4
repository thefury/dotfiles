<p><em>By: Alexandr Moroz, Sr. Product Manager, Amazon Route 53; Madhuri Peri, Sr. IoT Architect, AWS Professional Services; Aaron Molitor, Sr. Infrastructure Architect, AWS Professional Services; and Sarma Palli, Sr. DevOps Architect, AWS Professional Services</em></p> 
<p>AWS Cloud Map enables you to map your cloud. You can define friendly names for any resource, such as Amazon S3 buckets, Amazon DynamoDB tables, Amazon SQS queues, or custom cloud services built on Amazon EC2, Amazon ECS, Amazon EKS, or AWS Lambda. Your applications can then discover resource location and metadata by friendly name using the AWS SDK and authenticated API queries. Resources can be further filtered and discovered by custom attributes such as deployment stage or version.</p> 
<h2>What’s new with API service discovery</h2> 
<p>If you want an enterprise application component such as a database hosted on Amazon EC2 instances to provide an endpoint to your database service, you have to register your applications’ EC2 IP address with AWS Cloud Map. You could register additional metadata attributes, like INSTANCE_STATUS, and then use this attribute with AWS Cloud Map to identify when the service is READY so that querying applications can only attempt a connection when they see a READY status in AWS Cloud Map. In cases where different microservices or enterprise applications have endpoints that have to be discovered, you can use AWS Cloud Map to register those as well. Examples of such endpoints include types of ELB load balancers, including ELB Classic, Application Load Balancers (ALB), and Network Load Balancers (NLB) with Auto Scaling groups.</p> 
<h2>Compute stack choices</h2> 
<p>Modern application architectures require a way to expose and advertise the service endpoint, register and de-register the endpoints, and query them. The dependencies of applications are expected to be handled by the applications themselves where a service registry becomes critical.</p> 
<p>These microservices could follow different patterns of architecture lending themselves to use:</p> 
<ol> 
 <li>Traditional workloads running on Amazon EC2 fronted by Auto Scaling groups or an ELB load balancer such as ELB Classic, Application Load Balancer, or Network Load Balancer.</li> 
 <li>Amazon API Gateway and AWS Lambda for event-driven workflows.</li> 
 <li>Container-based workloads on Amazon Elastic Container Service (ECS) using EC2 or Fargate launch types and Amazon Elastic Container Service for Kubernetes (EKS) for workloads that run as services (long-running) or daemons or run to completion (Batch / cron type).</li> 
</ol> 
<p>This image shows a typical enterprise application composed of components that run different architectures. There is a web server running on Amazon EKS, a backend on Amazon ECS, a serverless event registration service, and payments running on EC2 Auto Scaling groups (ASG) while leveraging databases on Amazon Relational Database Service (RDS).</p> 
<p><img class="aligncenter wp-image-926" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_1.png" alt="" width="750" height="441" /></p> 
<p>&nbsp;</p> 
<p>From a service discovery perspective, this is how the applications would want to be discovered and queried:</p> 
<p><img class="aligncenter wp-image-927" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_2.png" alt="" width="750" height="485" /></p> 
<p>Let’s see how we can register each of these microservices (which are running on different cloud compute products) with AWS Cloud Map using both DNS-based and API-based service discovery and leveraging attributes for discovery when components are ready for traffic.</p> 
<h2>Microservice endpoints and discovery</h2> 
<p>AWS Cloud Map is a managed solution that lets you map logical names to the components/resources for an application. It allows applications to discover the resources using one of the AWS SDKs, RESTful API calls, or DNS queries. AWS Cloud Map serves registered resources, which can be Amazon DynamoDB tables, Amazon Simple Queue Service (SQS) queues, any higher-level application services that are built using EC2 instances or ECS tasks, or using a serverless stack.</p> 
<p>When you register a resource, you can specify attributes and clients that can use the attributes to filter which resources are to be returned. For example, an application can request resources in a particular deployment stage, like Gamma or Prod. Additionally, you can choose to enable health checking for your IP-based resources, ensuring that AWS Cloud Map returns only healthy endpoints. Each API call is authenticated, and developers can control access to service locations and configuration using AWS Identity and Access Management (IAM). &nbsp;This ensures that clients always discover the services that they’re authorized to use.</p> 
<h2>Let’s cover fundamentals</h2> 
<p>There are two aspects to service discovery:</p> 
<ul> 
 <li>The microservices themselves that register/de-register</li> 
 <li>Other microservices that are discover / query microservices</li> 
</ul> 
<p>To register a microservice, follow these steps:</p> 
<ol> 
 <li>Create a namespace.</li> 
 <li>Create a service.</li> 
 <li>Register instances with the service.</li> 
</ol> 
<p>Steps 1 and 2 &nbsp;are performed once for each service. A utility function for registration and de-registration of a microservice has to be created. This utility function can be invoked for microservices regardless of the compute stack choice and deployed through your CI/CD/DevOps processes.</p> 
<p>Step 3 is an ongoing operation that has to be updated each time the underlying EC2 compute that powers it changes. Examples include: EC2 Amazon Machine Image (AMI) changes, code changes for the service, and version changes.</p> 
<h3>Creating a namespace</h3> 
<p>A namespace is a logical group of services that share the same domain name, such as example1.example.com or example2.example.com. If you want these namespaces to be queried from only within your VPC, opt for a private namespace. If you want them to be accessible over the Internet, create a public namespace. In our example, the public namespace could be example1, but the total count of use of items in example1 in a tracker/reporting service could be an internal service.</p> 
<p>Microservice using DNS-based service discovery:</p> 
<p><img class="aligncenter size-full wp-image-929" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_4.png" alt="" width="463" height="102" /></p> 
<p>Microservice using API-based service discovery:</p> 
<p><img class="aligncenter size-full wp-image-930" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_5.png" alt="" width="497" height="128" /></p> 
<h3>Creating a service</h3> 
<p>When you register a service, AWS Cloud Map will create a record in the hosted zone – which is a combination of the name of the service and the name of the namespace. You could optionally define a health check for the service, too.</p> 
<p>If the service you are creating is meant for DNS-based discovery using one of the A, AAAA, or SRV records, then you can create your service using the following syntax. Examples of this could be your application code running on an EC2 instance or as a container (ECS/EKS).</p> 
<p><img class="aligncenter size-full wp-image-931" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_6.png" alt="" width="515" height="276" /></p> 
<p>For services that are meant to be used only in an API-only namespace, the API call would look like this:</p> 
<p><img class="aligncenter size-full wp-image-932" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_7.png" alt="" width="510" height="129" /></p> 
<h3>Register the compute backend with the service</h3> 
<h4>Container IP address register/de-register</h4> 
<p>Amazon ECS is tightly integrated with AWS Cloud Map to enable service discovery for compute workloads running in ECS. When you enable service discovery for ECS services, it automatically keeps track of all task instances in AWS Cloud Map. Now your applications can discover them using DNS queries and AWS Cloud Map DiscoverInstances API calls. The ECS control plane that issues the calls would register the IP address of the task (and containers) with the AWS Cloud Map.</p> 
<p>When the task goes away – either because a newer version has been deployed or there is a crash or a restart – the ECS control plane handles the de-registration process as well.</p> 
<p>If you are using ECS for running containers, this is done seamlessly with ECS and AWS Cloud Map API integration.</p> 
<h4>API Gateway URL and AWS Lambda</h4> 
<p>When you create a microservice with an API namespace, you could use any attributes you prefer, without providing the IP/port information.</p> 
<p><img class="aligncenter wp-image-933" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_8.png" alt="" width="750" height="114" /></p> 
<h4>EC2 instance IP address registration and de-registration</h4> 
<p>As the EC2 instances are coming online, the userdata section of the bootstrap configuration will issue commands to register the EC2 instance’s IP address with the service. An alternate approach would be to run a Lambda function that runs against a microservice’s Auto Scaling group, lists the IP addresses, and registers the instance against the service.</p> 
<p>If you are using an EC2 instance, if the instance is integrated with an Auto Scaling group, lifecycle hooks could also be used to run the de-register scripts. Another approach would be to use a Lambda function that runs periodically against an Auto Scaling group or even fires on Auto Scaling group notification events.</p> 
<p><img class="aligncenter wp-image-934" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_9.png" alt="" width="350" height="263" /></p> 
<h3></h3> 
<h2>Query/Discovery</h2> 
<p>Both DNS and API service discovery are now supported by the AWS Cloud Map service discovery. Supported DNS record types are – A, AAAA, SRV, and CNAME.</p> 
<p>It is typical in a microservices architecture for a service to be able to discover other services. We recommend that you query only by name and/or endpoint, and do not use the IP address of the compute stack (AWS Lambda / container/ EC2) that is backing the service.</p> 
<p>The API commands <em>list_services</em> and <em>get_services</em> provide the information on what services are available and their corresponding details.</p> 
<p>A DNS protocol also has clients caching the responses, so make sure that you handle caching settings. AWS Cloud Map uses regional endpoints here. Any A records created will use either a WEIGHTED response or MULTIVALUE answer policy. If you are using a Java-based compute stack, you might not want to choose DNS-based service discovery as the JVM caches DNS name lookups. When the JVM resolves a hostname to an IP address, it caches the IP address for a specified period of time, TTL. In such cases, you could use API-based service discovery and leverage the same approach as your other microservices that can use AWS Cloud Map.</p> 
<h2>DiscoverInstances API</h2> 
<p>DiscoverInstances&nbsp;API discovers registered instances for a specified namespace and service using regional endpoints.&nbsp;Updates to your services, such as new instances registered or existing instances removed, will be available in the API faster than via DNS. The API provides the ability to decorate the resources with additional metadata (service attributes) that can be used during discovery. For example, get the services with attributes of <em>blue</em> or <em>green</em> or other application attributes. These attributes can be used to complement health checks while performing discovery (such as finding out whether the instance is ready or not).</p> 
<p>Here is a screenshot that shows how the registered ECS task instances appear in the AWS Cloud Map console:</p> 
<p><img class="aligncenter wp-image-935" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_10.png" alt="" width="750" height="317" /></p> 
<p><img class="aligncenter wp-image-936" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/11/27/reinvent_cloudmap_11.png" alt="" width="750" height="295" /></p> 
<p>The idea is that as the container or EC2 instance comes online or goes offline, it needs to issue a call to the AWS Cloud Map API to register or de-register the compute IP address.</p> 
<p>Get started by visiting the <a href="http://aws.amazon.com/cloud-map/">AWS Cloud Map page</a>. To learn more, take a look at the demo code in the <a href="https://github.com/aws-samples/route53-autonaming">GitHub repo here</a>. If your compute workloads use EKS, please refer to <a href="https://aws.amazon.com/blogs/opensource/unified-service-discovery-ecs-kubernetes/">this blog post</a> that shows how to make EKS automatically publish all services in AWS Cloud Map.</p>