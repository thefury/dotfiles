<p>I am always amazed at how our customers are using streaming data. For example,&nbsp;Thomson Reuters, one of the world’s most trusted news organizations for businesses and professionals, built a solution to capture, analyze, and visualize analytics data <a href="https://aws.amazon.com/solutions/case-studies/thomson-reuters/">to help product teams continuously improve the user experience</a>. Supercell, the social game company providing games such as&nbsp;Hay Day, Clash of Clans, and Boom Beach, is <a href="https://aws.amazon.com/solutions/case-studies/supercell/">delivering in-game data in real-time</a>, handling 45 billion events per day.</p> 
<p>Since we launched <a href="https://aws.amazon.com/kinesis/">Amazon Kinesis</a> at re:Invent 2013, we have continually expanded the ways in in which customers work with streaming data on AWS. Some of the available&nbsp;tools are:</p> 
<ul> 
 <li>Kinesis Data Streams, to capture, store, and process data streams with your own applications.</li> 
 <li>Kinesis Data Firehose, to&nbsp;transform and collect data into destinations such as Amazon S3, Amazon Elasticsearch Service, and Amazon Redshift.</li> 
 <li>Kinesis Data Analytics, to continuously analyze data using SQL or <a href="https://aws.amazon.com/blogs/aws/new-amazon-kinesis-data-analytics-for-java/">Java (via&nbsp;Apache Flink applications)</a>, for example to detect anomalies or for time series aggregation.</li> 
 <li>Kinesis Video Streams, to simplify processing of media streams.</li> 
</ul> 
<p>At re:Invent 2018, we introduced in open preview&nbsp;<a href="https://aws.amazon.com/msk/">Amazon Managed Streaming for Apache Kafka (MSK)</a>, a fully managed service that makes it easy to build and run applications that use <a href="https://kafka.apache.org/">Apache Kafka</a> to process streaming data.</p> 
<p>I am excited to announce that Amazon MSK is generally available today!</p> 
<p><span style="text-decoration: underline;"><strong>How it works</strong></span></p> 
<p>Apache Kafka (Kafka) is an open-source platform that enables customers to capture streaming data like click stream events, transactions, IoT events, application and machine logs, and have applications that perform real-time analytics, run continuous transformations, and distribute this data to data lakes and databases in real time.&nbsp;You can use Kafka as a streaming data store to decouple applications producing streaming data (<strong>producers</strong>) from those consuming streaming data (<strong>consumers</strong>).</p> 
<p>While Kafka is a <a href="https://cwiki.apache.org/confluence/display/KAFKA/Powered+By">popular enterprise data streaming and messaging framework</a>, it can be difficult to setup, scale, and manage in production.&nbsp;Amazon MSK takes care of these managing tasks and makes it easy to set up, configure, and run Kafka, along with <a href="https://zookeeper.apache.org">Apache ZooKeeper</a>, in an environment following best practices for high availability and security.</p> 
<p>Your MSK clusters always run within an <a href="https://aws.amazon.com/vpc/">Amazon VPC</a> managed by the MSK service. Your MSK resources are made available to your own VPC, subnet, and security group through <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ElasticNetworkInterfaces.html">elastic network interfaces (ENIs)</a> which will appear in your account, as described in the following architectural diagram:</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-architecture-visio.png"><img class="size-full wp-image-28881 alignnone" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-architecture-visio.png" alt="" width="1225" height="968" /></a></p> 
<p>Customers can create a cluster in minutes, use <a href="https://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a> to control cluster actions, authorize clients using TLS private certificate authorities fully managed by <a href="https://aws.amazon.com/certificate-manager/">AWS Certificate Manager (ACM)</a>, encrypt data in-transit using TLS, and encrypt data at rest using <a href="https://aws.amazon.com/kms/">AWS Key Management Service (KMS)</a>&nbsp;encryption keys.</p> 
<p>Amazon MSK continuously monitors server health and automatically replaces servers when they fail, automates server patching, and operates highly available ZooKeeper nodes as a part of the service at no additional cost. Key Kafka performance metrics are published in the console and in <a href="https://aws.amazon.com/cloudwatch/">Amazon CloudWatch</a>. Amazon MSK is fully compatible with Kafka versions 1.1.1 and 2.1.0, so that you can continue to run your applications, use Kafka’s admin tools, and and use Kafka compatible tools and frameworks without having to change your code.</p> 
<p>Based on our customer feedback during the open preview, Amazon MSK added may features such as:</p> 
<ul> 
 <li>Encryption in-transit via TLS between clients and brokers, and between brokers</li> 
 <li>Mutual TLS authentication using ACM private certificate authorities</li> 
 <li>Support for Kafka version 2.1.0</li> 
 <li>99.9% availability SLA</li> 
 <li>HIPAA eligible</li> 
 <li>Cluster-wide storage scale up</li> 
 <li>Integration with AWS CloudTrail for MSK API logging</li> 
 <li>Cluster tagging and tag-based IAM policy application</li> 
 <li>Defining custom, cluster-wide configurations for topics and brokers</li> 
</ul> 
<p><a href="https://aws.amazon.com/cloudformation/"> AWS CloudFormation</a>&nbsp;support is coming in the next few weeks.</p> 
<p><span style="text-decoration: underline;"><strong>Creating a cluster</strong></span></p> 
<p>Let’s create a cluster using the AWS management console. I give the cluster a name, select the VPC I want to use the cluster from, and the Kafka version.</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-create-general.png"><img class="size-full wp-image-28884 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-create-general.png" alt="" width="845" height="425" /></a></p> 
<p>I then choose the Availability Zones (AZs) and the corresponding subnets to use in the VPC. In the next step,&nbsp;I select how many Kafka brokers to deploy in each AZ. More brokers allow you to scale the throughtput of a cluster by allocating partitions to different brokers.</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-create-brokers.png"><img class="size-full wp-image-28889 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-create-brokers.png" alt="" width="846" height="310" /></a></p> 
<p>I can add tags&nbsp;to search and filter my resources, apply IAM policies to the Amazon MSK API, and track my costs. For storage, I leave the default storage volume size per broker.</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-create-tags-storage.png"><img class="size-full wp-image-29050 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-create-tags-storage.png" alt="" width="849" height="525" /></a></p> 
<p>I select to use encryption within the cluster and to allow both TLS and plaintext traffic between clients and brokers. For data at rest, I use the AWS-managed customer master key (CMK), but you can select a CMK in your account, using KMS, to have further control. You&nbsp;can use private TLS certificates to authenticate the identity of clients that connect to your cluster. This feature is using&nbsp;Private Certificate Authorities (CA) from ACM. For now, I leave this option unchecked.</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-create-encryption-auth.png"><img class="size-full wp-image-29051 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-create-encryption-auth.png" alt="" width="842" height="798" /></a></p> 
<p>In the advanced setting, I leave the default values. For example, I could have chosen here a different instance type for my brokers. Some of these settings can be updated using the <a href="https://aws.amazon.com/cli/">AWS CLI</a>.</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-create-advanced-1.png"><img class="size-full wp-image-29052 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-create-advanced-1.png" alt="" width="847" height="494" /></a></p> 
<p>I create the cluster and monitor the status from the cluster summary, including the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> that I can use when interacting via CLI or SDKs.</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-cluster-summary-1.png"><img class="size-full wp-image-29053 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-cluster-summary-1.png" alt="" width="1119" height="520" /></a></p> 
<p>When the status is active, the client information section provides specific details to connect to the cluster, such as:</p> 
<ul> 
 <li>The bootstrap servers I can use with Kafka tools to connect to the cluster.</li> 
 <li>The Zookeper connect list of hosts and ports.</li> 
</ul> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-cluster-client-1.png"><img class="size-full wp-image-29054 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/29/msk-cluster-client-1.png" alt="" width="603" height="501" /></a></p> 
<p>I can get similar information using the AWS CLI:</p> 
<ul> 
 <li><code>aws kafka list-clusters</code> to see the ARNs of your clusters in a specific region</li> 
 <li><code>aws kafka get-bootstrap-brokers --cluster-arn &lt;ClusterArn&gt;</code> to get the Kafka bootstrap servers</li> 
 <li><code>aws kafka describe-cluster --cluster-arn &lt;ClusterArn&gt;</code> to see more details on the cluster, including the Zookeeper connect string</li> 
</ul> 
<p><span style="text-decoration: underline;"><strong>Quick demo of using Kafka</strong></span></p> 
<p>To start using Kafka, I create two EC2 instances in the same VPC, one will be a <strong>producer</strong> and one a <strong>consumer</strong>. To set them up as client machines, I download and extract the&nbsp;Kafka tools&nbsp;<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.12-2.1.0.tgz">from the Apache website or any mirror</a>.&nbsp;Kafka requires Java 8 to run, so I install <a href="https://aws.amazon.com/corretto/">Amazon Corretto 8</a>.</p> 
<p>On the producer instance, in the Kafka directory, I create a topic to send data from the producer to the consumer:</p> 
<p><code>bin/kafka-topics.sh --create --zookeeper &lt;ZookeeperConnectString&gt; \<br /> --replication-factor 3 --partitions 1 --topic MyTopic</code></p> 
<p>Then I start a console-based producer:</p> 
<p><code>bin/kafka-console-producer.sh --broker-list &lt;BootstrapBrokerString&gt; \<br /> --topic MyTopic</code></p> 
<p>On the consumer instance, in the Kafka directory, I start a console-based consumer:</p> 
<p><code>bin/kafka-console-consumer.sh --bootstrap-server &lt;BootstrapBrokerString&gt; \<br /> --topic MyTopic --from-beginning</code></p> 
<p>Here’s a recording of a quick demo where I create the topic and then send messages from a producer (top terminal) to a consumer of that topic (bottom terminal):</p> 
<p><a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-demo-video.gif"><img class="size-full wp-image-28894 aligncenter" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2019/05/13/msk-demo-video.gif" alt="" width="650" height="623" /></a></p> 
<p><span style="text-decoration: underline;"><strong>Pricing and availability</strong></span></p> 
<p>Pricing is per Kafka broker-hour and per provisioned storage-hour. There is no cost&nbsp;for the Zookeeper nodes used by your clusters.&nbsp;AWS data transfer rates apply for data transfer in and out of MSK. You will not be charged for data transfer within the cluster in a region, including data transfer between brokers and data transfer between brokers and ZooKeeper nodes.</p> 
<p>You can migrate your existing Kafka cluster to MSK using tools like MirrorMaker (that comes with open source Kafka) to replicate data from your clusters into a MSK cluster.</p> 
<p>Upstream compatibility is a core tenet of Amazon MSK. Our code changes to the Kafka platform are released back to open source.</p> 
<p>Amazon MSK is available in US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), EU (Ireland), EU (Paris), and EU (London).</p> 
<p>I look forward to see how are you going to use Amazon MSK to simplify building and migrating streaming applications to the cloud!</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=ksjG26255p0:UQicpom4-SY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=ksjG26255p0:UQicpom4-SY:dnMXMwOfBR0"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=dnMXMwOfBR0" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=ksjG26255p0:UQicpom4-SY:7Q72WNTAKBA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=7Q72WNTAKBA" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/AmazonWebServicesBlog/~4/ksjG26255p0" height="1" width="1" alt=""/>