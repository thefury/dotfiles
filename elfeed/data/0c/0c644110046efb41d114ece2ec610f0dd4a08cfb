<p>Thanks to Raja Mani, AWS Solutions Architect, for this great blog that describes how federated users can access AWS CodeCommit.<br /> —</p> 
<p>You can access repositories in AWS CodeCommit using the identities used in your business. This is useful because you can reuse your existing organizational identities and authentication methods. In this blog post, we’ll focus on authenticating with Active Directory Federation Services (AD FS), but the concepts apply to other federated identity providers as well, such as Okta.</p> 
<p>AWS Federation helps to manage access to your AWS resources centrally. With federation, you can single sign-on to your AWS accounts using your corporate directory credentials. This authenticates through AWS Identity and Access Management (<a href="https://aws.amazon.com/iam/">IAM</a>) policies once a user assumes an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM role</a>. AWS offers multiple options for federating your identities. You can learn more about them <a href="https://aws.amazon.com/identity/federation/">here</a>.</p> 
<p>If you are federating with AWS for the first time, refer the following for more information and implementation guidance:</p> 
<ul> 
 <li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers.html">Identity Providers and Federation</a></li> 
 <li><a href="https://aws.amazon.com/blogs/security/aws-federated-authentication-with-active-directory-federation-services-ad-fs/">AWS Federated Authentication with Active Directory Federation Services</a></li> 
</ul> 
<p>There are two solutions available when using federated identities with <a href="https://aws.amazon.com/codecommit">AWS CodeCommit</a>: AWS Single Sign-On and AWS Process Credential Provider.</p> 
<p><strong>Using CodeCommit with AWS Single Sign-On</strong></p> 
<p>Your first option is to use <a href="https://aws.amazon.com/single-sign-on/">AWS Single Sign-On</a> (AWS SSO). You can access AWS CodeCommit repositories by using temporary credentials obtained from the AWS SSO user portal. You might want to use AWS SSO if you have multiple AWS accounts and business applications and you want to manage them centrally. This solution is documented in the blog post “<a href="https://aws.amazon.com/blogs/security/aws-single-sign-on-now-enables-command-line-interface-access-for-aws-accounts-using-corporate-credentials/">AWS Single Sign-On Now Enables Command Line Interface Access for AWS Account Using Corporate Credentials</a>”.</p> 
<p>The AWS SSO Service connects to an on-premises Microsoft Active Directory via AD Connector/AD trust. In the AWS SSO Console, you can obtain temporary credentials for the <a href="https://aws.amazon.com/cli/">AWS Command Line Interface</a> (AWS CLI). It is easy to manage federation for multiple AWS accounts centrally using AWS SSO. However, as of this writing, AWS SSO supports Microsoft Active Directory only. If you are using a different identity provider, use the second solution.</p> 
<p>The high-level architecture for this solution looks like this:</p> 
<p><img class="alignnone size-full wp-image-2716" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/02/codecommit-fed1.png" alt="" width="974" height="427" /></p> 
<ol> 
 <li>The user signs in to the AWS SSO Console and chooses the account they want to use for CodeCommit access. Then, they select the particular permission set for that account that has access to the CodeCommit Repository.</li> 
 <li>The user then clicks the “Command line or programmatic access” link corresponding to the permission set to get the AWS Credentials.</li> 
 <li>The user configures the AWS CLI to use the credentials obtained in the previous step.</li> 
 <li>The user configures the Git command line tool to use the AWS CLI via the AWS CLI Credential Helper. For more information, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-https-unixes.html">this page</a>.</li> 
</ol> 
<p>After completing all the above steps, the user can run commands from the Git client.</p> 
<p><strong>Using CodeCommit with AWS Process Credential Provider</strong></p> 
<p>Your second option is to use the <a href="https://github.com/awslabs/awsprocesscreds">AWS Process Credential Provider utility</a>. You might want to use this solution if you do not currently use AWS SSO to centrally manage access to AWS accounts. The following diagram shows a high-level architectural view of what happens when the AWS Process Credential Provider utility is invoked from the AWS CLI.</p> 
<p><img class="alignnone size-full wp-image-2717" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/02/codecommit-fed2.png" alt="" width="974" height="441" /></p> 
<ol> 
 <li>The AWS Process Credential Provider utility is invoked by AWS CLI. It calls the Active Directory Federation Services portal sign-in page and provides the Active Directory authentication credentials. If you are using a different federated access solution, it works in a similar manner.</li> 
 <li>AD FS authenticates the user against Active Directory.</li> 
 <li>AD FS builds the <a href="https://aws.amazon.com/identity/saml/">Security Assertion Markup Language</a> (SAML) response and sends it back to the AWS Process Credential Provider utility.</li> 
 <li>The AWS Process Credential Provider utility connects to <a href="https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html">AWS Simple Token Service</a> (STS) using STS AssumeRoleWithSAML.</li> 
 <li>STS sends temporary credentials to the AWS Process Credential Provider utility.</li> 
 <li>The user is authenticated and can successfully connect to the AWS CodeCommit repository from their local Git client, command line, or terminal.</li> 
</ol> 
<p>I am going to demonstrate this solution by cloning an AWS CodeCommit repository called ExampleCorpRepository from the US East (Virginia) Region (us-east-1) region by authenticating against AD FS. I used an <a href="https://aws.amazon.com/ec2">Amazon EC2</a> instance to demonstrate this solution, but the same steps can be used in other environments, such as your business intranet.</p> 
<p><strong>Prerequisites</strong></p> 
<ul> 
 <li>Setup AWS Federated authentication with your identity provider. You can use the blog post mentioned at the beginning of this blog post for reference.</li> 
 <li>Install Git on your local computer, including a Git command line from here: <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li> 
 <li>Install the AWS Process Credential Provider utility “awsprocesscreds” on your local computer according to the installation instructions on this page: <a href="https://github.com/awslabs/awsprocesscreds">https://github.com/awslabs/awsprocesscreds</a></li> 
 <li>Install a Git CodeCommit helper utility called “git-remote-codecommit” on your local computer from this page: <a href="https://github.com/awslabs/git-remote-codecommit">https://github.com/awslabs/git-remote-codecommit</a></li> 
 <li>Enable the ADFS Sign-on page (You can get it from your ADFS Admin) in your corporate network. Make sure it has the loginToRp parameter set with the correct value. Your ADFS admin can provide that value too.</li> 
 <li>Create an AWS IAM role that grants access to AWS CodeCommit repositories in the US East (N. Virginia) region. Make sure to record the Amazon Resource Name (ARN) for the role that grants users who assume the role access to AWS CodeCommit repositories. Refer <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/getting-started-cc.html">this page</a> for more info about CodeCommit.</li> 
 <li>Create an AD FS user and password.</li> 
 <li>Create an AWS CodeCommit repository in the US East (Virginia) region named ExampleCorpRepository.</li> 
</ul> 
<p><strong>Step 1: Create an AWS Command Line Interface (CLI) Profile</strong><br /> This step configures the AWS CLI to use the AWS Process Credential Provider utility you installed as part of the prerequisites. It will authenticate against ADFS using the user name and password you provide. If the authentication is successful, it will obtain temporary AccessKeyId and SecretAccessKey tokens from AWS STS and pass them to the AWS CLI.</p> 
<p>1. Open the .aws/config file in a plain-text editor. Create a new profile entry named adfs in the config file and set it up to use the AWS Process Credential Provider utility. For example, I created the following entry in the config file (in my environment, the config file is found in the /home/ec2-user/.aws directory).</p> 
<pre><code class="lang-yaml">[profile adfs]
	 region=us-east-1
credential_process=awsprocesscreds-saml -e 'https://ec2-xx-xx-xxx-xx.compute-1.amazonaws.com/adfs/ls/IdpInitiatedSignOn.aspx?loginToRp=urn:amazon:webservices' -u 'username@domain' -p adfs -a arn:aws:iam::xxxxxxxxxxxx:role/ADFS-Production
</code></pre> 
<p>It takes 4 parameters: the URL of your ADFS Sign-on page (-e flag), the user name of your AD_FS user (-u flag), the name of your SAML provider (-p flag) and the ARN of the role in AWS IAM your user will assume for access to AWS CodeCommit (-a flag).</p> 
<ul> 
 <li>The first parameter is AD_FS Sign-on page and it is also known as IdP-initiated login page. For AD_FS, the Sign-on page takes the form of https://&lt;fqdn&gt;/adfs/ls/IdpInitiatedSignOn.aspx with query string value of loginToRp=urn:amazon:webservices.</li> 
 <li>The second parameter is AD_FS user name which will be your corporate user id / user id you created specifically for CodeCommit access in the prerequisite steps. In a real-world example, this is something your users would obtain from your AD FS administrator.</li> 
 <li>The third parameter is the name of your federated access identity. Currently the only supported providers are AD_FS and Okta.</li> 
 <li>The fourth parameter is the AWS IAM role ARN that the AD_FS user will assume in order to be granted access to the AWS CodeCommit repository. This is the role you created in the prerequisites. Refer to <a href="https://github.com/awslabs/awsprocesscreds">https://github.com/awslabs/awsprocesscreds</a> for more information.</li> 
</ul> 
<p>The AWS Process Credential Provider utility will prompt you for the password for the configured AD_FS user the first time you invoke an AWS CLI command at the command line or terminal. If authentication is successful, it caches the security tokens for further AWS CLI usage until the cache expires. By default, tokens are valid for an hour. If you want to change the default, you can change it as per the instructions in this <a href="https://aws.amazon.com/blogs/security/aws-federated-authentication-with-active-directory-federation-services-ad-fs/">blog post</a> (Refer to the section “Adjusting Session Duration”).</p> 
<p>2. Save your config file changes and open a new command line or terminal session.</p> 
<p><strong>Step 2: Clone the AWS CodeCommit Repository to your Local Computer</strong></p> 
<p>This step uses git-remote-codecommit, the Git CodeCommit helper utility you installed in the prerequisities section. It simplifies the way you push and pull changes to repositories from your local Git client to AWS CodeCommit. You can run the following command to clone your repository. In my case, I have a repository called ExampleCorpRepository. I cloned it to my local computer, creating a local repo, by using the following command:</p> 
<pre><code class="lang-bash">git clone codecommit://adfs@ExampleCorpRepository</code></pre> 
<p>The above command takes one parameter in the form of codecommit://&lt;AWS CLI Profile Name&gt;@&lt;AWS CodeCommit Repository Name&gt;. The AWS CLI profile name is the one you created in Step 1 (in the example, it is named adfs). The repository name is the actual name of the AWS CodeCommit repository you want to clone. Git will remember the repository information. You won’t need to pass the parameter again when you run additional Git commands, such as git commit or git push. It will only prompt you for a password if the session is expired.</p> 
<p><strong>Conclusion</strong></p> 
<p>We hope this has illustrated how you can use CodeCommit with federated users. Happy coding!</p>