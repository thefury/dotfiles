<p>Thanks to <a href="https://www.linkedin.com/in/gregeppel/">Greg Eppel</a>, Sr. Solutions Architect, Microsoft Platform for this great blog that describes how to create a custom CodeBuild build environment for the .NET Framework.<br /> —<br /> <a href="https://aws.amazon.com/codebuild/">AWS CodeBuild</a> is a fully managed build service that compiles source code, runs tests, and produces software packages that are ready to deploy. CodeBuild provides curated build environments for programming languages and runtimes such as Android, Go, Java, Node.js, PHP, Python, Ruby, and Docker. CodeBuild now supports builds for the Microsoft Windows Server platform, including a prepackaged build environment for .NET Core on Windows. If your application uses the .NET Framework, you will need to use a custom Docker image to create a custom build environment that includes the Microsoft proprietary Framework Class Libraries. For information about why this step is required, <a href="https://aws.amazon.com/codebuild/faqs/#codebuild">see our FAQs</a>. In this post, I’ll show you how to create a custom build environment for .NET Framework applications and walk you through the steps to configure CodeBuild to use this environment.</p> 
<p>Build environments are Docker images that include a complete file system with everything required to build and test your project. To use a custom build environment in a CodeBuild project, you build a container image for your platform that contains your build tools, push it to a Docker container registry such as <a href="https://aws.amazon.com/ecr/">Amazon Elastic Container Registry</a> (Amazon ECR), and reference it in the project configuration. When it builds your application, CodeBuild retrieves the Docker image from the container registry specified in the project configuration and uses the environment to compile your source code, run your tests, and package your application.</p> 
<p><strong>Requirements</strong></p> 
<p>To follow the steps in this post and build the Docker container image, you need to have <a href="https://www.docker.com/docker-windows">Docker for Windows</a> (which is installed if you use a Windows Server with Containers AMI), the <a href="https://aws.amazon.com/cli/">AWS Command Line interface</a>, and <a href="https://git-scm.com/download/win">Git</a> installed. In this post, I’m using <a href="https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;rel=15">Visual Studio Build Tools 2017</a>.</p> 
<p><strong>Step 1: Launch EC2 Windows Server 2016 with Containers</strong></p> 
<ol> 
 <li>In the Amazon EC2 console, in your region, <a href="https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#LaunchInstanceWizard">launch an Amazon EC2 instance</a> from a Microsoft Windows Server 2016 Base with Containers AMI.</li> 
 <li>Increase disk space on the boot volume to at least 50 GB to account for the larger size of containers required to install and run Visual Studio Build Tools.</li> 
 <li>When the instance is running, <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/connecting_to_windows_instance.html">connect to it using Remote Desktop</a>.</li> 
</ol> 
<p><strong>Step 2: Build and push the Docker image</strong></p> 
<ol> 
 <li>Open an elevated command prompt (that is, right-click on your favorite shell and choose Run as Administrator).</li> 
 <li>Create a directory: <pre><code class="lang-powershell">mkdir C:\BuildTools
cd C:\BuildTools</code></pre> </li> 
 <li>Save the following content to C:\BuildTools\Dockerfile: <pre><code class="lang-powershell"># escape=`

FROM microsoft/dotnet-framework:4.7.2-runtime

SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';&quot;]

#Install NuGet CLI
ENV NUGET_VERSION 4.4.1
RUN New-Item -Type Directory $Env:ProgramFiles\NuGet; `
    Invoke-WebRequest -UseBasicParsing https://dist.nuget.org/win-x86-commandline/v$Env:NUGET_VERSION/nuget.exe -OutFile $Env:ProgramFiles\NuGet\nuget.exe

# Install VS Test Agent
RUN Invoke-WebRequest -UseBasicParsing https://download.visualstudio.microsoft.com/download/pr/12210068/8a386d27295953ee79281fd1f1832e2d/vs_TestAgent.exe -OutFile vs_TestAgent.exe; `
    Start-Process vs_TestAgent.exe -ArgumentList '--quiet', '--norestart', '--nocache' -NoNewWindow -Wait; `
    Remove-Item -Force vs_TestAgent.exe; `
# Install VS Build Tools
    Invoke-WebRequest -UseBasicParsing https://download.visualstudio.microsoft.com/download/pr/12210059/e64d79b40219aea618ce2fe10ebd5f0d/vs_BuildTools.exe -OutFile vs_BuildTools.exe; `
    # Installer won't detect DOTNET_SKIP_FIRST_TIME_EXPERIENCE if ENV is used, must use setx /M
    setx /M DOTNET_SKIP_FIRST_TIME_EXPERIENCE 1; `
    Start-Process vs_BuildTools.exe -ArgumentList '--add', 'Microsoft.VisualStudio.Workload.MSBuildTools', '--add', 'Microsoft.VisualStudio.Workload.NetCoreBuildTools', '--add', 'Microsoft.VisualStudio.Workload.WebBuildTools;includeRecommended', '--quiet', '--norestart', '--nocache' -NoNewWindow -Wait; `
    Remove-Item -Force vs_buildtools.exe; `
    Remove-Item -Force -Recurse \&quot;${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\&quot;; `
    Remove-Item -Force -Recurse ${Env:TEMP}\*; `
    Remove-Item -Force -Recurse \&quot;${Env:ProgramData}\Package Cache\&quot;

# Set PATH in one layer to keep image size down.
RUN setx /M PATH $(${Env:PATH} `
    + \&quot;;${Env:ProgramFiles}\NuGet\&quot; `
    + \&quot;;${Env:ProgramFiles(x86)}\Microsoft Visual Studio\2017\TestAgent\Common7\IDE\CommonExtensions\Microsoft\TestWindow\&quot; `
    + \&quot;;${Env:ProgramFiles(x86)}\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin\&quot;)

# Install Targeting Packs
RUN @('4.0', '4.5.2', '4.6.2', '4.7.2') `
    | %{ `
        Invoke-WebRequest -UseBasicParsing https://dotnetbinaries.blob.core.windows.net/referenceassemblies/v${_}.zip -OutFile referenceassemblies.zip; `
        Expand-Archive -Force referenceassemblies.zip -DestinationPath \&quot;${Env:ProgramFiles(x86)}\Reference Assemblies\Microsoft\Framework\.NETFramework\&quot;; `
        Remove-Item -Force referenceassemblies.zip; `
    }</code></pre> </li> 
 <li>Run the following command in that directory. This process can take a while. It depends on the size of EC2 instance you launched. In my tests, a t2.2xlarge takes less than 30 minutes to build the image and produces an approximately 15 GB image. <pre><code class="lang-powershell">docker build -t buildtools2017:latest -m 2GB .</code></pre> </li> 
 <li>Run the following command to test the container and start a command shell with all the developer environment variables: <pre><code class="lang-powershell">docker run -it buildtools2017</code></pre> </li> 
 <li>Create a repository in the <a href="https://console.aws.amazon.com/ecs/home?region=us-east-1#/repositories">Amazon ECS console</a>. For the repository name, type <strong>buildtools2017</strong>. Choose <strong>Next step</strong> and then complete the remaining steps.</li> 
 <li>Execute the following command to <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/ECR_AWSCLI.html#AWSCLI_get-login">generate authentication details</a> for our registry to the local Docker engine. Make sure you have permissions to the Amazon ECR registry before you execute the command. <pre><code class="lang-powershell">aws ecr get-login</code></pre> </li> 
 <li>In the same command prompt window, copy and paste the following commands: <pre><code class="lang-powershell">docker tag buildtools2017:latest [YOUR ACCOUNT #].dkr.ecr.[YOUR REGION].amazonaws.com/ buildtools2017:latest
docker push [YOUR ACCOUNT #].dkr.ecr.[YOUR REGION].amazonaws.com/buildtools2017:latest</code></pre> <p><em>Note: Make sure you replace [YOUR ACCOUNT #] with your AWS account number and [YOUR REGION] with the region you are using.</em></p></li> 
</ol> 
<p><strong>Step 3: Configure AWS CodeCommit</strong></p> 
<ol> 
 <li>Before you can access CodeCommit for the first time, you must complete the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-https-windows.html#setting-up-https-windows-credential-helper">initial configuration steps</a>.</li> 
 <li>In the <a href="https://console.aws.amazon.com/codecommit/">CodeCommit console</a>, create a repository named <strong>DotNetFrameworkSampleApp</strong>. On the <strong>Configure email notifications</strong> page, choose <strong>Skip</strong>.</li> 
 <li>Clone a .NET Framework Docker sample application from GitHub. The repository includes a sample ASP.NET Framework that we’ll use to demonstrate our custom build environment.On the EC2 instance, open a command prompt and execute the following commands: <pre><code class="lang-powershell">git clone https://github.com/Microsoft/dotnet-framework-docker-samples.git
cd dotnet-framework-docker-samples
del /Q /S .git
cd aspnetapp
git init
git add . 
git commit -m &quot;First commit&quot;
git remote add origin https://git-codecommit.[YOURREGION].amazonaws.com/v1/repos/DotNetFrameworkSampleApp
git remote -v
git push -u origin master</code></pre> </li> 
 <li>Navigate to the CodeCommit repository and confirm that the files you just pushed are there.</li> 
</ol> 
<p><strong>Step 4: Configure build spec</strong></p> 
<p>To build your .NET Framework application with CodeBuild you use a <em>build spec</em>, which is a collection of build commands and related settings, in YAML format, that AWS CodeBuild can use to run a build. You can include a build spec as part of the source code or you can define a build spec when you create a build project. In this example, I include a build spec as part of the source code.</p> 
<ol> 
 <li>In the root directory of your source directory, create a YAML file named buildspec.yml.</li> 
 <li>Copy the following contents to buildspec.yml: <pre><code class="lang-powershell">version: 0.2

phases:
  pre_build:
    commands:
     - New-Item -ItemType Junction -Path C:\Src -Value $Env:CODEBUILD_SRC_DIR
     - cd C:\Src  
     - nuget.exe restore
  build:
    commands:
     - msbuild </code></pre> </li> 
 <li>Save the changes to the buildspec.yml and use the following commands to add the file to the CodeCommit repository: <pre><code class="lang-powershell">git add . 
git commit -m &quot;Added a build spec file&quot;
git push</code></pre> </li> 
</ol> 
<p><strong>Step 5: Configure CodeBuild</strong></p> 
<p>At this point, we have a Docker image with Visual Studio Build Tools installed and stored in the Amazon ECR registry. We also have a sample ASP.NET Framework application in a CodeCommit repository. Now we are going to set up CodeBuild to build the ASP.NET Framework application.</p> 
<ol> 
 <li>In the Amazon ECR console, choose the repository that was pushed earlier with the docker push command. On the <strong>Permissions</strong> tab, choose <strong>Add</strong>. 
  <ol> 
   <li>For <strong>Sid</strong>, field give it a unique name.</li> 
   <li>For <strong>Effect</strong>, choose <strong>Allow</strong>.</li> 
   <li>For <strong>Principal</strong>, type codebuild.amazonaws.com.</li> 
   <li>For <strong>Action</strong>, choose <strong>Pull only actions</strong>.</li> 
   <li>Choose <strong>Save All</strong>.</li> 
  </ol> </li> 
 <li>Go to the <a href="https://console.aws.amazon.com/codebuild/">CodeBuild console</a>, and choose <strong>Create Project</strong>.</li> 
 <li>For <strong>Project name</strong>, type DotNetFrameworkSampleApp.</li> 
 <li>For <strong>Source Provider</strong>, choose <strong>AWS CodeCommit</strong> and then choose the called DotNetFrameworkSampleApp repository.</li> 
 <li>For <strong>Environment Image</strong>, choose <strong>Specify a Docker image</strong>.</li> 
 <li>For <strong>Environment type</strong>, choose <strong>Windows</strong>.</li> 
 <li>For <strong>Custom image</strong> type, choose <strong>Amazon ECR</strong>.</li> 
 <li>For <strong>Amazon ECR repository</strong>, choose the Docker image with the Visual Studio Build Tools installed, buildtools2017. Your configuration should look like the image below:<br /> <img class="alignnone size-full wp-image-2395" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/05/15/codebuild-win1.png" alt="" width="974" height="491" /><br /> <img class="alignnone size-full wp-image-2396" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/05/15/codebuild-win2.png" alt="" width="974" height="883" /></li> 
 <li>Choose <strong>Continue</strong> and then <strong>Save and Build</strong> to create your CodeBuild project and start your first build. You can monitor the status of the build in the console. You can also configure notifications that will notify subscribers whenever builds succeed, fail, go from one phase to another, or any combination of these events.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-2397" src="https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/05/15/codebuild-win3.png" alt="" width="974" height="556" /></p> 
<p><strong>Summary</strong></p> 
<p>CodeBuild supports a number of platforms and languages <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html">out of the box</a>. By using custom build environments, it can be extended to other runtimes. In this post, I showed you how to build a .NET Framework environment on a Windows container and demonstrated how to use it to build .NET Framework applications in CodeBuild.</p> 
<p>We’re excited to see how customers extend and use CodeBuild to enable continuous integration and continuous delivery for their Windows applications. Feel free to share what you’ve learned extending CodeBuild for your own projects. Just leave questions or suggestions in the comments.</p>