<p>Guest post by Parviz Deyhim, Data &amp; Analytics Practice Lead, Datapipe</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/487/1*3XRnMpiuM0NaVfVhvBsf7A.png" /></figure><p>Streaming data processing has become increasingly prevalent. As a result, different platforms and frameworks have been introduced to reduce the complexity. As Datapipe’s data and analytics consultants, we are frequently asked by customers to help pick the right solution for them. As a result of our customer engagements, we decided to share our findings in our <a href="http://go.datapipe.com/whitepaper-kafka-vs-kinesis-download">Apache Kafka vs. Amazon Kinesis</a> whitepaper. In this post, we summarize some of the whitepaper’s important takeaways.</p><p><strong>Apache Kafka or Amazon Kinesis?</strong></p><p>Both Apache Kafka and Amazon Kinesis are data ingest frameworks/platforms that are meant to help with ingesting data durably, reliably, and with scalability in mind. Both offerings share common core concepts, including replication, sharding/partitioning, and application components (consumer and producers).</p><p>However, before you build a real-time application, you should consider some key differences between the two:</p><p>1. Apache Kafka is an open-source, distributed messaging solution that initially was developed at LinkedIn. As a user, you are responsible for installing and managing clusters, and you also are responsible for ensuring high availability, durability, and failure recovery. In contrast, Amazon Kinesis is a managed platform, so you don’t have to be concerned with hosting the software and the resources.</p><p>2. The cost of using either solution varies considerably. Apache Kafka requires that you host and manage the framework. That means you are responsible for picking the right compute resources and storage capabilities, getting involved in capacity planning, and managing failure detection and recovery. All of these considerations result in resource costs (such as EC2 instances) and human costs (such as DevOps engineers). In contrast, given the hosted nature of Amazon Kinesis, the resource and human costs are significantly lower. However, in certain cases Apache Kafka is more cost effective and should be carefully considered as a suitable option for certain data ingest patterns.</p><p>3. There are also architectural differences such as end-to-end data ingest, consumption latency, and scalability models. For example, in order to scale Apache Kafka, you have to monitor for hot partitions and move or add partitions as needed. In contrast, Amazon Kinesis provides scalability by allowing you to split a given shard to increase capacity or join two shards to reduce capacity for lower cost.</p><p>4. The last section of the whitepaper provides a high-level overview of the producer and consumer APIs of the two solutions. Given that the user applications are directly affected by how the APIs work, it’s important to pay attention to what features are supported by either solution. For example, Apache Kafka provides the ability to retain the last known message in the queue. This feature allows users to de-duplicate data based on a given key. Amazon Kinesis, on the other hand, does not provide this feature; you have to build this capability by using the API.</p><p>For an in-depth analysis of the two solutions in terms of core concepts, architecture, cost analysis, and the application API differences, see the <a href="http://go.datapipe.com/whitepaper-kafka-vs-kinesis-download">Apache Kafka vs. Amazon Kinesis</a> whitepaper.</p><p>This post and the whitepaper focus on the data ingest component of your architecture, but as your organization evolves, the other components of your data analytics capabilities also will change and evolve. As a next generation managed services provider and experts in the public cloud, Datapipe has helped many customers such as <a href="https://www.datapipe.com/about_us/case_studies/">Trulia</a>, <a href="https://www.datapipe.com/blog/2016/04/12/apache-spark-and-h2o-on-aws/">Milliman</a>, and others with their data analytics needs. If you have questions regarding this post or other projects, feel free to <a href="https://www.datapipe.com/contact">contact us</a> to get in touch with one of our experts. And, hopefully we had a chance to meet you in person last week in San Francisco, where we sponsored the <a href="https://aws.amazon.com/start-ups/loft/sf-loft/?sc_channel=el&amp;sc_campaign=aws_startupsblogpost&amp;sc_publisher=aws_startupsblog&amp;sc_country=global&amp;sc_geo=global&amp;sc_outcome=startup">Big Data &amp; Analytics event</a> during the AWS Loft Architecture Week , October 11–13. We also gave a talk at the event called “Working with Apache Kafka and Amazon Kinesis on AWS.”</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=654963bdbf35" width="1" height="1"><hr><p><a href="https://medium.com/aws-activate-startup-blog/the-tale-of-two-messaging-platforms-apache-kafka-and-amazon-kinesis-654963bdbf35">The tale of two messaging platforms: Apache Kafka and Amazon Kinesis</a> was originally published in <a href="https://medium.com/aws-activate-startup-blog">AWS Startup Collection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>