<p>In the era of the cloud, hosting a static website is cheaper, faster and simpler than traditional on premise hosting, where you always have to maintain a running server. &nbsp;Basically, no static website is truly static. I can promise you will find at least a “contact us” page in most static websites, which, by their very nature, are dynamically generated. And all businesses need a “contact us” page to help customers connect with business owners for services, inquiries or feedback. In its simplest form, a “contact us” page should collect a user’s basic information (name, e-mail id, phone number, short message and e-mail) and get shared with the business via email when submitted.</p> 
<p>AWS provides a simplified way to host your static website in an Amazon S3 bucket using your own custom domain. You can either choose to register a new domain with AWS Route 53 or transfer your domain to Route 53 for hosting in <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html">five simple steps</a>.</p> 
<p>Obviously, you don’t want to spin-up a server to handle a simple “contact us” form, but it’s a critical element of your website. Luckily, in this post-cloud world, AWS delivers a serverless option. You can use <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> with <a href="https://aws.amazon.com/api-gateway/">Amazon API Gateway</a> to create a serverless backend and use <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> to send an e-mail to the business owner whenever a customer submits any inquiry or feedback. Let’s learn how to do it.</p> 
<h4><strong>Architecture Flow</strong></h4> 
<p>Here, we are assuming a common website-to-cloud migration scenario, where you have registered your domain name with a 3rd party domain registrar and after migration of your website to Amazon S3. From there, you switched to Amazon Route&nbsp;53 as your DNS provider. You contacted your DNS provider and updated the name server (NS) record to use the name servers in the delegation that you set in Amazon Route 53 (find&nbsp;step-by-step details in the&nbsp;<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html#root-domain-walkthrough-update-ns-record">AWS S3 development guide</a>). Your email server still belongs to your DNS provider as you brought that in the package when you registered your domain with a multi-year contract.</p> 
<p>Following is the architecture flow with detailed guidance.</p> 
<p><img class="aligncenter wp-image-784 size-full" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-1.png" alt="" width="820" height="220" /></p> 
<p>In the above diagram, the customer is submitting their inquiry through a “contact us” form, which is hosted in an Amazon S3 bucket as a static website. Information will flow in three simple steps:</p> 
<ul> 
 <li>Your “contact us” form will collect all user information and post to Amazon API Gateway restful service.</li> 
 <li>Amazon API Gateway will pass collected user information to an AWS lambda function.</li> 
 <li>AWS Lambda function will auto generate an e-mail and forward it to your mail server using Amazon SES.</li> 
</ul> 
<h4><strong>Your “Contact Us” Form</strong></h4> 
<p>Let’s start with a simple “contact us” form html code snippet:</p> 
<div class="hide-language"> 
 <pre><code class="lang-html">&lt;form id=&quot;contact-form&quot; method=&quot;post&quot;&gt;
      &lt;h4&gt;Name:&lt;/h4&gt;
      &lt;input type=&quot;text&quot; style=&quot;height:35px;&quot; id=&quot;name-input&quot; placeholder=&quot;Enter name here…&quot; class=&quot;form-control&quot; style=&quot;width:100%;&quot; /&gt;&lt;br/&gt;
      &lt;h4&gt;Phone:&lt;/h4&gt;
      &lt;input type=&quot;phone&quot; style=&quot;height:35px;&quot; id=&quot;phone-input&quot; placeholder=&quot;Enter phone number&quot; class=&quot;form-control&quot; style=&quot;width:100%;&quot;/&gt;&lt;br/&gt;
      &lt;h4&gt;Email:&lt;/h4&gt;
      &lt;input type=&quot;email&quot; style=&quot;height:35px;&quot; id=&quot;email-input&quot; placeholder=&quot;Enter email here…&quot; class=&quot;form-control&quot; style=&quot;width:100%;&quot;/&gt;&lt;br/&gt;
      &lt;h4&gt;How can we help you?&lt;/h4&gt;
      &lt;textarea id=&quot;description-input&quot; rows=&quot;3&quot; placeholder=&quot;Enter your message…&quot; class=&quot;form-control&quot; style=&quot;width:100%;&quot;&gt;&lt;/textarea&gt;&lt;br/&gt;
      &lt;div class=&quot;g-recaptcha&quot; data-sitekey=&quot;6Lc7cVMUAAAAAM1yxf64wrmO8gvi8A1oQ_ead1ys&quot; class=&quot;form-control&quot; style=&quot;width:100%;&quot;&gt;&lt;/div&gt;
      &lt;button type=&quot;button&quot; onClick=&quot;submitToAPI(event)&quot; class=&quot;btn btn-lg&quot; style=&quot;margin-top:20px;&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre> 
</div> 
<p>The above form will ask the user to enter their name, phone, e-mail, and provide a free-form text box to write inquiry/feedback details and includes a submit button.</p> 
<p>Later in the post, I’ll share the JQuery code for field validation and&nbsp;the variables to collect values.</p> 
<h4><strong>Defining AWS Lambda Function</strong></h4> 
<p>The next step is to create a lambda function, which will get all user information through the API Gateway.&nbsp;The lambda function will look something like this:</p> 
<p><img class="aligncenter wp-image-787 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-2-1-1024x295.png" alt="" width="1024" height="295" /></p> 
<p>The AWS &nbsp;lambda function mailfwd&nbsp;is triggered from the API Gateway POST method, which we will create the next section and send information to Amazon SES for mail forwarding.</p> 
<p>If you are new to AWS Lambda then follow these simple steps to <a href="https://docs.aws.amazon.com/lambda/latest/dg/get-started-create-function.html">Create a Simple Lambda Function</a> and get yourself familiar.</p> 
<ol> 
 <li>Go to the console and click on “Create Function” and select blueprints for hello-world nodejs6.10 version as shown in below screenshot and click on configure button at the bottom.<img class="aligncenter wp-image-788 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-3-1024x471.png" alt="" width="1024" height="471" /></li> 
 <li>To create your AWS Lambda function, &nbsp;select the “edit code inline” setting, which will have an editor box with the code in it, and replace that code (making sure to change contactus@example.com to your real e-mail address and update your actual domain in the response variable): 
  <div class="hide-language"> 
   <pre><code class="lang-json"></code></pre> 
  </div> 
  <div class="hide-language"> 
   <pre><code class="lang-json">var AWS = require('aws-sdk');
var ses = new AWS.SES();
 
var RECEIVER = 'contactus@example.com';
var SENDER = 'contactus@example.com';

var response = {
 &quot;isBase64Encoded&quot;: false,
 &quot;headers&quot;: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'example.com'},
 &quot;statusCode&quot;: 200,
 &quot;body&quot;: &quot;{\&quot;result\&quot;: \&quot;Success.\&quot;}&quot;
 };

exports.handler = function (event, context) {
    console.log('Received event:', event);
    sendEmail(event, function (err, data) {
        context.done(err, null);
    });
};
 
function sendEmail (event, done) {
    var params = {
        Destination: {
            ToAddresses: [
                RECEIVER
            ]
        },
        Message: {
            Body: {
                Text: {
                    Data: 'name: ' + event.name + '\nphone: ' + event.phone + '\nemail: ' + event.email + '\ndesc: ' + event.desc,
                    Charset: 'UTF-8'
                }
            },
            Subject: {
                Data: 'Website Referral Form: ' + event.name,
                Charset: 'UTF-8'
            }
        },
        Source: SENDER
    };
    ses.sendEmail(params, done);
}
</code></pre> 
  </div> </li> 
</ol> 
<p>Now you can execute and test your AWS lambda function as directed in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/get-started-create-function.html">AWS developer guide</a>. Make sure to update the Lambda execution role and follow the steps provided in the Lambda developer guide to <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example-create-iam-role.html">create a basic execution role</a>.</p> 
<p>Add following code under policy to allow Amazon SES access to AWS lambda function:</p> 
<div class="hide-language"> 
 <pre><code class="lang-json">{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Sid&quot;: &quot;VisualEditor0&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: &quot;ses:SendEmail&quot;,
            &quot;Resource&quot;: &quot;*&quot;
        }
    ]
}
</code></pre> 
</div> 
<p><strong>Creating the API Gateway</strong></p> 
<p>Now, let’s create the API Gateway that will provide a restful API endpoint for our AWS Lambda function, which we are going to create next. We will use this API endpoint to post user-submitted information in the “Contact Us” form — which will also get posted to the AWS Lambda function.</p> 
<p>If you are new to API Gateway, follow these simple steps to <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-from-example-console.html">create and test an API from the example in the API Gateway Console</a>&nbsp;to familiarize yourself.</p> 
<ol> 
 <li>Login to AWS console and select API Gateway.&nbsp; Click on create new API and fill your API name.<br /> <img class="aligncenter wp-image-791 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-4-1024x396.png" alt="" width="1024" height="396" /></li> 
 <li>Now go to your API name — listed in the left-hand navigation — click on the “actions” drop down, and select “create resource.”<img class="aligncenter wp-image-792 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-5-1024x424.png" alt="" width="1024" height="424" /></li> 
 <li>Select your newly-created resource and choose “create method.”&nbsp; Choose a POST.&nbsp; Here, you will&nbsp;choose our AWS Lambda Function. To do this, select “mailfwd” from the drop down.<img class="aligncenter wp-image-793 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-6-1024x501.png" alt="" width="1024" height="501" /></li> 
 <li>After saving the form above, Click on the “action” menu and choose “deploy API.”&nbsp; You will see final resources and methods something like below:<img class="aligncenter wp-image-794 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-7-1024x526.png" alt="" width="1024" height="526" /></li> 
 <li>Now get your Restful API URL from the “stages” tab as shown in the screenshot below. We will use this URL on our “contact us” HTML page to send the request with all user information.<img class="aligncenter wp-image-797 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-8-1024x306.png" alt="" width="1024" height="306" /></li> 
 <li>Make sure to Enable CORS in the API Gateway or you’ll get an error:”Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at <a href="https://abc1234.execute-api.us-east-1.amazonaws.com/02/mailme">https://abc1234.execute-api.us-east-1.amazonaws.com/02/mailme</a>. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).”</li> 
</ol> 
<p><strong>Setup Amazon SES</strong></p> 
<p>Amazon SES requires that you verify your&nbsp;identities&nbsp;(the domains or email addresses that you send email from) to confirm that you own them, and to prevent unauthorized use. Follow the steps&nbsp;outlined in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses-procedure.html">Amazon SES user guide </a>to verify your sender e-mail.</p> 
<p><img class="aligncenter wp-image-798 size-large" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/06/19/contact-arch-9-1024x311.png" alt="" width="1024" height="311" /></p> 
<h4>Connecting it all Together</h4> 
<p>Since we created our AWS Lambda function and provided the API-endpoint access using API gateway, it’s time to connect all the pieces&nbsp;together and&nbsp;test them. Put following JQuery code in your ContactUs HTML page &lt;head&gt; section. Replace URL variable with your API Gateway URL. You can change field validation as per your need.</p> 
<div class="hide-language"> 
 <pre><code class="lang-js">function submitToAPI(e) {
       e.preventDefault();
       var URL = &quot;https://abc1234.execute-api.us-east-1.amazonaws.com/01/contact&quot;;

            var Namere = /[A-Za-z]{1}[A-Za-z]/;
            if (!Namere.test($(&quot;#name-input&quot;).val())) {
                         alert (&quot;Name can not less than 2 char&quot;);
                return;
            }
            var mobilere = /[0-9]{10}/;
            if (!mobilere.test($(&quot;#phone-input&quot;).val())) {
                alert (&quot;Please enter valid mobile number&quot;);
                return;
            }
            if ($(&quot;#email-input&quot;).val()==&quot;&quot;) {
                alert (&quot;Please enter your email id&quot;);
                return;
            }

            var reeamil = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,6})?$/;
            if (!reeamil.test($(&quot;#email-input&quot;).val())) {
                alert (&quot;Please enter valid email address&quot;);
                return;
            }

       var name = $(&quot;#name-input&quot;).val();
       var phone = $(&quot;#phone-input&quot;).val();
       var email = $(&quot;#email-input&quot;).val();
       var desc = $(&quot;#description-input&quot;).val();
       var data = {
          name : name,
          phone : phone,
          email : email,
          desc : desc
        };

       $.ajax({
         type: &quot;POST&quot;,
         url : &quot;https://abc1234.execute-api.us-east-1.amazonaws.com/01/contact&quot;,
         dataType: &quot;json&quot;,
         crossDomain: &quot;true&quot;,
         contentType: &quot;application/json; charset=utf-8&quot;,
         data: JSON.stringify(data),

         
         success: function () {
           // clear form and show a success message
           alert(&quot;Successfull&quot;);
           document.getElementById(&quot;contact-form&quot;).reset();
       location.reload();
         },
         error: function () {
           // show an error message
           alert(&quot;UnSuccessfull&quot;);
         }});
     }
</code></pre> 
</div> 
<p>Now you should be able to submit your contact form and&nbsp;start receiving email notifications when a form is completed and submitted.</p> 
<h4>Conclusion</h4> 
<p>Here we are addressing&nbsp;a common&nbsp;use case — a simple contact form — which is important for any small business hosting their website on Amazon S3. This post should help make your static website&nbsp;more dynamic without spinning up any server.</p> 
<p>Have you had challenges adding a “contact us” form to your small business website?</p> 
<p><strong>About the author</strong></p> 
<p><img class="size-full wp-image-354 alignleft" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/01/17/saurabh-headshot.png" alt="" width="72" height="96" />Saurabh Shrivastava&nbsp;is a Solutions Architect working with global systems integrators. He works with our partners and customers to provide them architectural guidance for building scalable architecture in hybrid and AWS environment. In his spare time, he enjoys spending time with his family, hiking, and biking.</p>