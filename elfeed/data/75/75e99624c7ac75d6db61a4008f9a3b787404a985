<p>As you may have been able to tell from many of the announcements that we have made over the last four or five years, we are working to build a wide-ranging set of <a href="https://aws.amazon.com/iot/">Internet of Things</a> (IoT) services and capabilities. Here’s a quick recap:</p> 
<p><a href="https://aws.amazon.com/iot/"><img style="float: right" src="https://media.amazonwebservices.com/blog/2019/iot_grid_2.png" width="400" height="521" /></a><strong>October 2015</strong> – <a href="https://aws.amazon.com/iot-core/">AWS IoT Core</a> – A fundamental set of <a href="https://aws.amazon.com/blogs/aws/aws-iot-cloud-services-for-connected-devices/">Cloud Services for Connected Devices</a>.</p> 
<p><strong>Jun 2017</strong> – <a href="https://aws.amazon.com/greengrass" title="">AWS Greengrass</a> – The ability to <a href="https://aws.amazon.com/blogs/aws/aws-greengrass-run-aws-lambda-functions-on-connected-devices/">Run AWS Lambda Functions on Connected Devices</a>.</p> 
<p><strong>November 2017</strong> – <a href="https://aws.amazon.com/iot-device-management/">AWS IoT Device Management</a> – <a href="https://aws.amazon.com/blogs/aws/aws-iot-device-management/">Onboarding, Organization, Monitoring, and Remote Management of Connected Devices</a>.</p> 
<p><strong>November 2017</strong> – <a href="https://aws.amazon.com/iot-analytics/">AWS IoT Analytics</a> – <a href="https://aws.amazon.com/blogs/aws/launch-presenting-aws-iot-analytics/">Advanced Data Analysis for IoT Devices</a>.</p> 
<p><strong>November 2017</strong> – <a href="https://aws.amazon.com/freertos/" title="">Amazon FreeRTOS</a> – <a href="https://aws.amazon.com/blogs/aws/announcing-amazon-freertos/">An IoT Operating System for Microcontrollers</a>.</p> 
<p><strong>April 2018</strong> – <a href="https://aws.amazon.com/greengrass/ml/">Greengrass ML Inference</a> – <a href="https://aws.amazon.com/blogs/aws/new-machine-learning-inference-at-the-edge-using-aws-greengrass/">The power to do Machine Learning Inference at the Edge</a>.</p> 
<p><strong>August 2018</strong> – <a href="https://aws.amazon.com/iot-device-defender/" title="">AWS IoT Device Defender</a> – A service that helps to <a href="https://aws.amazon.com/blogs/aws/aws-iot-device-defender-now-available-keep-your-connected-devices-safe/">Keep Your Connected Devices Safe</a>.</p> 
<p>Last November we also <a href="https://press.aboutamazon.com/news-releases/news-release-details/aws-announces-four-new-capabilities-make-it-easier-build-iot">announced our plans</a> to launch four new IoT Services:</p> 
<ul> 
 <li><a href="https://aws.amazon.com/iot-sitewise/" title="">AWS IoT SiteWise</a> to collect, structure, and search data from industrial equipment at scale.</li> 
 <li><a href="https://aws.amazon.com/iot-events/" title="">AWS IoT Events</a> to detect and respond to events at scale.</li> 
 <li><a href="https://aws.amazon.com/iot-things-graph/" title="">AWS IoT Things Graph</a> to build IoT applications visually.</li> 
 <li><a href="https://docs.aws.amazon.com/greengrass/latest/developerguide/connectors.html">AWS IoT Greengrass Connectors</a> to simplify and accelerate the process of connecting devices.</li> 
</ul> 
<p>You can use these services individually or together to build all sorts of powerful, connected applications!</p> 
<p><span style="text-decoration: underline"><strong>AWS IoT Events Now Available</strong></span><br /> Today we are making <a href="https://aws.amazon.com/iot-events/" title="">AWS IoT Events</a> available in production form in four AWS Regions. You can use this service to monitor and respond to events (patterns of data that identify changes in equipment or facilities) at scale. You can detect a misaligned robot arm, a motion sensor that triggers outside of business hours, an unsealed freezer door, or a motor that is running outside of tolerance, all with the goal of driving faster and better-informed decisions.</p> 
<p>As you will see in a moment, you can easily create <strong>detector models</strong> that represent your devices, their states, and the transitions (driven by sensors and events, both known as <strong>inputs</strong>) between the states. The models can trigger <strong>actions</strong> when critical events are detected, allowing you to build robust, highly automated systems. Actions can, for example, send a text message to a service technician or invoke an <a href="https://aws.amazon.com/lambda/" title="">AWS Lambda</a> function.</p> 
<p>You can access <span title="">AWS IoT Events</span> from the <a href="https://console.aws.amazon.com/iotevents/home">AWS IoT Event Console</a> or by writing code that calls the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/Welcome.html">AWS IoT Events API</a> functions. I’ll use the Console, and I will start by creating a detector model. I click <strong>Create detector model </strong>to begin:</p> 
<p><img class="size-medium aligncenter" src="https://media.amazonwebservices.com/blog/2019/ie_con_main_2.png" width="900" height="602" /></p> 
<p>I have three options; I’ll go with the demo by clicking <strong>Launch demo with inputs</strong>:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_detectors_1.png" width="900" height="515" /></p> 
<p>This shortcut creates an input and a model, and also enables some “demo” functionality that sends data to the model. The model looks like this:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_model_1.png" width="900" height="587" /></p> 
<p>Before examining the model, let’s take a look at the input. I click on <strong>Inputs</strong> in the left navigation to see them:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_nav_1.png" width="360" height="482" /></p> 
<p>I can see all of my inputs at a glance; I click on the newly created input to learn more:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_inputs_list_1.png" width="900" height="270" /></p> 
<p>This input represents the battery <strong>voltage</strong> measured from a device that is connected to a particular <strong>powerwallId</strong>:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_voltage_def_1.png" width="900" height="580" /></p> 
<p>Ok, let’s return to (and dissect) the detector model! I return to the navigation, click <strong>Detector models</strong>, find my model, and click it:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_model_info_1.png" width="900" height="669" /></p> 
<p>There are three Send options at the top; each one sends data (an input) to the detector model. I click on <strong>Send data for Charging</strong> to get started. This generates a message that looks like this; I click <strong>Send data</strong> to do just that:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_sample_charging_mesage_1.png" width="700" height="423" /></p> 
<p>Then I click <strong>Send data for Charged</strong> to indicate that the battery is fully charged. The console shows me the state of the detector:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_detector_charged_1.png" width="900" height="215" /></p> 
<p>Each time an input is received, the detector processes it. Let’s take a closer look at the detector. It has three states (<strong>Charging</strong>, <strong>Charged</strong>, and <strong>Discharging</strong>):</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_detector_detail_1.png" width="900" height="846" /></p> 
<p>The detector starts out in the <strong>Charging</strong> state, and transitions to <strong>Charged </strong>when the <strong>Full_charge </strong>event is triggered. Here’s the definition of the event, including the trigger logic:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_trigger_def_1.png" width="303" height="773" /></p> 
<p>The trigger logic is evaluated each time an input is received (your IoT app must call <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchPutMessage.html"><code>BatchPutMessage</code></a> to inform AWS IoT Events). If the trigger logic evaluates to a true condition, the model transitions to the new (destination) state, and it can also initiate an event action. This transition has no actions; I can add one (or more) by clicking <strong>Add action</strong>. My choices are:</p> 
<ul> 
 <li><strong>Send MQTT Message</strong> – Send a message to an MQTT topic.</li> 
 <li><strong>Send SNS Message</strong> – Send a message to an SNS target, identifed by an ARN.</li> 
 <li><strong>Set Timer</strong> – Set, reset, or destroy a timer. Times can be expressed in seconds, minutes, hours, days, or months.</li> 
 <li><strong>Set Variable</strong> – Set, increment, or decrement a variable.</li> 
</ul> 
<p>Returning (once again) to the detector, I can modify the states as desired. For example, I could fine-tune the <strong>Discharging</strong> aspect of the detector by adding a <strong>LowBattery</strong> state:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_detector_better_1.png" width="800" height="730" /></p> 
<p>After I create my inputs and my detector, I Publish the model so that my IoT devices can use and benefit from it. I click <strong>Publish</strong> and fill in a few details:</p> 
<p><img class="aligncenter size-medium" src="https://media.amazonwebservices.com/blog/2019/ie_publish_1.png" width="900" height="925" /></p> 
<p>The <strong>Detector generation method</strong> has two options. I can <strong>Create a detector for each unique key value</strong> (if I have a bunch of devices), or I can <strong>Create a single detector</strong> (if I have one device). If I choose the first option, I need to choose the key that separates one device from another.</p> 
<p>Once my detector has been published, I can send data to it using AWS IoT Analytics, IoT Core, or from a Lambda function.</p> 
<p><span style="text-decoration: underline"><strong>Get Started Today</strong></span><br /> We are launching <a href="https://aws.amazon.com/iot-events/" title="">AWS IoT Events</a> in the <span title="">US East (N. Virginia)</span>, <span title="">US East (Ohio)</span>, <span title="">US West (Oregon)</span>, and <span title="">Europe (Ireland)</span> Regions and you can start using it today!</p> 
<p>— <a href="https://twitter.com/jeffbarr">Jeff</a>;</p> 
<p>&nbsp;</p> 
<p>&nbsp;</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=-fjz3il7IxM:yTnwIfr-ZoI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=-fjz3il7IxM:yTnwIfr-ZoI:dnMXMwOfBR0"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=dnMXMwOfBR0" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?a=-fjz3il7IxM:yTnwIfr-ZoI:7Q72WNTAKBA"><img src="http://feeds.feedburner.com/~ff/AmazonWebServicesBlog?d=7Q72WNTAKBA" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/AmazonWebServicesBlog/~4/-fjz3il7IxM" height="1" width="1" alt=""/>