<h2>Leveraging Analytics and Machine Learning Tools for Readmissions Prediction</h2> 
<p><em>This blog post was co-authored by Ujjwal Ratan, a senior AI/ML solutions architect on the global life sciences team.</em></p> 
<p>In <a href="https://aws.amazon.com/blogs/architecture/store-protect-optimize-your-healthcare-data-with-aws/">Part 1</a>, we looked at various options to ingest and store sensitive healthcare data using AWS. The post described our shared responsibility model and provided a reference architecture that healthcare organizations could use as a foundation to build a robust platform on AWS to store and protect their sensitive data, including protected health information (PHI). In Part 2, we will dive deeper into how customers can optimize their healthcare datasets for analytics and machine learning (ML) to address clinical and operational challenges.</p> 
<p>There are a number of factors creating pressures for healthcare organizations, both providers and payers, to adopt analytic tools to better understand their data: regulatory requirements, changing reimbursement models from volume- to value-based care, population health management for risk-bearing organizations, and movement toward personalized medicine. As organizations deploy new solutions to address these areas, the availability of large and complex datasets from electronic health records, genomics, images (for example, CAT, PET, MRI, ultrasound, X-ray), and IoT has been increasing. With these data assets growing in size, healthcare organizations want to leverage analytic and ML tools to derive new actionable insights across their departments.</p> 
<p>One example of the use of ML in healthcare is diagnostic image analysis, including digital pathology. Pathology is extremely important in diagnosing and treating patients, but it is also extremely time-consuming and largely a manual process. While the complexity and quantity of workloads are increasing, the number of pathologists is decreasing. According to one study, the number of active pathologists could drop by 30 percent by 2030 compared to 2010 levels. (1) A cloud architecture and solution can automate part of the workflow, including sample management, analysis, storing, sharing, and comparison with previous samples to complement existing provider workflows effectively. A recent study using deep learning to analyze metastatic breast cancer tissue samples resulted in an approximately 85% reduction in human error rate. (2)</p> 
<p>ML is also being used to assist radiologists in examining other diagnostic images such as X-rays, MRIs, and CAT scans. Having large quantities of images and metadata to train the algorithms that are the key to ML is one of the main challenges for ML adoption. To help address this problem, the National Institutes of Health recently released 90,000 X-ray plates tagged either with one of 14 diseases or tagged as being normal. Leading academic medical centers are using these images to build their neural networks and train their algorithms. With advanced analytics and ML, we can answer the hard questions such as “what is the next best action for my patient, the expected outcome, and the cost.”</p> 
<h3>The foundations for a great analytical layer</h3> 
<p>Let’s pick up from where we left off in Part 1. We have seen how providers can ingest data into AWS from their data centers and store it securely into different services depending on the type of data. For example:</p> 
<ol> 
 <li>All object data is stored in Amazon S3, Amazon S3 Infrequent Access, or Amazon Glacier depending on how often they are used.</li> 
 <li>Data from the provider’s database is either processed and stored as objects in Amazon S3 or aggregated into data marts on Amazon Redshift.</li> 
 <li>Metadata of the objects on Amazon S3 are maintained in the DynamoDB database.</li> 
 <li>Amazon Athena is used to query the objects directly stored on Amazon S3 to address ad hoc requirements.</li> 
</ol> 
<p>We will now look at two best practices that are key to building a robust analytical layer using these datasets.</p> 
<ol> 
 <li>Separating storage and compute: You should not be compelled to scale compute resources just to store more data. The scaling rules of the two layers should be separate.<br /> <img class="size-full wp-image-859 alignnone" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions1.png" alt="" width="697" height="681" /></li> 
 <li>Leverage the vast array of AWS big data services when it comes to building the analytical platforms instead of concentrating on just a few of them. Remember, one size does not fit all.</li> 
</ol> 
<h3>Technical overview</h3> 
<p>In this overview, we will demonstrate how we can leverage AWS big data and ML services to build a scalable analytical layer for our healthcare data. We will use a single source of data stored in Amazon S3 for performing ad hoc analysis using Amazon Athena, integrate it with a data warehouse on Amazon Redshift, build a visual dashboard for some metrics using Amazon QuickSight, and finally build a ML model to predict readmissions using Amazon SageMaker. By not moving the data around and just connecting to it using different services, we avoid building redundant copies of the same data. There are multiple advantages to this approach:</p> 
<ol> 
 <li>We optimize our storage. Not having redundant copies reduces the amount of storage required.</li> 
 <li>We keep the data secure with only authorized services having access to it. Keeping multiple copies of the data can result in higher security risk.</li> 
 <li>We are able to scale the storage and compute separately as needed.</li> 
 <li>It becomes easier to manage the data and monitor usage metrics centrally such as how often the data has been accessed, who has been accessing it, and what has been the growth pattern of the data over a period of time. These metrics can be difficult to aggregate if the data is duplicated multiple times.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-860" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions2.png" alt="" width="1077" height="476" /></p> 
<p>Let’s build out this architecture using the following steps:</p> 
<ol> 
 <li><strong>Create a database in AWS Glue Data Catalog</strong></li> 
</ol> 
<p>We will do this using a Glue crawler. First create a JSON file that contains the parameters for the Glue crawler.</p> 
<pre><code class="lang-json">{
&quot;Name&quot;: &quot;readmissions&quot;,
&quot;Role&quot;: &quot;arn of the role for Glue&quot;,
&quot;DatabaseName&quot;: &quot;readmissions&quot;,
&quot;Description&quot;: &quot;glue data catalog for storing readmission data&quot;,
&quot;Targets&quot;: {
&quot;S3Targets&quot;: [
{
&quot;Path&quot;: &quot;s3://&lt;bucket&gt;/&lt;prefix&gt;&quot;
},
{
&quot;Path&quot;: &quot;s3://&lt;bucket&gt;/&lt;prefix&gt;&quot;
}
]
}
}</code></pre> 
<p>As you can see, the crawler will crawl two locations in Amazon S3 and save the resulting tables in a new database called “readmissions.” Replace the role ARN and Amazon S3 locations with your corresponding details. Save this in a file <strong>create_crawler.json</strong>. Then from the <a href="https://docs.aws.amazon.com/cli/latest/userguide/installing.html">AWS CLI</a>, call the following command to create the crawler:</p> 
<blockquote> 
 <pre>aws glue create-crawler --cli-input-json file://create_crawler.json</pre> 
</blockquote> 
<p>Once the crawler is created, run it by calling the following command:</p> 
<blockquote> 
 <pre>aws glue start-crawler --name readmissions</pre> 
</blockquote> 
<p>Log on to the AWS Glue console, navigate to the crawlers, and wait until the crawler completes running.</p> 
<p><img class="alignnone size-full wp-image-861" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions3.png" alt="" width="1814" height="458" /></p> 
<p>This will create two tables — phi and non-phi — in a database named “readmissions” in the AWS Glue Data Catalog as shown below.</p> 
<p><img class="alignnone size-full wp-image-862" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions4.png" alt="" width="2476" height="412" /></p> 
<ol start="2"> 
 <li><strong>Query the data using Athena</strong></li> 
</ol> 
<p>The Amazon Glue Data Catalog is seamlessly integrated with Amazon Athena. For details on how to enable this, see <a href="https://docs.aws.amazon.com/athena/latest/ug/glue-athena.html">Integration with AWS Glue</a>.</p> 
<p>As a result of this integration, the tables created using the Glue crawler can now be queried using Amazon Athena. Amazon Athena allows you to do ad hoc analysis on the dataset. You can do exploratory analysis on the data and also determine its structure and quality. This type of upfront ad hoc analysis is invaluable for ensuring the data quality in your downstream data warehouse or your ML algorithms that will make use of this data for training models. In the next few sections, we will explore these aspects in greater detail.</p> 
<p>To query the data using Amazon Athena, navigate to the <a href="https://console.aws.amazon.com/athena">Amazon Athena console</a>.</p> 
<blockquote>
 <p><strong>NOTE:</strong> Make sure the region is the same as the region you chose in the previous step. If it’s not the same, switch the region by using the drop-down menu on the top right-hand corner of the screen.</p>
</blockquote> 
<p>Once you arrive in the Amazon Athena console, you should already see the tables and databases you created previously, and you should be able to see the data in the two tables by writing Amazon Athena queries. Here is a list of the top 10 rows from the table <strong>readmissions.nonphi</strong>:</p> 
<p><img class="alignnone size-full wp-image-863" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions5.png" alt="" width="1912" height="814" /></p> 
<p>Now that we are able to query the dataset, we can run some queries for exploratory analysis. Here are just a few examples:</p> 
<table> 
 <tbody> 
  <tr> 
   <td><strong>Analysis</strong></td> 
   <td><strong>Amazon Athena Query</strong></td> 
  </tr> 
  <tr> 
   <td>How many Patients have been discharged to home?</td> 
   <td>SELECT count(*) from nonphi where discharge_disposition = ‘Discharged to home’</td> 
  </tr> 
  <tr> 
   <td>What’s the minimum and the maximum number of procedures carried out on a patient?</td> 
   <td>SELECT min(num_procedures), max(num_procedures) from nonphi</td> 
  </tr> 
  <tr> 
   <td>How many patients were referred to this hospital by another physician?</td> 
   <td>SELECT count(*) FROM nonphi group by admission_source having admission_source = ‘Physician Referral’</td> 
  </tr> 
  <tr> 
   <td>What were the top 5 specialties with positive readmissions?</td> 
   <td> <p>SELECT count(readmission_result) as num_readmissions, medical_specialty from</p> <p>(select readmission_result,medical_specialty from nonphi where readmission_result = ‘Yes’)</p> <p>group by medical_specialty order by num_readmissions desc limit 5</p></td> 
  </tr> 
  <tr> 
   <td>Which payer was responsible for paying for treatments that involved more than 5 procedures?</td> 
   <td>SELECT distinct payer_code from nonphi where num_procedures &gt;5 and payer_code !='(null)’</td> 
  </tr> 
 </tbody> 
</table> 
<p>While this information is valuable, you typically do not want to invest too much time and effort into building an ad hoc query platform like this because at this stage, you are not even sure if the data is of any value for your business-critical analytical applications. One benefit of using Amazon Athena for ad hoc analysis is that it requires little effort or time. It uses Schema-On-Read instead of schema on write, allowing you to work with various source data formats without worrying about the underlying structures. You can put the data on Amazon S3 and start querying immediately.</p> 
<ol start="3"> 
 <li><strong>Create an external table in Amazon Redshift Spectrum with the same data</strong></li> 
</ol> 
<p>Now that we are satisfied with the data quality and understand the structure of the data, we would like to integrate this with a data warehouse. We’ll use <a href="https://aws.amazon.com/redshift/spectrum/">Amazon Redshift Spectrum</a> to create external tables on the files in S3 and then integrate these external tables with a physical table in Amazon Redshift.</p> 
<p>Amazon Redshift Spectrum allows you to run Amazon Redshift SQL queries against data on Amazon S3, extending the capabilities of your data warehouse beyond the physical Amazon Redshift clusters. You don’t need to do any elaborate ETL or move the data around. The data exists in one place in Amazon S3 and you interface with it using different services (Athena and Redshift Spectrum) to satisfy different requirements.</p> 
<p>Before beginning, please look at this <a href="https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html">step by step guide</a> to set up Redshift Spectrum.</p> 
<p>After you have set up Amazon Redshift Spectrum, you can begin executing the steps below:</p> 
<ol> 
 <li>Create an external schema called “readmissions.” Amazon Redshift Spectrum integrates with the Amazon Glue Data Catalog and allows you to create spectrum tables by referring the catalog. This feature allows you to build the external table on the same data that you analyzed with Amazon Athena in the previous step without the need for ETL. This can be achieved by the following:</li> 
</ol> 
<blockquote> 
 <pre>create external schema readmissions
from data catalog
database 'readmissions'
iam_role 'arn for your redshift spectrum role '
region ‘region when the S3 data exists’;</pre> 
 <p><strong>NOTE:</strong> Make sure you select the appropriate role arn and region.</p>
</blockquote> 
<ol start="2"> 
 <li>Once the command executes successfully, you can confirm the schema was created by running the following:</li> 
</ol> 
<blockquote> 
 <pre>select * from svv_external_schemas;</pre> 
</blockquote> 
<p><img class="alignnone size-full wp-image-864" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions6.png" alt="" width="912" height="105" /></p> 
<p style="padding-left: 30px">You should see a row similar to the one above with your corresponding region and role.</p> 
<p style="padding-left: 30px">You can also see the external tables that were created by running the following command:</p> 
<blockquote> 
 <pre>select * from SVV_EXTERNAL_TABLES;</pre> 
</blockquote> 
<p><img class="alignnone size-full wp-image-865" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions7.png" alt="" width="1597" height="57" /></p> 
<ol start="3"> 
 <li>Let’s confirm we can see all the rows in the external table by counting the number of rows:</li> 
</ol> 
<blockquote> 
 <pre>select count(*) from readmissions.phi;
select count(*) from readmissions.nonphi;</pre> 
</blockquote> 
<p style="padding-left: 30px">You should see 101,766 rows in both the tables, confirming that your external tables contain all the records that you read using the AWS Glue data crawler and analyzed using Athena.</p> 
<ol start="4"> 
 <li>Now that we have all the external tables created, let’s create an aggregate fact table in the physical Redshift data warehouse. We can use the “As Select” clause of the Redshift create table query to do this:</li> 
</ol> 
<blockquote> 
 <pre>create table readmissions_aggregate_fact as
select
readmission_result,admission_type,discharge_disposition,diabetesmed,
avg(time_in_hospital) as avg_time_in_hospital,
min(num_procedures) as min_procedures,
max(num_procedures) as max_procedures,
avg(num_procedures) as avg_num_procedures,
avg(num_medications) as avg_num_medications,
avg(number_outpatient) as avg_number_outpatient,
avg(number_emergency) as avg_number_emergency,
avg(number_inpatient) as avg_number_inpatient,
avg(number_diagnoses) as avg_number_diagnoses
from readmissions.nonphi
group by readmission_result,admission_type,discharge_disposition,diabetesmed</pre> 
</blockquote> 
<p style="padding-left: 30px">Once this query executes successfully, you can see a new table created in the physical public schema of your Amazon Redshift cluster. You can confirm this by executing the following query:</p> 
<blockquote> 
 <pre>select distinct(tablename) from pg_table_def where schemaname = 'public'</pre> 
</blockquote> 
<p><img class="alignnone size-full wp-image-866" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions8.png" alt="" width="199" height="73" /></p> 
<ol start="4"> 
 <li><strong>Build a QuickSight Dashboard from the aggregate fact</strong></li> 
</ol> 
<p style="padding-left: 30px">We can now create dashboards to visualize the data in our readmissions aggregate fact table using Amazon QuickSight. Here are some examples of reports you can generate using Amazon QuickSight on the readmission data.</p> 
<p><img class="alignnone size-full wp-image-867" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions9.png" alt="" width="1828" height="609" /></p> 
<p><img class="alignnone size-full wp-image-868" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions10.png" alt="" width="1832" height="610" /></p> 
<p>For more details on Amazon QuickSight, refer to the <a href="https://docs.aws.amazon.com/quicksight/latest/user/welcome.html">service documentation.</a></p> 
<ol start="5"> 
 <li>Build a ML model in Amazon SageMaker to predict readmissions</li> 
</ol> 
<p style="padding-left: 30px">As a final step, we will create a ML model to predict the attribute <strong>readmission_result</strong>, which denotes if a patient was readmitted or not, using the non-PHI dataset.</p> 
<ol> 
 <li><a href="https://docs.aws.amazon.com/sagemaker/latest/dg/gs-setup-working-env.html">Create a notebook instance</a> in Amazon SageMaker that is used to develop our code.</li> 
 <li>The code reads non-PHI data from the Amazon S3 bucket as a data frame in Python. This is achieved using the <strong>pandas.readcsv</strong> function.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-869" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions11.png" alt="" width="1012" height="614" /></p> 
<ol start="3"> 
 <li>Use the <strong>pandas.get_dummies</strong> function to encode categorical values into numeric values for use with the model.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-870" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions12.png" alt="" width="1009" height="434" /></p> 
<ol start="4"> 
 <li>Split the data into two, 80% for training and 20% for testing, using the <strong>numpy.random.rand</strong> function.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-871" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions13.png" alt="" width="1019" height="261" /></p> 
<ol start="5"> 
 <li>Form train_X, train_y and test_X, test_y corresponding to training features, training labels, testing features, and testing labels respectively.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-872" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions14.png" alt="" width="1025" height="472" /></p> 
<ol start="6"> 
 <li>Use the Amazon SageMaker Linear learner algorithm to train our model. The implementation of the algorithm uses dense tensor format to optimize the training job. Use the function <strong>write_numpy_to_dense_tensor</strong> from the Amazon SageMaker library to convert the numpy array into the dense tensor format.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-873" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions15.png" alt="" width="1113" height="352" /></p> 
<ol start="7"> 
 <li>Create the training job in Amazon SageMaker with appropriate configurations and run it.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-874" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions16.png" alt="" width="1021" height="556" /></p> 
<ol start="8"> 
 <li>Once the training job completes, create an endpoint in Amazon SageMaker to host our model, using the linear.deploy function to deploy the endpoint.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-875" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions17.png" alt="" width="690" height="44" /></p> 
<ol start="9"> 
 <li>Finally, run a prediction by invoking the endpoint using the <strong>linear_predictor.predict</strong> function.</li> 
</ol> 
<p><img class="alignnone size-full wp-image-876" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/10/03/readmissions18.png" alt="" width="1019" height="202" /></p> 
<p>You can view the complete notebook <a href="https://github.com/ujjwalr/Sagemaker-ReadmissionPrediction/blob/master/Readmissions.ipynb">here</a>.</p> 
<p>Data, analytics, and ML are strategic assets to help you manage your patients, staff, equipment, and supplies more efficiently. These technologies can also help you be more proactive in treating and preventing disease. Industry luminaries share this opinion: “By leveraging big data and scientific advancements while maintaining the important doctor-patient bond, we believe we can create a health system that will go beyond curing disease after the fact to preventing disease before it strikes by focusing on health and wellness,” writes Lloyd B. Minor, MD, dean of the <a href="http://med.stanford.edu/">Stanford School of Medicine</a>.</p> 
<p>ML and analytics offer huge value in helping achieve the quadruple aim : improved patient satisfaction, improved population health, improved provider satisfaction, and reduced costs. Technology should never replace the clinician but instead become an extension of the clinician and allow them to be more efficient by removing some of the mundane, repetitive tasks involved in prevention, diagnostics, and treatment of patients.</p> 
<p><em>(1) “The Digital Future of Pathology.” The Medical Futurist, 28 May 2018, medicalfuturist.com/digital-future-pathology.</em></p> 
<p><em>(2) Wang, Dayong, et al. “Deep Learning for Identifying Metastatic Breast Cancer.” Deep Learning for Identifying Metastatic Breast Cancer, 18 June 2016, arxiv.org/abs/1606.05718.</em></p> 
<h3>About the Author</h3> 
<p><img class="alignleft size-thumbnail wp-image-711" src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2018/04/25/stejep-photo-119x150.jpg" alt="" width="119" height="150" /></p> 
<p>Stephen Jepsen is a Global HCLS Practice Manager in AWS Professional Services.</p> 
<p>&nbsp;</p>